[
  {
    "objectID": "02.html",
    "href": "02.html",
    "title": "2. Names and values",
    "section": "",
    "text": "No matching items",
    "crumbs": [
      "Foundations",
      "2. Names and values"
    ]
  },
  {
    "objectID": "02.html#meeting-videos",
    "href": "02.html#meeting-videos",
    "title": "2. Names and values",
    "section": "Meeting videos",
    "text": "Meeting videos\n\n\n\n\nNo matching items",
    "crumbs": [
      "Foundations",
      "2. Names and values"
    ]
  },
  {
    "objectID": "videos/01/06.html",
    "href": "videos/01/06.html",
    "title": "Cohort 6",
    "section": "",
    "text": "Meeting chat log\n\n00:14:40    SriRam: From Toronto, Civil Engineer. I use R for infrastructure planning/ GIS. Here coz of the ping üòÑ , was not ready with a good computer with mic/audio !\n00:15:20    SriRam: I was with Ryan, Federica on other courses\n00:23:21    SriRam: I think the only caution is about Copyright issues\n00:31:32    Ryan Metcalf:   Citation, giving credit back to source. Great comment SriRam.\n00:34:33    SriRam: one = one, in my opinion\n00:41:53    Ryan Metcalf:   https://docs.google.com/spreadsheets/d/1_WFY82UxAdvP4GUdZ2luh15quwdO1n0Km3Q0tfYuqvc/edit#gid=0\n00:48:35    Arthur Shaw:    The README has a nice step-by-step process at the bottom: https://github.com/r4ds/bookclub-advr#how-to-present. I've not done this myself yet, but it looks fairly straightforward.\n00:54:13    lucus w:    Thanks Ryan. Probably {usethis} will be easier. It looks straight forward\n01:00:02    Moria W.:   Thank you for sharing that. This has been good!\n01:00:08    Vaibhav Janve:  Thank you\n01:00:44    Federica Gazzelloni:    hi SriRam we are going.."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is a companion for Advanced R by Hadley Wickham (Chapman & Hall, copyright 2019, 9780815384571).\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed by this club.\nEach deck will open in its own tab.\nYou may want to type ‚Äús‚Äù at the start of each deck to open the speaker notes.\nJoin the Data Science Learning Community to participate in the discussion!\n\nWe follow the Data Science Learning Community Code of Conduct.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/02.html#learning-objectives",
    "href": "slides/02.html#learning-objectives",
    "title": "Names and values",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nTo be able to understand distinction between an object and its name\nWith this knowledge, to be able write faster code using less memory\nTo better understand R‚Äôs functional programming tools\n\nUsing lobstr package here."
  },
  {
    "objectID": "slides/02.html#quiz",
    "href": "slides/02.html#quiz",
    "title": "Names and values",
    "section": "Quiz",
    "text": "Quiz\n1. How do I create a new column called 3 that contains the sum of 1 and 2?\n\n\n#&gt;           1         2\n#&gt; 1 0.7776427 0.7909090\n#&gt; 2 0.8662390 0.7339806\n#&gt; 3 0.6223678 0.1128927\n\n\n\n\n#&gt;           1         2         3\n#&gt; 1 0.7776427 0.7909090 1.5685517\n#&gt; 2 0.8662390 0.7339806 1.6002196\n#&gt; 3 0.6223678 0.1128927 0.7352605\n\n\nWhat makes these names challenging?\n\nYou need to use backticks (`) when the name of an object doesn‚Äôt start with a a character or ‚Äò.‚Äô [or . followed by a number] (non-syntactic names).\n\n2. How much memory does y occupy?\nNeed to use the lobstr package:\n\n\n#&gt; 8.00 MB\n\n\n\nNote that if you look in the RStudio Environment or use R base object.size() you actually get a value of 24 MB\n\n\n\n#&gt; 24000224 bytes\n\n\n3. On which line does a get copied in the following example?\n\nNot until b is modified, the third line"
  },
  {
    "objectID": "slides/02.html#binding-basics",
    "href": "slides/02.html#binding-basics",
    "title": "Names and values",
    "section": "Binding basics",
    "text": "Binding basics\n\nCreate values and bind a name to them\nNames have values (rather than values have names)\nMultiple names can refer to the same values\nWe can look at an object‚Äôs address to keep track of the values independent of their names\n\n\n\n#&gt; [1] \"0x5613749de258\"\n\n\n#&gt; [1] \"0x5613749de258\"\n\n\nExercises\n1. Explain the relationships\n\na b and c are all names that refer to the first value 1:10\nd is a name that refers to the second value of 1:10.\n\n2. Do the following all point to the same underlying function object? hint: lobstr::obj_addr()\n\n\n#&gt; [1] \"0x5613720b71c0\"\n\n\n#&gt; [1] \"0x5613720b71c0\"\n\n\n#&gt; [1] \"0x5613720b71c0\"\n\n\n#&gt; [1] \"0x5613720b71c0\"\n\n\n#&gt; [1] \"0x5613720b71c0\"\n\n\n\nYes!"
  },
  {
    "objectID": "slides/02.html#copy-on-modify",
    "href": "slides/02.html#copy-on-modify",
    "title": "Names and values",
    "section": "Copy-on-modify",
    "text": "Copy-on-modify\n\nIf you modify a value bound to multiple names, it is ‚Äòcopy-on-modify‚Äô\nIf you modify a value bound to a single name, it is ‚Äòmodify-in-place‚Äô\nUse tracemem() to see when a name‚Äôs value changes\n\n\n\n#&gt; &lt;0x561372ece658&gt;\n\n\n\n\n#&gt; tracemem[0x561372ece658 -&gt; 0x561372d6a6b8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main\n\n\nTurn off tracemem() with untracemem()\n\nCan also use ref(x) to get the address of the value bound to a given name"
  },
  {
    "objectID": "slides/02.html#functions",
    "href": "slides/02.html#functions",
    "title": "Names and values",
    "section": "Functions",
    "text": "Functions\n\nCopying also applies within functions\nIf you copy (but don‚Äôt modify) x within f(), no copy is made\n\n\n\n#&gt; [1:0x5613730c7078] &lt;dbl&gt;\n\n\n#&gt; [1:0x5613730c7078] &lt;dbl&gt;"
  },
  {
    "objectID": "slides/02.html#lists",
    "href": "slides/02.html#lists",
    "title": "Names and values",
    "section": "Lists",
    "text": "Lists\n\nA list overall, has it‚Äôs own reference (id)\nList elements also each point to other values\nList doesn‚Äôt store the value, it stores a reference to the value\nAs of R 3.1.0, modifying lists creates a shallow copy\n\nReferences (bindings) are copied, but values are not\n\n\n\nWe can use ref() to see how they compare\n\nSee how the list reference is different\nBut first two items in each list are the same\n\n\n\n\n#&gt; ‚ñà [1:0x5613741cb328] &lt;list&gt; \n#&gt; ‚îú‚îÄ[2:0x5613741b0220] &lt;dbl&gt; \n#&gt; ‚îú‚îÄ[3:0x5613741b0060] &lt;dbl&gt; \n#&gt; ‚îî‚îÄ[4:0x5613741afea0] &lt;dbl&gt; \n#&gt;  \n#&gt; ‚ñà [5:0x5613741ca068] &lt;list&gt; \n#&gt; ‚îú‚îÄ[2:0x5613741b0220] \n#&gt; ‚îú‚îÄ[3:0x5613741b0060] \n#&gt; ‚îî‚îÄ[6:0x5613741aeb98] &lt;dbl&gt;"
  },
  {
    "objectID": "slides/02.html#data-frames",
    "href": "slides/02.html#data-frames",
    "title": "Names and values",
    "section": "Data Frames",
    "text": "Data Frames\n\nData frames are lists of vectors\nSo copying and modifying a column only affects that column\nBUT if you modify a row, every column must be copied\n\nOnly the modified column changes\n\n\n#&gt; ‚ñà [1:0x5613745e44a8] &lt;df[,2]&gt; \n#&gt; ‚îú‚îÄx = [2:0x561375115848] &lt;dbl&gt; \n#&gt; ‚îî‚îÄy = [3:0x5613751157f8] &lt;dbl&gt; \n#&gt;  \n#&gt; ‚ñà [4:0x5613746e8448] &lt;df[,2]&gt; \n#&gt; ‚îú‚îÄx = [2:0x561375115848] \n#&gt; ‚îî‚îÄy = [5:0x56137538e7d8] &lt;dbl&gt;\n\n\nAll columns change\n\n\n#&gt; ‚ñà [1:0x5613745e44a8] &lt;df[,2]&gt; \n#&gt; ‚îú‚îÄx = [2:0x561375115848] &lt;dbl&gt; \n#&gt; ‚îî‚îÄy = [3:0x5613751157f8] &lt;dbl&gt; \n#&gt;  \n#&gt; ‚ñà [4:0x561374db97e8] &lt;df[,2]&gt; \n#&gt; ‚îú‚îÄx = [5:0x561375cf1ad8] &lt;dbl&gt; \n#&gt; ‚îî‚îÄy = [6:0x561375cf1a88] &lt;dbl&gt;"
  },
  {
    "objectID": "slides/02.html#character-vectors",
    "href": "slides/02.html#character-vectors",
    "title": "Names and values",
    "section": "Character vectors",
    "text": "Character vectors\n\nR has a global string pool\nElements of character vectors point to unique strings in the pool"
  },
  {
    "objectID": "slides/02.html#exercises-1",
    "href": "slides/02.html#exercises-1",
    "title": "Names and values",
    "section": "Exercises",
    "text": "Exercises\n1. Why is tracemem(1:10) not useful?\n\nBecause it tries to trace a value that is not bound to a name\n\n2. Why are there two copies?\n\n\n#&gt; [1] \"&lt;0x561372f333e8&gt;\"\n\n\n#&gt; tracemem[0x561372f333e8 -&gt; 0x561372f28088]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561372f28088 -&gt; 0x561372efc3b8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main\n\n\n\nBecause we convert an integer vector (using 1L, etc.) to a double vector (using just 4)-\n\n3. What is the relationships among these objects?\na &lt;- obj 1\nb &lt;- obj 1, obj 1\nc &lt;- b(obj 1, obj 1), obj 1, 1:10\n\n\n#&gt; ‚ñà [1:0x561371a5dbc8] &lt;list&gt; \n#&gt; ‚îú‚îÄ‚ñà [2:0x561372852108] &lt;list&gt; \n#&gt; ‚îÇ ‚îú‚îÄ[3:0x561371b32e60] &lt;int&gt; \n#&gt; ‚îÇ ‚îî‚îÄ[3:0x561371b32e60] \n#&gt; ‚îú‚îÄ[3:0x561371b32e60] \n#&gt; ‚îî‚îÄ[4:0x561371a88288] &lt;int&gt;\n\n\n4. What happens here?\n\nx is a list\nx[[2]] &lt;- x creates a new list, which in turn contains a reference to the original list\nx is no longer bound to list(1:10)\n\n\n\n#&gt; ‚ñà [1:0x561371acedb8] &lt;list&gt; \n#&gt; ‚îú‚îÄ[2:0x5613730ec858] &lt;int&gt; \n#&gt; ‚îî‚îÄ‚ñà [3:0x5613732abbd0] &lt;list&gt; \n#&gt;   ‚îî‚îÄ[2:0x5613730ec858]"
  },
  {
    "objectID": "slides/02.html#object-size",
    "href": "slides/02.html#object-size",
    "title": "Names and values",
    "section": "Object Size",
    "text": "Object Size\n\nUse lobstr::obj_size()\nLists may be smaller than expected because of referencing the same value\nStrings may be smaller than expected because using global string pool\nDifficult to predict how big something will be\n\nCan only add sizes together if they share no references in common\n\n\nAlternative Representation\n\nAs of R 3.5.0 - ALTREP\nRepresent some vectors compactly\n\ne.g., 1:1000 - not 10,000 values, just 1 and 1,000\n\n\nExercises\n1. Why are the sizes so different?\n\n\n#&gt; 8005648 bytes\n\n\n#&gt; 80.90 kB\n\n\n\nFrom ?object.size():\n‚ÄúThis function merely provides a rough indication: it should be reasonably accurate for atomic vectors, but does not detect if elements of a list are shared, for example.\n\n2. Why is the size misleading?\n\n\n#&gt; 18.76 kB\n\n\n\nBecause they reference functions from base and stats, which are always available. Why bother looking at the size? What use is that?\n\n3. Predict the sizes\n\n\n#&gt; 8.00 MB\n\n\n\nThere is one value ~8MB\na and b[[1]] and b[[2]] all point to the same value.\n\n\n\n#&gt; 8.00 MB\n\n\n#&gt; 8.00 MB\n\n\n\nNow there are two values ~8MB each (16MB total)\na and b[[2]] point to the same value (8MB)\nb[[1]] is new (8MB) because the first element (b[[1]][[1]]) has been changed\n\n\n\n#&gt; 16.00 MB\n\n\n#&gt; 16.00 MB\n\n\n\nFinally, now there are three values ~8MB each (24MB total)\nAlthough b[[1]] and b[[2]] have the same contents, they are not references to the same object.\n\n\n\n#&gt; 16.00 MB\n\n\n#&gt; 24.00 MB"
  },
  {
    "objectID": "slides/02.html#modify-in-place",
    "href": "slides/02.html#modify-in-place",
    "title": "Names and values",
    "section": "Modify-in-place",
    "text": "Modify-in-place\n\nModifying usually creates a copy except for\n\nObjects with a single binding (performance optimization)\nEnvironments (special)\n\n\nObjects with a single binding\n\nHard to know if copy will occur\nIf you have 2+ bindings and remove them, R can‚Äôt follow how many are removed (so will always think there are more than one)\nMay make a copy even if there‚Äôs only one binding left\nUsing a function makes a reference to it unless it‚Äôs a function based on C\nBest to use tracemem() to check rather than guess.\n\nExample - lists vs.¬†data frames in for loop\nSetup\nCreate the data to modify\nData frame - Copied every time!\n\n\n#&gt; &lt;0x561374e88938&gt;\n\n\n#&gt; tracemem[0x561374e88938 -&gt; 0x561375a8d538]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8d538 -&gt; 0x561375a8c818]: [[&lt;-.data.frame [[&lt;- eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c818 -&gt; 0x561375a8c7a8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c7a8 -&gt; 0x561375a8c738]: [[&lt;-.data.frame [[&lt;- eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c738 -&gt; 0x561375a8c6c8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c6c8 -&gt; 0x561375a8c658]: [[&lt;-.data.frame [[&lt;- eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c658 -&gt; 0x561375a8c5e8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c5e8 -&gt; 0x561375a8c578]: [[&lt;-.data.frame [[&lt;- eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c578 -&gt; 0x561375a8c508]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main \n#&gt; tracemem[0x561375a8c508 -&gt; 0x561375a8c498]: [[&lt;-.data.frame [[&lt;- eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main\n\n\nList (uses internal C code) - Copied once!\n\n\n#&gt; &lt;0x561373e392f8&gt;\n\n\n#&gt; tracemem[0x561373e392f8 -&gt; 0x561373da2ea8]: eval eval withVisible withCallingHandlers eval eval with_handlers doWithOneRestart withOneRestart withRestartList doWithOneRestart withOneRestart withRestartList withRestarts &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group withCallingHandlers &lt;Anonymous&gt; process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main\n\n\nBenchmark this (Exercise #2)\nFirst wrap in a function\nTry with 5 columns\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 data.frame   78.8¬µs   87.8¬µs    10829.     410KB     152.\n#&gt; 2 list         21.7¬µs   37.3¬µs    25174.     391KB     274.\n\n\nTry with 20 columns\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 data.frame    257¬µs  271.3¬µs     3654.     400KB     35.0\n#&gt; 2 list         26.9¬µs   33.6¬µs    27480.     392KB    266.\n\n\nWOW!\nEnvironmments\n\nAlways modified in place (reference semantics)\nInteresting because if you modify the environment, all existing bindings have the same reference\nIf two names point to the same environment, and you update one, you update both!\n\n\n\n#&gt; [1] 4\n\n\n\nThis means that environments can contain themselves (!)\n\nExercises\n1. Why isn‚Äôt this circular?\n\nBecause the binding to the list() object moves from x in the first line to x[[1]] in the second.\n\n2. (see ‚ÄúObjects with a single binding‚Äù)\n3. What happens if you attempt to use tracemem() on an environment?\n\n\n#&gt; Error in tracemem(e1): 'tracemem' is not useful for promise and environment objects\n\n\n\nBecause environments always modified in place, there‚Äôs no point in tracing them"
  },
  {
    "objectID": "slides/02.html#unbinding-and-the-garbage-collector",
    "href": "slides/02.html#unbinding-and-the-garbage-collector",
    "title": "Names and values",
    "section": "Unbinding and the garbage collector",
    "text": "Unbinding and the garbage collector\n\nIf you delete the ‚Äòname‚Äô bound to an object, the object still exists\nR runs a ‚Äúgarbage collector‚Äù (GC) to remove these objects when it needs more memory\n‚ÄúLooking from the outside, it‚Äôs basically impossible to predict when the GC will run. In fact, you shouldn‚Äôt even try.‚Äù\nIf you want to know when it runs, use gcinfo(TRUE) to get a message printed\nYou can force GC with gc() but you never need to to use more memory within R\nOnly reason to do so is to free memory for other system software, or, to get the message printed about how much memory is being used\n\n\n\n#&gt;           used (Mb) gc trigger (Mb) max used (Mb)\n#&gt; Ncells  738270 39.5    1383141 73.9  1383141 73.9\n#&gt; Vcells 4424092 33.8   10146329 77.5 10146324 77.5\n\n\n#&gt; 76.74 MB\n\n\n\nThese numbers will not be what you OS tells you because,\n\nIt includes objects created by R, but not R interpreter\nR and OS are lazy and don‚Äôt reclaim/release memory until it‚Äôs needed\nR counts memory from objects, but there are gaps due to those that are deleted -&gt; memory fragmentation [less memory actually available they you might think]"
  },
  {
    "objectID": "slides/02.html#meeting-videos",
    "href": "slides/02.html#meeting-videos",
    "title": "Names and values",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n(no video recorded)\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:16:57    Federica Gazzelloni:    cohort 2 video: https://www.youtube.com/watch?v=pCiNj2JRK50\n00:18:39    Federica Gazzelloni:    cohort 2 presentation: https://r4ds.github.io/bookclub-Advanced_R/Presentations/Week02/Cohort2_America/Chapter2Slides.html#1\n00:40:24    Arthur Shaw:    Just the opposite, Ryan. Very clear presentation!\n00:51:54    Trevin: parquet?\n00:53:00    Arthur Shaw:    We may all be right. {arrow} looks to deal with feather and parquet files: https://arrow.apache.org/docs/r/\n01:00:04    Arthur Shaw:    Some questions for future meetings. (1) I find Ryan's use of slides hugely effective in conveying information. Would it be OK if future sessions (optionally) used slides? If so, should/could we commit slides to some folder on the repo? (2) I think reusing the images from Hadley's books really helps understanding and discussion. Is that OK to do? Here I'm thinking about copyright concerns. (If possible, I would rather not redraw variants of Hadley's images.)\n01:01:35    Federica Gazzelloni:    It's all ok, you can use past presentation, you don't need to push them to the repo, you can use the images from the book\n01:07:19    Federica Gazzelloni:    Can I use: gc(reset = TRUE) safely?\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:09:40    Ryan Honomichl: https://drdoane.com/three-deep-truths-about-r/\n00:12:51    Robert Hilly:   Be right back\n00:36:12    Ryan Honomichl: brb\n00:41:18    Ron:    I tried mapply and also got different answers\n00:41:44    collinberke:    Interesting, would like to know more what is going on.\n00:49:57    Robert Hilly:   simple_map &lt;- function(x, f, ...) {\n  out &lt;- vector(\"list\", length(x))\n  for (i in seq_along(x)) {\n    out[[i]] &lt;- f(x[[i]], ...)\n  }\n  out\n}"
  },
  {
    "objectID": "slides/19_Quasiquotation.html#introduction",
    "href": "slides/19_Quasiquotation.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nThree pillars of tidy evaluation\n\nQuasiquotation\nQuosures (chapter 20)\nData masks (Chapter 20)\n\nQuasiquotation = quotation + unquotation\n\nQuote. Capture unevaluated expression‚Ä¶ (‚Äúdefuse‚Äù)\n\nUnquote. Evaluate selections of quoted expression! (‚Äúinject‚Äù)\nFunctions that use these features are said to use Non-standard evaluation (NSE)\nNote: related to Lisp macros, and also exists in other languages with Lisp heritage, e.g.¬†Julia\n\n\nOn it‚Äôs own, Quasiquotation good for programming, but combined with other tools, important for data analysis.",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#motivation",
    "href": "slides/19_Quasiquotation.html#motivation",
    "title": "Advanced R Book Club",
    "section": "Motivation",
    "text": "Motivation\nSimple concrete example:\ncement() is a function that works like paste() but doesn‚Äôt need need quotes\n(Think of automatically adding ‚Äòquotes‚Äô to the arguments)\n\n\n#&gt; [1] \"Good morning Hadley\"\n\n\nWhat if we wanted to use variables? What is an object and what should be quoted?\nThis is where ‚Äòunquoting‚Äô comes in!\n\n\n#&gt; [1] \"Good afternoon Bob\"",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#vocabulary",
    "href": "slides/19_Quasiquotation.html#vocabulary",
    "title": "Advanced R Book Club",
    "section": "Vocabulary",
    "text": "Vocabulary\nCan think of cement() and paste() as being ‚Äòmirror-images‚Äô of each other.\n\npaste() - define what to quote - Evaluates arguments\ncement() - define what to unquote - Quotes arguments\n\nQuoting function similar to, but more precise than, Non-standard evaluation (NSE)\n\nTidyverse functions - e.g., dplyr::mutate(), tidyr::pivot_longer()\nBase functions - e.g., library(), subset(), with()\n\nQuoting function arguments cannot be evaluated outside of function:\n\n\n#&gt; [1] \"Good afternoon Cohort\"\n\n\n#&gt; Error: object 'Good' not found\n\n\nNon-quoting (standard) function arguments can be evaluated:\n\n\n#&gt; [1] \"Good afternoon Cohort\"\n\n\n#&gt; [1] \"Good\"",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#quoting",
    "href": "slides/19_Quasiquotation.html#quoting",
    "title": "Advanced R Book Club",
    "section": "Quoting",
    "text": "Quoting\nCapture expressions without evaluating them\n\n\n\n\n\n\n\n\n\nDeveloper\nUser\n\n\n\n\nExpression (Quasiquotation)\n\n\nOne\nexpr()\nenexpr()\n\n\nMany\nexprs()\nenexprs()\n\n\nSymbol (Quasiquotation)\n\n\nOne\nexpr()\nensym()\n\n\nMany\nexprs()\nensyms()\n\n\nR Base (Quotation)\n\n\nOne\nquote()\nalist()\n\n\nMany\nsubstitute()\nas.list(substitute(...()))\n\n\n\n\n\n\n\n\nNon-base functions are from rlang\nDeveloper - From you, direct, fixed, interactive\nUser - From the user, indirect, varying, programmatic\n\nAlso:\n\nbquote() provides a limited form of quasiquotation\n~, the formula, is a quoting function (see Section 20.3.4)\n\nexpr() and exprs()\n\n\n#&gt; x + y\n\n\n#&gt; $exp1\n#&gt; x + y\n#&gt; \n#&gt; $exp2\n#&gt; x * y\n\n\nenexpr()1 and enexprs()\n\n\n#&gt; a + b + c\n\n\n#&gt; $exp1\n#&gt; a + b\n#&gt; \n#&gt; $exp2\n#&gt; c + d\n\n\nensym() and ensyms()\n\nRemember: Symbol represents the name of an object. Can only be length 1.\nThese are stricter than enexpr/s()\n\n\n\n#&gt; a\n\n\n#&gt; $sym1\n#&gt; a\n#&gt; \n#&gt; $sym2\n#&gt; b\n\n\nenexpr() = enrich expr()",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#unquoting",
    "href": "slides/19_Quasiquotation.html#unquoting",
    "title": "Advanced R Book Club",
    "section": "Unquoting",
    "text": "Unquoting\nSelectively evaluate parts of an expression\n\nMerges ASTs with template\n1 argument !! (unquote, bang-bang)\n\nUnquoting a function call evaluates and returns results\nUnquoting a function (name) replaces the function (alternatively use call2())\n\n&gt;1 arguments !!! (unquote-splice, bang-bang-bang, triple bang)\n!! and !!! only work like this inside quoting function using rlang\n\nBasic unquoting\nOne argument\n\n#&gt; f(x, y)\n#&gt; f(a + b, c/d)\n\nMultiple arguments\n\n#&gt; f(z)\n#&gt; f(a + b, c + d)\n#&gt; f(exp1 = a + b, exp2 = c + d)\n\nSpecial usages or cases\nFor example, get the AST of an expression\n\n#&gt; x\n#&gt; ‚ñà‚îÄ`+` \n#&gt; ‚îú‚îÄa \n#&gt; ‚îî‚îÄb\n\nUnquote function call\n\n#&gt; f(200, y)\n\nUnquote function\n\n#&gt; sd(x)\n#&gt; sd(a + b + c/d)",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#non-quoting",
    "href": "slides/19_Quasiquotation.html#non-quoting",
    "title": "Advanced R Book Club",
    "section": "Non-quoting",
    "text": "Non-quoting\nOnly bquote() provides a limited form of quasiquotation.\nThe rest of base selectively uses or does not use quoting (rather than unquoting).\nFour basic forms of quoting/non-quoting:\n\nPair of functions - Quoting and non-quoting\n\ne.g., $ (quoting) and [[ (non-quoting)\n\nPair of Arguments - Quoting and non-quoting\n\ne.g., rm(...) (quoting) and rm(list = c(...)) (non-quoting)\n\nArg to control quoting\n\ne.g., library(rlang) (quoting) and library(pkg, character.only = TRUE) (where pkg &lt;- \"rlang\")\n\nQuote if evaluation fails\n\nhelp(var) - Quote, show help for var\nhelp(var) (where var &lt;- \"mean\") - No quote, show help for mean\nhelp(var) (where var &lt;- 10) - Quote fails, show help for var",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#dot-dot-dot-when-using-with-quoting",
    "href": "slides/19_Quasiquotation.html#dot-dot-dot-when-using-with-quoting",
    "title": "Advanced R Book Club",
    "section": "‚Ä¶ (dot-dot-dot) [When using ‚Ä¶ with quoting]",
    "text": "‚Ä¶ (dot-dot-dot) [When using ‚Ä¶ with quoting]\n\nSometimes need to supply an arbitrary list of expressions or arguments in a function (...)\nBut need a way to use these when we don‚Äôt necessarily have the names\nRemember !! and !!! only work with functions that use rlang\nCan use list2(...) to turn ... into ‚Äútidy dots‚Äù which can be unquoted and spliced\nRequire list2() if going to be passing or using !! or !!! in ...\nlist2() is a wrapper around dots_list() with the most common defaults\n\nNo need for list2()\n\n#&gt;   x y\n#&gt; 1 1 2\n#&gt; 2 2 4\n#&gt; 3 3 6\n\nRequire list2()\n\n#&gt; Error in !vars: invalid argument type\n#&gt;   x y\n#&gt; 1 1 2\n#&gt; 2 2 4\n#&gt; 3 3 6\n#&gt;   x y\n#&gt; 1 1 2\n#&gt; 2 2 4\n#&gt; 3 3 6\n\nGetting argument names (symbols) from variables\n\n\n#&gt;   x z\n#&gt; 1 1 a\n#&gt; 2 2 b\n#&gt; 3 3 c\n#&gt; 4 4 d",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#exec-making-your-own",
    "href": "slides/19_Quasiquotation.html#exec-making-your-own",
    "title": "Advanced R Book Club",
    "section": "exec() [Making your own ‚Ä¶]",
    "text": "exec() [Making your own ‚Ä¶]\nWhat if your function doesn‚Äôt have tidy dots?\nCan‚Äôt use !! or := if doesn‚Äôt support rlang or dynamic dots\n\n#&gt; Error in `my_mean()`:\n#&gt; ! `:=` can only be used within dynamic dots.\n\nLet‚Äôs use the ‚Ä¶ from exec()\n\n#&gt; [1] 5.5\n\nNote that you do not unquote arg_val.\nAlso exec is useful for mapping over a list of functions:\n\n\n#&gt; [1] 0.6822224 0.7519044 0.2378058",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#base-r-do.call",
    "href": "slides/19_Quasiquotation.html#base-r-do.call",
    "title": "Advanced R Book Club",
    "section": "Base R do.call",
    "text": "Base R do.call\ndo.call(what, args)\n\nwhat is a function to call\nargs is a list of arguments to pass to the function.\n\n\n#&gt; [1] 32\n#&gt; [1] 96\n\nExercise 19.5.5 #1\nOne way to implement exec is shown here: Describe how it works. What are the key ideas?",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#case-studies-side-note",
    "href": "slides/19_Quasiquotation.html#case-studies-side-note",
    "title": "Advanced R Book Club",
    "section": "Case Studies (side note)",
    "text": "Case Studies (side note)\nSometimes you want to run a bunch of models, without having to copy/paste each one.\nBUT, you also want the summary function to show the appropriate model call, not one with hidden variables (e.g., lm(y ~ x, data = data)).\nWe can achieve this by building expressions and unquoting as needed:\n\n#&gt; [[1]]\n#&gt; mpg ~ hp\n#&gt; \n#&gt; [[2]]\n#&gt; cyl ~ hp\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = mpg ~ hp, data = mtcars)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -5.7121 -2.1122 -0.8854  1.5819  8.2360 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***\n#&gt; hp          -0.06823    0.01012  -6.742 1.79e-07 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 3.863 on 30 degrees of freedom\n#&gt; Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 \n#&gt; F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07\n\nAs a function:\n\n#&gt; [[1]]\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = mpg ~ hp, data = mtcars)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -5.7121 -2.1122 -0.8854  1.5819  8.2360 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***\n#&gt; hp          -0.06823    0.01012  -6.742 1.79e-07 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 3.863 on 30 degrees of freedom\n#&gt; Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 \n#&gt; F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = cyl ~ hp, data = mtcars)\n#&gt; \n#&gt; Residuals:\n#&gt;      Min       1Q   Median       3Q      Max \n#&gt; -2.27078 -0.74879 -0.06417  0.63512  1.74067 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 3.006795   0.425485   7.067 7.41e-08 ***\n#&gt; hp          0.021684   0.002635   8.229 3.48e-09 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 1.006 on 30 degrees of freedom\n#&gt; Multiple R-squared:  0.693,  Adjusted R-squared:  0.6827 \n#&gt; F-statistic: 67.71 on 1 and 30 DF,  p-value: 3.478e-09",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/19_Quasiquotation.html#meeting-videos",
    "href": "slides/19_Quasiquotation.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n01:02:07    Trevin: Yeah, that was a great workshop\n01:02:18    Trevin: Glad they posted the resources online\n01:06:39    Trevin: Thank you!\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:50:48    Stone:  https://www.r-bloggers.com/2018/10/quasiquotation-in-r-via-bquote/\n00:58:26    iPhone: See ya next week!\n\n\n\n\n\nMeeting chat log\n\n00:55:22    collinberke:    https://rlang.r-lib.org/reference/embrace-operator.html?q=enquo#under-the-hood",
    "crumbs": [
      "Metaprogramming",
      "Quasiquotation"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#what-is-a-function-factory",
    "href": "slides/10_Function_factories.html#what-is-a-function-factory",
    "title": "Advanced R Book Club",
    "section": "What is a function factory?",
    "text": "What is a function factory?\nA function factory is a function that makes (returns) functions\nFactory made function are manufactured functions.\n\nFunction factory | Credits: epsis.com",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#how-does-a-function-factory-work",
    "href": "slides/10_Function_factories.html#how-does-a-function-factory-work",
    "title": "Advanced R Book Club",
    "section": "How does a function factory work?",
    "text": "How does a function factory work?\n\nHow does it work? | Credits: kakaakigas.com/how-it-works/power1() is the function factory and square() and cube() are manufactured functions.",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#important-to-remember",
    "href": "slides/10_Function_factories.html#important-to-remember",
    "title": "Advanced R Book Club",
    "section": "Important to remember",
    "text": "Important to remember\n\nR has First-class functions (can be created with function() and &lt;-)\n\n\nR functions are objects in their own right, a language property often called ‚Äúfirst-class functions‚Äù\n‚Äì Section 6.2.3\n\n\nFunctions capture (enclose) environment in which they are created\n\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\n#&gt; &lt;environment: 0x55ee40728208&gt;\n\n\n\nFunctions create a new environment on each run\n\n\n\n#&gt; [1] 2\n\n\n#&gt; [1] 2",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#fundamentals---environment",
    "href": "slides/10_Function_factories.html#fundamentals---environment",
    "title": "Advanced R Book Club",
    "section": "Fundamentals - Environment",
    "text": "Fundamentals - Environment\n\nEnvironment when function is created defines arguments in the function\nUse env_print(fun) and fn_env() to explore\n\n\n\n#&gt; &lt;environment: 0x55ee402627f0&gt;\n#&gt; Parent: &lt;environment: global&gt;\n#&gt; Bindings:\n#&gt; ‚Ä¢ exp: &lt;lazy&gt;\n\n\n#&gt; [1] 2\n\n\n\nBlue indicates environment, arrows bindings",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#fundamentals---forcing",
    "href": "slides/10_Function_factories.html#fundamentals---forcing",
    "title": "Advanced R Book Club",
    "section": "Fundamentals - Forcing",
    "text": "Fundamentals - Forcing\n\nLazy evaluation means arguments only evaluated when used\n‚Äú[can] lead to a real head-scratcher of a bug‚Äù\n\n\n\n#&gt; [1] 64\n\n\n\nOnly applies if passing object as argument\nHere argument 2 evaluated when function called\n\n\n\n#&gt; [1] 16\n\n\nSo use force()! (Unless you want it to change with the x in the parent environment)",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#forcing---reiterated",
    "href": "slides/10_Function_factories.html#forcing---reiterated",
    "title": "Advanced R Book Club",
    "section": "Forcing - Reiterated",
    "text": "Forcing - Reiterated\nOnly required if the argument is not evaluated before the new function is created:\n\n\n#&gt; [1] 16",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#fundamentals---stateful-functions",
    "href": "slides/10_Function_factories.html#fundamentals---stateful-functions",
    "title": "Advanced R Book Club",
    "section": "Fundamentals - Stateful functions",
    "text": "Fundamentals - Stateful functions\nBecause\n\nThe enclosing environment is unique and constant, and\nWe have &lt;&lt;- (super assignment)\n\nWe can change that enclosing environment and keep track of that state across iterations (!)\n\n&lt;- Assignment in current environment\n&lt;&lt;- Assignment in parent environment\n\n\n\n#&gt; [1] 1 2 3\n\n\n#&gt; [1] 1 2 3\n\n\n\n‚ÄúAs soon as your function starts managing the state of multiple variables, it‚Äôs better to switch to R6‚Äù",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#fundamentals---garbage-collection",
    "href": "slides/10_Function_factories.html#fundamentals---garbage-collection",
    "title": "Advanced R Book Club",
    "section": "Fundamentals - Garbage collection",
    "text": "Fundamentals - Garbage collection\n\nBecause environment is attached to (enclosed by) function, temporary objects don‚Äôt go away.\n\nCleaning up using rm() inside a function:\n\n\n#&gt; 8.00 MB\n\n\n#&gt; 504 B",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#useful-examples---histograms-and-binwidth",
    "href": "slides/10_Function_factories.html#useful-examples---histograms-and-binwidth",
    "title": "Advanced R Book Club",
    "section": "Useful Examples - Histograms and binwidth",
    "text": "Useful Examples - Histograms and binwidth\nUseful when‚Ä¶\n\nYou need to pass a function\n\nYou don‚Äôt want to have to re-write the function every time (the default behaviour of the function should be flexible)\n\nFor example, these bins are not appropriate\n\n\n\n\n\n\n\n\n\nWe could just make a function‚Ä¶\n\n\n\n\n\n\n\n\n\nBut if we want to change the number of bins (20) we‚Äôd have to re-write the function each time.\nIf we use a factory, we don‚Äôt have to do that.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimilar benefit in Box-cox example",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#useful-examples---wrapper",
    "href": "slides/10_Function_factories.html#useful-examples---wrapper",
    "title": "Advanced R Book Club",
    "section": "Useful Examples - Wrapper",
    "text": "Useful Examples - Wrapper\nUseful when‚Ä¶\n\nYou want to create a function that wraps a bunch of other functions\n\nFor example, ggsave() wraps a bunch of different graphics device functions:\nThen ggsave() uses\nggsave &lt;- function(...) {\n  dev &lt;- plot_dev(device, filename, dpi = dpi)\n  ...\n  dev(filename = filename, width = dim[1], height = dim[2], bg = bg, ...)\n  ...\n}\nOtherwise, would have to do something like like a bunch of if/else statements.",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#useful-examples---optimizing",
    "href": "slides/10_Function_factories.html#useful-examples---optimizing",
    "title": "Advanced R Book Club",
    "section": "Useful Examples - Optimizing",
    "text": "Useful Examples - Optimizing\nUseful when‚Ä¶\n\nWant to pass function on to optimise()/optimize()\nWant to perform pre-computations to speed things up\nWant to re-use this for other datasets\n\n(Skipping to final results from section)\nHere, using MLE want to to find the most likely value of lambda for a Poisson distribution and this data.\nWe‚Äôll create a function that creates a lambda assessment function for a given data set.\nWe can use this on different data sets, but here use ours x1\n\n\n#&gt; [1] -183.6405\n\n\nUse optimise() rather than trial and error\n\n\n#&gt; $maximum\n#&gt; [1] 32.09999\n#&gt; \n#&gt; $objective\n#&gt; [1] -30.26755\n\n\nResult: Highest log-probability is -30.3, best lambda is 32.1",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#function-factories-functionals",
    "href": "slides/10_Function_factories.html#function-factories-functionals",
    "title": "Advanced R Book Club",
    "section": "Function factories + functionals",
    "text": "Function factories + functionals\nCombine functionals and function factories to turn data into many functions.\n\n\n#&gt; [1] \"square\"     \"cube\"       \"root\"       \"cuberoot\"   \"reciprocal\"\n\n\n#&gt; [1] 8\n\n\n#&gt; [1] 9\n\n\nAvoid the prefix with\n\nwith() - with(funs, root(100))\n\nTemporary, clear, short-term\n\nattach() - attach(funs) / detach(funs)\n\nAdded to search path (like package function), cannot be overwritten, but can be attached multiple times!\n\nrlang::env_bind - env_bind(globalenv(), !!!funs) / env_unbind(gloablenv(), names(funs))\n\nAdded to global env (like created function), can be overwritten",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/10_Function_factories.html#meeting-videos",
    "href": "slides/10_Function_factories.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n01:02:25    Trevin: I'm good with combining üëç\n01:02:57    Oluwafemi Oyedele:  I agree with combining the chapter!!!\n\nCohort 7",
    "crumbs": [
      "Functional programming",
      "Function factories"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#case-study-mcq",
    "href": "slides/21_Translating_R_code.html#case-study-mcq",
    "title": "Advanced R Book Club",
    "section": "Case Study: MCQ",
    "text": "Case Study: MCQ\nWe are going to use R code to generate HTML or LaTeX to produce multiple-choice questions such as\nPop Quiz!\n\nWhat is the derivative of \\(f(x) = 1 + 2\\cos(3\\pi x + 4)\\)?\n\n\\(f'(x) = 6\\pi\\sin(3\\pi x + 4)\\)\n\\(f'(x) = -6\\pi\\sin(3\\pi x + 4)\\)\n\\(f'(x) = 24\\pi\\sin(3\\pi x + 4)\\)\n\\(f'(x) = -24\\pi\\sin(3\\pi x + 4)\\)\n\n\n\nA whisker plot",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#html",
    "href": "slides/21_Translating_R_code.html#html",
    "title": "Advanced R Book Club",
    "section": "HTML",
    "text": "HTML\nWe are trying to produce\n&lt;body&gt;\n  &lt;h1 id = 'pop_quiz'&gt;Pop Quiz&lt;/h1&gt;\n  &lt;ol&gt;\n    &lt;li&gt;What is the &lt;b&gt;derivative&lt;/b&gt; of $f(x) = 1 + 2\\cos(3\\pi x + 4)$?&lt;/li&gt;\n    &lt;ol&gt;\n      &lt;li&gt;$f'(x) = 6\\pi\\sin(3\\pi x + 4)$&lt;/li&gt;\n      &lt;li&gt;$f'(x) = -6\\pi\\sin(3\\pi x + 4)$&lt;/li&gt;\n      &lt;li&gt;$f'(x) = 24\\pi\\sin(3\\pi x + 4)$&lt;/li&gt;\n      &lt;li&gt;$f'(x) = -24\\pi\\sin(3\\pi x + 4)$&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/ol&gt;\n  &lt;img src = 'calculus_cat.png' width = '100' height = '100' /&gt;\n&lt;/body&gt;\nusing DSL\nIn particular,\n\ntags such as &lt;b&gt;&lt;/b&gt; have attributes\nvoid tags such as &lt;img /&gt;\nspecial characters: &, &lt;, and &gt;\n\n\n\nHTML verification\n\n\n  Pop Quiz\n  \n    What is the derivative of $f(x) = 1 + 2\\cos(3\\pi x + 4)$?\n    \n      $f'(x) = 6\\pi\\sin(3\\pi x + 4)$\n      $f'(x) = -6\\pi\\sin(3\\pi x + 4)$\n      $f'(x) = 24\\pi\\sin(3\\pi x + 4)$\n      $f'(x) = -24\\pi\\sin(3\\pi x + 4)$",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#escaping",
    "href": "slides/21_Translating_R_code.html#escaping",
    "title": "Advanced R Book Club",
    "section": "Escaping",
    "text": "Escaping\n\nneed to escape &, &lt;, and &gt;\ndon‚Äôt ‚Äúdouble escape‚Äù\nleave HTML alone\n\nS3 Class\nGeneric\nChecks\n\n\n#&gt; &lt;HTML&gt; This is some text.\n\n\n#&gt; &lt;HTML&gt; x &gt; 1 &amp; y &lt; 2\n\n\n#&gt; &lt;HTML&gt; This is some text. 1 &gt; 2\n\n\n#&gt; &lt;HTML&gt; &lt;hr /&gt;",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#named-components",
    "href": "slides/21_Translating_R_code.html#named-components",
    "title": "Advanced R Book Club",
    "section": "Named Components",
    "text": "Named Components\nli(\"What is the \", b(\"derivative\"),  \"of $f(x) = 1 + 2\\cos(3\\pi x + 4)$?\")\n\naiming to classify li and b as named components\n\nCheck\n\n\n#&gt; List of 2\n#&gt;  $ named  :List of 2\n#&gt;   ..$ company : chr \"Posit\"\n#&gt;   ..$ software: chr \"RStudio\"\n#&gt;  $ unnamed:List of 2\n#&gt;   ..$ : chr \"DSLC\"\n#&gt;   ..$ : chr \"Cohort 9\"\n\n\n\n\nHTML Attributes\n\nFound among the textbook‚Äôs source code",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#tags-calls",
    "href": "slides/21_Translating_R_code.html#tags-calls",
    "title": "Advanced R Book Club",
    "section": "Tags (calls)",
    "text": "Tags (calls)\n\n\nVoid tags\n\n\nChecks\n\n\n#&gt; function (...) \n#&gt; {\n#&gt;     dots &lt;- dots_partition(...)\n#&gt;     attribs &lt;- html_attributes(dots$named)\n#&gt;     children &lt;- map_chr(dots$unnamed, escape)\n#&gt;     html(paste0(\"&lt;ol\", attribs, \"&gt;\", paste(children, collapse = \"\"), \n#&gt;         \"&lt;/ol&gt;\"))\n#&gt; }\n\n\n\n\n\n\n#&gt; &lt;HTML&gt; &lt;img src='images/translating/calculus_cat.png' width='100'\n#&gt; height='100' /&gt;",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#tags-processing",
    "href": "slides/21_Translating_R_code.html#tags-processing",
    "title": "Advanced R Book Club",
    "section": "Tags (processing)",
    "text": "Tags (processing)\n\n\nVenn Diagram\n\n\n\n\nVenn Diagram of words in R or HTML\n\n\n\nExample\n\n\n#&gt; &lt;HTML&gt; &lt;ol&gt;&lt;li&gt;What is the &lt;b&gt;derivative&lt;/b&gt;of $f(x) = 1 + 2cos(3pi x +\n#&gt; 4)$?&lt;/li&gt;&lt;/ol&gt;",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#bringing-the-html-together",
    "href": "slides/21_Translating_R_code.html#bringing-the-html-together",
    "title": "Advanced R Book Club",
    "section": "Bringing the HTML Together",
    "text": "Bringing the HTML Together\nMain Example\n\n\n#&gt; &lt;HTML&gt; &lt;body&gt;&lt;h1 id='pop_quiz'&gt;Pop quiz!&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;What is the\n#&gt; &lt;b&gt;derivative&lt;/b&gt;of $f(x) = 1 + 2cos(3pi x + 4)$?&lt;/li&gt;&lt;ol&gt;&lt;li&gt;$f'(x) =\n#&gt; 6pi*sin(3pi x + 4)$&lt;/li&gt;&lt;li&gt;$f'(x) = -6pi*sin(3pi x +\n#&gt; 4)$&lt;/li&gt;&lt;li&gt;$f'(x) = 24pi*sin(3pi x + 4)$&lt;/li&gt;&lt;li&gt;$f'(x) =\n#&gt; -24pi*sin(3pi x + 4)$&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;img\n#&gt; src='images/translating/calculus_cat.png' width='100' height='100'\n#&gt; /&gt;&lt;/body&gt;\n\n\nCheck\nPop quiz!What is the derivative of $f(x) = 1 + 2cos(3pi x + 4)$?$f'(x) = 6pi*sin(3pi x + 4)$$f'(x) = -6pi*sin(3pi x + 4)$$f'(x) = 24pi*sin(3pi x + 4)$$f'(x) = -24pi*sin(3pi x + 4)$",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#latex",
    "href": "slides/21_Translating_R_code.html#latex",
    "title": "Advanced R Book Club",
    "section": "LaTeX",
    "text": "LaTeX\nto_math",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#known-symbols",
    "href": "slides/21_Translating_R_code.html#known-symbols",
    "title": "Advanced R Book Club",
    "section": "Known Symbols",
    "text": "Known Symbols\n\n\n#&gt; List of 38\n#&gt;  $ zeta      : chr \"\\\\zeta\"\n#&gt;  $ Xi        : chr \"\\\\Xi\"\n#&gt;  $ xi        : chr \"\\\\xi\"\n#&gt;  $ vartheta  : chr \"\\\\vartheta\"\n#&gt;  $ varrho    : chr \"\\\\varrho\"\n#&gt;  $ varphi    : chr \"\\\\varphi\"\n#&gt;  $ varepsilon: chr \"\\\\varepsilon\"\n#&gt;  $ Upsilon   : chr \"\\\\Upsilon\"\n#&gt;  $ upsilon   : chr \"\\\\upsilon\"\n#&gt;  $ Theta     : chr \"\\\\Theta\"\n#&gt;  $ theta     : chr \"\\\\theta\"\n#&gt;  $ tau       : chr \"\\\\tau\"\n#&gt;  $ Sigma     : chr \"\\\\Sigma\"\n#&gt;  $ sigma     : chr \"\\\\sigma\"\n#&gt;  $ rho       : chr \"\\\\rho\"\n#&gt;  $ Psi       : chr \"\\\\Psi\"\n#&gt;  $ psi       : chr \"\\\\psi\"\n#&gt;  $ Pi        : chr \"\\\\Pi\"\n#&gt;  $ pi        : chr \"\\\\pi\"\n#&gt;  $ Phi       : chr \"\\\\Phi\"\n#&gt;  $ phi       : chr \"\\\\phi\"\n#&gt;  $ Omega     : chr \"\\\\Omega\"\n#&gt;  $ omega     : chr \"\\\\omega\"\n#&gt;  $ nu        : chr \"\\\\nu\"\n#&gt;  $ mu        : chr \"\\\\mu\"\n#&gt;  $ Lambda    : chr \"\\\\Lambda\"\n#&gt;  $ lambda    : chr \"\\\\lambda\"\n#&gt;  $ kappa     : chr \"\\\\kappa\"\n#&gt;  $ iota      : chr \"\\\\iota\"\n#&gt;  $ Gamma     : chr \"\\\\Gamma\"\n#&gt;  $ gamma     : chr \"\\\\gamma\"\n#&gt;  $ eta       : chr \"\\\\eta\"\n#&gt;  $ epsilon   : chr \"\\\\epsilon\"\n#&gt;  $ Delta     : chr \"\\\\Delta\"\n#&gt;  $ delta     : chr \"\\\\delta\"\n#&gt;  $ chi       : chr \"\\\\chi\"\n#&gt;  $ beta      : chr \"\\\\beta\"\n#&gt;  $ alpha     : chr \"\\\\alpha\"",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#known-functions",
    "href": "slides/21_Translating_R_code.html#known-functions",
    "title": "Advanced R Book Club",
    "section": "Known Functions",
    "text": "Known Functions\nUnary Operations\n\n\n#&gt; function (e1) \n#&gt; paste0(\"\\\\sqrt{\", e1, \"}\")\n\n\nBinary Operations\n\n\n#&gt; function (e1, e2) \n#&gt; paste0(e1, \"+\", e2)\n\n\n\n\nEven more LaTeX syntax",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#unknown-symbols",
    "href": "slides/21_Translating_R_code.html#unknown-symbols",
    "title": "Advanced R Book Club",
    "section": "Unknown Symbols",
    "text": "Unknown Symbols\n\\[x + y + f(a, b, c, 10)\\]\n\n\n#&gt; [1] \"x\" \"y\" \"a\" \"b\" \"c\"\n\n\n\n\n#&gt; ‚ñà‚îÄexpr \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`+` \n#&gt;   ‚îú‚îÄ‚ñà‚îÄ`+` \n#&gt;   ‚îÇ ‚îú‚îÄx \n#&gt;   ‚îÇ ‚îî‚îÄy \n#&gt;   ‚îî‚îÄ‚ñà‚îÄf \n#&gt;     ‚îú‚îÄa \n#&gt;     ‚îú‚îÄb \n#&gt;     ‚îú‚îÄc \n#&gt;     ‚îî‚îÄ10",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#unknown-functions",
    "href": "slides/21_Translating_R_code.html#unknown-functions",
    "title": "Advanced R Book Club",
    "section": "Unknown Functions",
    "text": "Unknown Functions\n\\[f(g + b, c, d(a))\\]\n\n\n#&gt; [1] \"g\" \"b\" \"c\" \"a\"\n\n\n#&gt; [1] \"f\" \"+\" \"d\"\n\n\n#&gt; ‚ñà‚îÄexpr \n#&gt; ‚îî‚îÄ‚ñà‚îÄf \n#&gt;   ‚îú‚îÄ‚ñà‚îÄ`+` \n#&gt;   ‚îÇ ‚îú‚îÄg \n#&gt;   ‚îÇ ‚îî‚îÄb \n#&gt;   ‚îú‚îÄc \n#&gt;   ‚îî‚îÄ‚ñà‚îÄd \n#&gt;     ‚îî‚îÄa",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#bringing-the-latex-together",
    "href": "slides/21_Translating_R_code.html#bringing-the-latex-together",
    "title": "Advanced R Book Club",
    "section": "Bringing the LaTeX Together",
    "text": "Bringing the LaTeX Together\nCheck\n\n\n#&gt; &lt;LATEX&gt; \\sin(\\pi) + \\mathrm{f}(a)",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#finishing-the-example",
    "href": "slides/21_Translating_R_code.html#finishing-the-example",
    "title": "Advanced R Book Club",
    "section": "Finishing the Example",
    "text": "Finishing the Example\n(TO DO)",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/21_Translating_R_code.html#meeting-videos",
    "href": "slides/21_Translating_R_code.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nCohort 2\n\n\nCohort 3\n(no video)\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:30:16    Arthur Shaw:    https://www.w3schools.com/html/html_entities.asp\n00:32:29    Arthur Shaw:    Beta symbol in HTML: &Beta;\n00:56:55    Arthur Shaw:    https://dbplyr.tidyverse.org/articles/translation-function.html\n00:57:48    Arthur Shaw:    https://dtplyr.tidyverse.org/index.html\n00:58:43    Arthur Shaw:    https://dtplyr.tidyverse.org/articles/translation.html",
    "crumbs": [
      "Metaprogramming",
      "Translating R code"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#aperitif",
    "href": "slides/03_Vectors.html#aperitif",
    "title": "Advanced R Book Club",
    "section": "Aperitif",
    "text": "Aperitif\n\n\n\nPalmer Penguins\n\n\nCounting Penguins\nConsider this code to count the number of Gentoo penguins in the penguins data set. We see that there are 124 Gentoo penguins.\nIn\nOne subtle error can arise in trying out %in% here instead.\n\n\n\nWhere did the penguins go?\n\n\nFix: base R\nFix: dplyr\nMotivation\n\nWhat are the different types of vectors?\nHow does this affect accessing vectors?\n\n\n\nSide Quest: Looking up the %in% operator\n\nIf you want to look up the manual pages for the %in% operator with the ?, use backticks:\nand we find that %in% is a wrapper for the match() function.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#types-of-vectors",
    "href": "slides/03_Vectors.html#types-of-vectors",
    "title": "Advanced R Book Club",
    "section": "Types of Vectors",
    "text": "Types of Vectors\n\nImage Credit: Advanced RTwo main types:\n\nAtomic: Elements all the same type.\nList: Elements are different Types.\n\nClosely related but not technically a vector:\n\nNULL: Null elements. Often length zero.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#atomic-vectors",
    "href": "slides/03_Vectors.html#atomic-vectors",
    "title": "Advanced R Book Club",
    "section": "Atomic Vectors",
    "text": "Atomic Vectors\nTypes of atomic vectors\n\n\n\nImage Credit: Advanced R\n\n\n\nLogical: True/False\nInteger: Numeric (discrete, no decimals)\nDouble: Numeric (continuous, decimals)\nCharacter: String\n\nVectors of Length One\nScalars are vectors that consist of a single value.\nLogicals\nDoubles\nIntegers\nIntegers must be followed by L and cannot have fractional values\n\n\nPop Quiz: Why ‚ÄúL‚Äù for integers?\n\nWickham notes that the use of L dates back to the C programming language and its ‚Äúlong int‚Äù type for memory allocation.\n\nStrings\nStrings can use single or double quotes and special characters are escaped with\n\nLonger\nThere are several ways to make longer vectors:\n1. With single values inside c() for combine.\n\n\n\nImage Credit: Advanced R\n\n\n2. With other vectors\n\n\n#&gt; [1] 1 2 3 4\n\n\n\n\nSide Quest: rlang\n\n{rlang} has vector constructor functions too:\n\nrlang::lgl(...)\nrlang::int(...)\nrlang::dbl(...)\nrlang::chr(...)\n\nThey look to do both more and less than c().\n\nMore:\n\nEnforce type\nSplice lists\nMore types: rlang::bytes(), rlang::cpl(...)\n\nLess:\n\nStricter rules on names\n\n\nNote: currently has questioning lifecycle badge, since these constructors may get moved to vctrs\n\nType and Length\nWe can determine the type of a vector with typeof() and its length with length()\n\n\n\n\n\n\n\n\nTypes of Atomic Vectors1\n\n\nname\nvalue\ntypeof()\nlength()\n\n\n\n\nlgl_var\nTRUE, FALSE\nlogical\n2\n\n\nint_var\n1L, 6L, 10L\ninteger\n3\n\n\ndbl_var\n1, 2.5, 4.5\ndouble\n3\n\n\nchr_var\n'these are', 'some strings'\ncharacter\n2\n\n\n\n1 Source: https://adv-r.hadley.nz/index.html\n\n\n\n\n\n\n\n\n\n\nSide Quest: Penguins\n\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n\nMissing values\nContagion\nFor most computations, an operation over values that includes a missing value yields a missing value (unless you‚Äôre careful)\n\n\n#&gt; [1] NA\n\n\n#&gt; [1] NA\n\n\nExceptions\nInnoculation\nTo search for missing values use is.na()\n\n\nSide Quest: NA Types\n\nEach type has its own NA type\n\nLogical: NA\nInteger: NA_integer\nDouble: NA_double\nCharacter: NA_character\n\nThis may not matter in many contexts.\nBut this does matter for operations where types matter like dplyr::if_else().\n\nTesting\nWhat type of vector is.*() it?\nTest data type:\n\nLogical: is.logical()\nInteger: is.integer()\nDouble: is.double()\nCharacter: is.character()\n\nWhat type of object is it?\nDon‚Äôt test objects with these tools:\n\nis.vector()\nis.atomic()\nis.numeric()\n\nThey don‚Äôt test if you have a vector, atomic vector, or numeric vector; you‚Äôll need to carefully read the documentation to figure out what they actually do (preview: attributes)\n\n\nSide Quest: rlang\n\nInstead, maybe, use {rlang}\n\nrlang::is_vector\nrlang::is_atomic\n\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] FALSE\n\n\nSee more here\n\nCoercion\n\nR follows rules for coercion: character ‚Üí double ‚Üí integer ‚Üí logical\nR can coerce either automatically or explicitly\n\nAutomatic\nTwo contexts for automatic coercion:\n\nCombination\nMathematical\n\nCoercion by Combination:\n\n\n#&gt;  chr [1:2] \"TRUE\" \"TRUE\"\n\n\nCoercion by Mathematical operations:\n\n\n#&gt; [1] 3\n\n\nExplicit\n\n\n\n\n\n\n\n\n\nCoercion of Atomic Vectors1\n\n\nname\nvalue\nas.logical()\nas.integer()\nas.double()\nas.character()\n\n\n\n\nlgl_var\nTRUE, FALSE\nTRUE FALSE\n1 0\n1 0\n'TRUE' 'FALSE'\n\n\nint_var\n1L, 6L, 10L\nTRUE TRUE TRUE\n1 6 10\n1 6 10\n'1' '6' '10'\n\n\ndbl_var\n1, 2.5, 4.5\nTRUE TRUE TRUE\n1 2 4\n1.0 2.5 4.5\n'1' '2.5' '4.5'\n\n\nchr_var\n'these are', 'some strings'\nNA NA\nNA_integer\nNA_double\n'these are', 'some strings'\n\n\n\n1 Source: https://adv-r.hadley.nz/index.html\n\n\n\n\n\n\n\n\nBut note that coercion may fail in one of two ways, or both:\n\nWith warning/error\nNAs\n\n\n\n#&gt; [1]  1  2 NA\n\n\nExercises\n\nHow do you create raw and complex scalars?\n\n\n\nAnswer(s)\n\n\n\nTest your knowledge of the vector coercion rules by predicting the output of the following uses of c():\n\n\n\nAnswer(s)\n\n\n\nWhy is 1 == \"1\" true? Why is -1 &lt; FALSE true? Why is \"one\" &lt; 2 false?\n\n\n\nAnswer(s)\n\nThese comparisons are carried out by operator-functions (==, &lt;), which coerce their arguments to a common type. In the examples above, these types will be character, double and character: 1 will be coerced to ‚Äú1‚Äù, FALSE is represented as 0 and 2 turns into ‚Äú2‚Äù (and numbers precede letters in lexicographic order (may depend on locale)).\n\n\nWhy is the default missing value, NA, a logical vector? What‚Äôs special about logical vectors?\n\n\n\nAnswer(s)\n\nThe presence of missing values shouldn‚Äôt affect the type of an object. Recall that there is a type-hierarchy for coercion from character ‚Üí double ‚Üí integer ‚Üí logical. When combining NAs with other atomic types, the NAs will be coerced to integer (NA_integer_), double (NA_real_) or character (NA_character_) and not the other way round. If NA were a character and added to a set of other values all of these would be coerced to character as well.\n\n\nPrecisely what do is.atomic(), is.numeric(), and is.vector() test for?\n\n\n\nAnswer(s)\n\nThe documentation states that:\n\nis.atomic() tests if an object is an atomic vector (as defined in Advanced R) or is NULL (!).\nis.numeric() tests if an object has type integer or double and is not of class factor, Date, POSIXt or difftime.\nis.vector() tests if an object is a vector (as defined in Advanced R) or an expression and has no attributes, apart from names.\n\nAtomic vectors are defined in Advanced R as objects of type logical, integer, double, complex, character or raw. Vectors are defined as atomic vectors or lists.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#attributes",
    "href": "slides/03_Vectors.html#attributes",
    "title": "Advanced R Book Club",
    "section": "Attributes",
    "text": "Attributes\nAttributes are name-value pairs that attach metadata to an object(vector).\n\nName-value pairs: attributes have a name and a value\nMetadata: not data itself, but data about the data\n\nHow?\nGetting and Setting\nThree functions:\n\nretrieve and modify single attributes with attr()\nretrieve en masse with attributes()\nset en masse with structure()\n\nSingle attribute\nUse attr()\n\n\n#&gt; [1] \"some attribute\"\n\n\nMultiple attributes\nTo set multiple attributes, use structure() To get multiple attributes, use attributes()\n\n\n\nImage Credit: Advanced R\n\n\nWhy\nThree particularly important attributes:\n\nnames - a character vector giving each element a name\ndimension - (or dim) turns vectors into matrices and arrays\nclass - powers the S3 object system (we‚Äôll learn more about this in chapter 13)\n\nMost attributes are lost by most operations. Only two attributes are routinely preserved: names and dimension.\nNames\nThree Four ways to name:\n\n\n#&gt; A B C \n#&gt; 1 2 3\n\n\n#&gt; a b c \n#&gt; 1 2 3\n\n\n#&gt; a b c \n#&gt; 1 2 3\n\n\n\n\n\nproper diagram\n\n\n\n\n#&gt; a b c \n#&gt; 1 2 3\n\n\n\n\n\nsimplified diagram\n\n\n\nYou can remove names from a vector by using x &lt;- unname(x) or names(x) &lt;- NULL.\nThematically but not directly related: labelled class vectors with haven::labelled()\n\nDimensions\nCreate matrices and arrays with matrix() and array(), or by using the assignment form of dim():\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    7    9   11\n#&gt; [2,]    8   10   12\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   13   15   17\n#&gt; [2,]   14   16   18\n#&gt; \n#&gt; , , 4\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   19   21   23\n#&gt; [2,]   20   22   24\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    7    9   11\n#&gt; [2,]    8   10   12\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   13   15   17\n#&gt; [2,]   14   16   18\n#&gt; \n#&gt; , , 4\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]   19   21   23\n#&gt; [2,]   20   22   24\n\n\nFunctions for working with vectors, matrices and arrays:\n\n\n\nVector\nMatrix\nArray\n\n\n\n\nnames()\nrownames(), colnames()\ndimnames()\n\n\nlength()\nnrow(), ncol()\ndim()\n\n\nc()\nrbind(), cbind()\nabind::abind()\n\n\n‚Äî\nt()\naperm()\n\n\nis.null(dim(x))\nis.matrix()\nis.array()\n\n\n\n\nCaution: A vector without a dim attribute set is often thought of as 1-dimensional, but actually has NULL dimensions.\nOne dimension?\n\nExercises\n\nHow is setNames() implemented? How is unname() implemented? Read the source code.\n\n\n\nAnswer(s)\n\nsetNames() is implemented as:\nBecause the data argument comes first, setNames() also works well with the magrittr-pipe operator. When no first argument is given, the result is a named vector (this is rather untypical as required arguments usually come first):\nunname() is implemented in the following way:\nunname() removes existing names (or dimnames) by setting them to NULL.\n\n\nWhat does dim() return when applied to a 1-dimensional vector? When might you use NROW() or NCOL()?\n\n\n\nAnswer(s)\n\n\ndim() will return NULL when applied to a 1d vector.\n\nOne may want to use NROW() or NCOL() to handle atomic vectors, lists and NULL values in the same way as one column matrices or data frames. For these objects nrow() and ncol() return NULL:\n\n\nHow would you describe the following three objects? What makes them different from 1:5?\n\n\n\nAnswer(s)\n\n\n\nAn early draft used this code to illustrate structure():\n\nBut when you print that object you don‚Äôt see the comment attribute. Why? Is the attribute missing, or is there something else special about it?\n\n\nAnswer(s)\n\nThe documentation states (see ?comment):\n\nContrary to other attributes, the comment is not printed (by print or print.default).\n\nAlso, from ?attributes:\n\nNote that some attributes (namely class, comment, dim, dimnames, names, row.names and tsp) are treated specially and have restrictions on the values which can be set.\n\nWe can retrieve comment attributes by calling them explicitly:",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#class---s3-atomic-vectors",
    "href": "slides/03_Vectors.html#class---s3-atomic-vectors",
    "title": "Advanced R Book Club",
    "section": "Class - S3 atomic vectors",
    "text": "Class - S3 atomic vectors\n\nCredit: Advanced R by Hadley Wickham\nHaving a class attribute turns an object into an S3 object.\nWhat makes S3 atomic vectors different?\n\nbehave differently from a regular vector when passed to a generic function\noften store additional information in other attributes\n\nFour important S3 vectors used in base R:\n\nFactors (categorical data)\nDates\nDate-times (POSIXct)\nDurations (difftime)\n\nFactors\nA factor is a vector used to store categorical data that can contain only predefined values.\nFactors are integer vectors with:\n\nClass: ‚Äúfactor‚Äù\nAttributes: ‚Äúlevels‚Äù, or the set of allowed values\n\n\n\n#&gt; colors\n#&gt;  blue green   red \n#&gt;     1     2     3\n\n\n#&gt; a_factor\n#&gt;    red   blue  green yellow \n#&gt;      3      1      2      0\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; $levels\n#&gt; [1] \"red\"    \"blue\"   \"green\"  \"yellow\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"factor\"\n\n\nCustom Order\nFactors can be ordered. This can be useful for models or visualizations where order matters.\n\n\n#&gt; [1] high med  low  med  high low  med  high\n#&gt; Levels: low &lt; med &lt; high\n\n\n#&gt; values\n#&gt; high  low  med \n#&gt;    3    2    3\n\n\n#&gt; ordered_factor\n#&gt;  low  med high \n#&gt;    2    3    3\n\n\nDates\nDates are:\n\nDouble vectors\nWith class ‚ÄúDate‚Äù\nNo other attributes\n\n\n\n#&gt; [1] \"double\"\n\n\n#&gt; $class\n#&gt; [1] \"Date\"\n\n\nThe double component represents the number of days since since the Unix epoch 1970-01-01\n\n\n#&gt; [1] 31\n\n\nDate-times\nThere are 2 Date-time representations in base R:\n\nPOSIXct, where ‚Äúct‚Äù denotes calendar time\nPOSIXlt, where ‚Äúlt‚Äù designates local time\n\n\nWe‚Äôll focus on POSIXct because:\n\nSimplest\nBuilt on an atomic (double) vector\nMost appropriate for use in a data frame\n\nLet‚Äôs now build and deconstruct a Date-time\n\n\n#&gt; [1] \"2025-08-04 06:20:51 EDT\"\n\n\n#&gt; [1] \"double\"\n\n\n#&gt; $class\n#&gt; [1] \"POSIXct\" \"POSIXt\" \n#&gt; \n#&gt; $tzone\n#&gt; [1] \"America/New_York\"\n\n\n#&gt; [1] \"2025-08-04 12:20:51 CEST\"\n\n\n\n\n#&gt; [1] 1708623296\n#&gt; attr(,\"tzone\")\n#&gt; [1] \"EST\"\n\n\nDurations\nDurations represent the amount of time between pairs of dates or date-times.\n\nDouble vectors\nClass: ‚Äúdifftime‚Äù\nAttributes: ‚Äúunits‚Äù, or the unit of duration (e.g., weeks, hours, minutes, seconds, etc.)\n\n\n\n#&gt; Time difference of 1 mins\n\n\n#&gt; [1] \"double\"\n\n\n#&gt; $class\n#&gt; [1] \"difftime\"\n#&gt; \n#&gt; $units\n#&gt; [1] \"mins\"\n\n\n\n\n#&gt; Time difference of 20273 days\n\n\nSee also:\n\nlubridate::make_difftime()\nclock::date_time_build()\n\nExercises\n\nWhat sort of object does table() return? What is its type? What attributes does it have? How does the dimensionality change as you tabulate more variables?\n\n\n\nAnswer(s)\n\ntable() returns a contingency table of its input variables. It is implemented as an integer vector with class table and dimensions (which makes it act like an array). Its attributes are dim (dimensions) and dimnames (one name for each input column). The dimensions correspond to the number of unique values (factor levels) in each input variable.\n\n\nWhat happens to a factor when you modify its levels?\n\n\n\nAnswer(s)\n\nThe underlying integer values stay the same, but the levels are changed, making it look like the data has changed.\n\n\nWhat does this code do? How do f2 and f3 differ from f1?\n\n\n\nAnswer(s)\n\nFor f2 and f3 either the order of the factor elements or its levels are being reversed. For f1 both transformations are occurring.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#lists",
    "href": "slides/03_Vectors.html#lists",
    "title": "Advanced R Book Club",
    "section": "Lists",
    "text": "Lists\n\nsometimes called a generic vector or recursive vector\nRecall (section 2.3.3): each element is really a reference to another object\nan be composed of elements of different types (as opposed to atomic vectors which must be of only one type)\n\nConstructing\nSimple lists:\n\n\n#&gt; [[1]]\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; [[2]]\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 1.2 2.3 3.4\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"primo\"   \"secundo\" \"tercio\"\n\n\n#&gt; [1] \"list\"\n\n\n#&gt; List of 4\n#&gt;  $ : logi [1:2] TRUE FALSE\n#&gt;  $ : int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\n#&gt;  $ : num [1:3] 1.2 2.3 3.4\n#&gt;  $ : chr [1:3] \"primo\" \"secundo\" \"tercio\"\n\n\n#&gt; [[1]]\n#&gt; [1]  TRUE FALSE\n\n\n#&gt; [[1]]\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\n#&gt; [[1]]\n#&gt; [1] 1.2 2.3 3.4\n\n\n#&gt; [[1]]\n#&gt; [1] \"primo\"   \"secundo\" \"tercio\"\n\n\n#&gt; [1] FALSE\n\n\n#&gt; [1] 8\n\n\n#&gt; [1] 2.3\n\n\n#&gt; [1] \"tercio\"\n\n\nEven Simpler List\n\n\n#&gt; [[1]]\n#&gt; [1] TRUE\n\n\n#&gt; [[1]]\n#&gt; [1] 3\n\n\n#&gt; [[1]]\n#&gt; [1] 2.3\n\n\n#&gt; [[1]]\n#&gt; [1] \"primo\"\n\n\nNested lists:\n\n\n#&gt; List of 1\n#&gt;  $ :List of 1\n#&gt;   ..$ :List of 1\n#&gt;   .. ..$ :List of 1\n#&gt;   .. .. ..$ : num 1\n\n\nLike JSON.\nCombined lists\n\n\n#&gt; List of 2\n#&gt;  $ :List of 2\n#&gt;   ..$ : num 1\n#&gt;   ..$ : num 2\n#&gt;  $ :List of 2\n#&gt;   ..$ : num 3\n#&gt;   ..$ : num 4\n\n\n#&gt; List of 4\n#&gt;  $ : num 1\n#&gt;  $ : num 2\n#&gt;  $ : num 3\n#&gt;  $ : num 4\n\n\n#&gt; List of 4\n#&gt;  $ : num 1\n#&gt;  $ : num 2\n#&gt;  $ : logi TRUE\n#&gt;  $ : logi FALSE\n\n\nTesting\nCheck that is a list:\n\nis.list()\n`rlang::is_list()``\n\nThe two do the same, except that the latter can check for the number of elements\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\nCoercion\nUse as.list()\n\n\n#&gt; [[1]]\n#&gt; [1] 1 2 3\n\n\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 2\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 3\n\n\nMatrices and arrays\nAlthough not often used, the dimension attribute can be added to create list-matrices or list-arrays.\n\n\n#&gt;      [,1]      [,2]\n#&gt; [1,] integer,3 TRUE\n#&gt; [2,] \"a\"       1\n\n\n#&gt; [1] 1 2 3\n\n\nExercises\n\nList all the ways that a list differs from an atomic vector.\n\n\n\nAnswer(s)\n\n\nAtomic vectors are always homogeneous (all elements must be of the same type). Lists may be heterogeneous (the elements can be of different types) as described in the introduction of the vectors chapter.\nAtomic vectors point to one address in memory, while lists contain a separate reference for each element. (This was described in the list sections of the vectors and the names and values chapters.)\n\n\nSubsetting with out-of-bounds and NA values leads to different output. For example, [ returns NA for atomics and NULL for lists. (This is described in more detail within the subsetting chapter.)\n\n\n\nWhy do you need to use unlist() to convert a list to an atomic vector? Why doesn‚Äôt as.vector() work?\n\n\n\nAnswer(s)\n\nA list is already a vector, though not an atomic one! Note that as.vector() and is.vector() use different definitions of ‚Äúvector!‚Äù\n\n\nCompare and contrast c() and unlist() when combining a date and date-time into a single vector.\n\n\n\nAnswer(s)\n\nDate and date-time objects are both built upon doubles. While dates store the number of days since the reference date 1970-01-01 (also known as ‚Äúthe Epoch‚Äù) in days, date-time-objects (POSIXct) store the time difference to this date in seconds.\nAs the c() generic only dispatches on its first argument, combining date and date-time objects via c() could lead to surprising results in older R versions (pre R 4.0.0):\nIn the first statement above c.Date() is executed, which incorrectly treats the underlying double of dttm_ct (3600) as days instead of seconds. Conversely, when c.POSIXct() is called on a date, one day is counted as one second only.\nWe can highlight these mechanics by the following code:\nAs of R 4.0.0 these issues have been resolved and both methods now convert their input first into POSIXct and Date, respectively.\nHowever, as c() strips the time zone (and other attributes) of POSIXct objects, some caution is still recommended.\nA package that deals with these kinds of problems in more depth and provides a structural solution for them is the {vctrs} package9 which is also used throughout the tidyverse.10\nLet‚Äôs look at unlist(), which operates on list input.\nWe see again that dates and date-times are internally stored as doubles. Unfortunately, this is all we are left with, when unlist strips the attributes of the list.\nTo summarise: c() coerces types and strips time zones. Errors may have occurred in older R versions because of inappropriate method dispatch/immature methods. unlist() strips attributes.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#data-frames-and-tibbles",
    "href": "slides/03_Vectors.html#data-frames-and-tibbles",
    "title": "Advanced R Book Club",
    "section": "Data frames and tibbles",
    "text": "Data frames and tibbles\n\nCredit: Advanced R by Hadley Wickham\nData frame\nA data frame is a:\n\nNamed list of vectors (i.e., column names)\nAttributes:\n\n(column) names\nrow.names\nClass: ‚Äúdata frame‚Äù\n\n\n\n\n#&gt;   col1  col2\n#&gt; 1    1    un\n#&gt; 2    2  deux\n#&gt; 3    3 trois\n\n\n#&gt; [1] \"list\"\n\n\n#&gt; $names\n#&gt; [1] \"col1\" \"col2\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"data.frame\"\n#&gt; \n#&gt; $row.names\n#&gt; [1] 1 2 3\n\n\n\n\n#&gt; [1] \"1\" \"2\" \"3\"\n\n\n#&gt; [1] \"col1\" \"col2\"\n\n\n#&gt; [1] \"col1\" \"col2\"\n\n\n#&gt; [1] 3\n\n\n#&gt; [1] 2\n\n\n#&gt; [1] 2\n\n\nUnlike other lists, the length of each vector must be the same (i.e.¬†as many vector elements as rows in the data frame).\nTibble\nCreated to relieve some of the frustrations and pain points created by data frames, tibbles are data frames that are:\n\nLazy (do less)\nSurly (complain more)\n\nLazy\nTibbles do not:\n\nCoerce strings\nTransform non-syntactic names\nRecycle vectors of length greater than 1\n\nCoerce strings\n\n\n#&gt;  Factor w/ 4 levels \"bro\",\"don't\",..: 2 3 4 1\n\n\n#&gt;  chr [1:4] \"don't\" \"factor\" \"me\" \"bro\"\n\n\nTransform non-syntactic names\n\n\n#&gt; [1] \"X1\"\n\n\n#&gt; [1] \"1\"\n\n\nRecycle vectors of length greater than 1\n\n\n#&gt; Error in `tibble::tibble()`:\n#&gt; ! Tibble columns must have compatible sizes.\n#&gt; ‚Ä¢ Size 4: Existing data.\n#&gt; ‚Ä¢ Size 2: Column `col2`.\n#&gt; ‚Ñπ Only values of size one are recycled.\n\n\nSurly\nTibbles do only what they‚Äôre asked and complain if what they‚Äôre asked doesn‚Äôt make sense:\n\nSubsetting always yields a tibble\nComplains if cannot find column\n\nSubsetting always yields a tibble\n\n\n#&gt;  num [1:4] 1 2 3 4\n\n\n#&gt; tibble [4 √ó 1] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ col1: num [1:4] 1 2 3 4\n\n\n#&gt;  num [1:4] 1 2 3 4\n\n\n#&gt;  num [1:4] 1 2 3 4\n\n\nComplains if cannot find column\n\n\n#&gt; [1] \"col1\"\n\n\n#&gt; [1] 1 2 3 4\n\n\n#&gt; [1] \"col1\"\n\n\n#&gt; Warning: Unknown or uninitialised column: `col`.\n\n\n#&gt; NULL\n\n\nOne more difference\ntibble() allows you to refer to variables created during construction\n\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;       x     y\n#&gt;   &lt;int&gt; &lt;dbl&gt;\n#&gt; 1     1     2\n#&gt; 2     2     4\n#&gt; 3     3     6\n\n\n\n\nSide Quest: Row Names\n\n\ncharacter vector containing only unique values\nget and set with rownames()\ncan use them to subset rows\n\n\n\n#&gt;       age  hair\n#&gt; Bob    35 blond\n#&gt; Susan  27 brown\n#&gt; Sam    18 black\n\n\n#&gt; [1] \"Bob\"   \"Susan\" \"Sam\"\n\n\n#&gt;     age  hair\n#&gt; Bob  35 blond\n\n\n#&gt; [1] \"Susan\" \"Bob\"   \"Sam\"\n\n\n#&gt;     age  hair\n#&gt; Bob  27 brown\n\n\nThere are three reasons why row names are undesirable:\n\nMetadata is data, so storing it in a different way to the rest of the data is fundamentally a bad idea.\nRow names are a poor abstraction for labelling rows because they only work when a row can be identified by a single string. This fails in many cases.\nRow names must be unique, so any duplication of rows (e.g.¬†from bootstrapping) will create new row names.\n\n\nPrinting\nData frames and tibbles print differently\n\n\n#&gt;       age  hair\n#&gt; Susan  35 blond\n#&gt; Bob    27 brown\n#&gt; Sam    18 black\n\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;     age hair \n#&gt;   &lt;dbl&gt; &lt;chr&gt;\n#&gt; 1    35 blond\n#&gt; 2    27 brown\n#&gt; 3    18 black\n\n\nSubsetting\nTwo undesirable subsetting behaviours:\n\nWhen you subset columns with df[, vars], you will get a vector if vars selects one variable, otherwise you‚Äôll get a data frame, unless you always remember to use df[, vars, drop = FALSE].\nWhen you attempt to extract a single column with df$x and there is no column x, a data frame will instead select any variable that starts with x. If no variable starts with x, df$x will return NULL.\n\nTibbles tweak these behaviours so that a [ always returns a tibble, and a $ doesn‚Äôt do partial matching and warns if it can‚Äôt find a variable (this is what makes tibbles surly).\nTesting\nWhether data frame: is.data.frame(). Note: both data frame and tibble are data frames.\nWhether tibble: tibble::is_tibble. Note: only tibbles are tibbles. Vanilla data frames are not.\nCoercion\n\nTo data frame: as.data.frame()\nTo tibble: tibble::as_tibble()\n\nList Columns\nList-columns are allowed in data frames but you have to do a little extra work by either adding the list-column after creation or wrapping the list in I()\n\n\n#&gt;   x          y\n#&gt; 1 1       1, 2\n#&gt; 2 2    1, 2, 3\n#&gt; 3 3 1, 2, 3, 4\n\n\n#&gt;   x          y\n#&gt; 1 1       1, 2\n#&gt; 2 2    1, 2, 3\n#&gt; 3 3 1, 2, 3, 4\n\n\nMatrix and data frame columns\n\nAs long as the number of rows matches the data frame, it‚Äôs also possible to have a matrix or data frame as a column of a data frame.\nsame as list-columns, must either addi the list-column after creation or wrapping the list in I()\n\n\n\n#&gt; 'data.frame':    3 obs. of  3 variables:\n#&gt;  $ x: num  10 20 30\n#&gt;  $ y: 'AsIs' int [1:3, 1:3] 1 2 3 4 5 6 7 8 9\n#&gt;  $ z:'data.frame':   3 obs. of  2 variables:\n#&gt;   ..$ a: int  3 2 1\n#&gt;   ..$ b: chr  \"a\" \"b\" \"c\"\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n\n\n#&gt;   a b\n#&gt; 1 3 a\n#&gt; 2 2 b\n#&gt; 3 1 c\n\n\nExercises\n\nCan you have a data frame with zero rows? What about zero columns?\n\n\n\nAnswer(s)\n\nYes, you can create these data frames easily; either during creation or via subsetting. Even both dimensions can be zero. Create a 0-row, 0-column, or an empty data frame directly:\nCreate similar data frames via subsetting the respective dimension with either 0, NULL, FALSE or a valid 0-length atomic (logical(0), character(0), integer(0), double(0)). Negative integer sequences would also work. The following example uses a zero:\n\n\nWhat happens if you attempt to set rownames that are not unique?\n\n\n\nAnswer(s)\n\nMatrices can have duplicated row names, so this does not cause problems.\nData frames, however, require unique rownames and you get different results depending on how you attempt to set them. If you set them directly or via row.names(), you get an error:\nIf you use subsetting, [ automatically deduplicates:\n\n\nIf df is a data frame, what can you say about t(df), and t(t(df))? Perform some experiments, making sure to try different column types.\n\n\n\nAnswer(s)\n\nBoth of t(df) and t(t(df)) will return matrices:\nThe dimensions will respect the typical transposition rules:\nBecause the output is a matrix, every column is coerced to the same type. (It is implemented within t.data.frame() via as.matrix() which is described below).\n\n\nWhat does as.matrix() do when applied to a data frame with columns of different types? How does it differ from data.matrix()?\n\n\n\nAnswer(s)\n\nThe type of the result of as.matrix depends on the types of the input columns (see ?as.matrix):\n\nThe method for data frames will return a character matrix if there is only atomic columns and any non-(numeric/logical/complex) column, applying as.vector to factors and format to other non-character columns. Otherwise the usual coercion hierarchy (logical &lt; integer &lt; double &lt; complex) will be used, e.g.¬†all-logical data frames will be coerced to a logical matrix, mixed logical-integer will give an integer matrix, etc.\n\nOn the other hand, data.matrix will always return a numeric matrix (see ?data.matrix()).\n\nReturn the matrix obtained by converting all the variables in a data frame to numeric mode and then binding them together as the columns of a matrix. Factors and ordered factors are replaced by their internal codes. [‚Ä¶] Character columns are first converted to factors and then to integers.\n\nWe can illustrate and compare the mechanics of these functions using a concrete example. as.matrix() makes it possible to retrieve most of the original information from the data frame but leaves us with characters. To retrieve all information from data.matrix()‚Äôs output, we would need a lookup table for each column.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#null",
    "href": "slides/03_Vectors.html#null",
    "title": "Advanced R Book Club",
    "section": "NULL",
    "text": "NULL\nSpecial type of object that:\n\nLength 0\nCannot have attributes\n\n\n\n#&gt; Error in attr(x, \"y\") &lt;- 1: attempt to set an attribute on NULL\n\n\n\n\n#&gt; [1] TRUE",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#digestif",
    "href": "slides/03_Vectors.html#digestif",
    "title": "Advanced R Book Club",
    "section": "Digestif",
    "text": "Digestif\nLet is use some of this chapter‚Äôs skills on the penguins data.\nAttributes\n\n\n#&gt; tibble [344 √ó 17] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ...\n#&gt;  $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ...\n#&gt;  $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" ...\n#&gt;  $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ...\n#&gt;  $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n#&gt;  $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" ...\n#&gt;  $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ...\n#&gt;  $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n#&gt;  $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ...\n#&gt;  $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n#&gt;  $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n#&gt;  $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n#&gt;  $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ...\n#&gt;  $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ...\n#&gt;  $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ...\n#&gt;  $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ...\n#&gt;  $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA \"Adult not sampled.\" ...\n#&gt;  - attr(*, \"spec\")=List of 3\n#&gt;   ..$ cols   :List of 17\n#&gt;   .. ..$ studyName          : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Sample Number      : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Species            : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Region             : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Island             : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Stage              : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Individual ID      : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Clutch Completion  : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Date Egg           :List of 1\n#&gt;   .. .. ..$ format: chr \"\"\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_date\" \"collector\"\n#&gt;   .. ..$ Culmen Length (mm) : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Culmen Depth (mm)  : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Flipper Length (mm): list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Body Mass (g)      : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Sex                : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   .. ..$ Delta 15 N (o/oo)  : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Delta 13 C (o/oo)  : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n#&gt;   .. ..$ Comments           : list()\n#&gt;   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n#&gt;   ..$ default: list()\n#&gt;   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\"\n#&gt;   ..$ skip   : num 1\n#&gt;   ..- attr(*, \"class\")= chr \"col_spec\"\n\n\n\n\n#&gt; tibble [344 √ó 17] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ...\n#&gt;  $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ...\n#&gt;  $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" ...\n#&gt;  $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ...\n#&gt;  $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n#&gt;  $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" ...\n#&gt;  $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ...\n#&gt;  $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n#&gt;  $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ...\n#&gt;  $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n#&gt;  $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n#&gt;  $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n#&gt;  $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ...\n#&gt;  $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ...\n#&gt;  $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ...\n#&gt;  $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ...\n#&gt;  $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA \"Adult not sampled.\" ...\n\n\nData Frames vs Tibbles\nPrinting\n\nTip: print out these results in RStudio under different editor themes\n\n\n\n#&gt;   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#&gt; 1  Adelie Torgersen           39.1          18.7               181        3750\n#&gt; 2  Adelie Torgersen           39.5          17.4               186        3800\n#&gt; 3  Adelie Torgersen           40.3          18.0               195        3250\n#&gt; 4  Adelie Torgersen             NA            NA                NA          NA\n#&gt; 5  Adelie Torgersen           36.7          19.3               193        3450\n#&gt; 6  Adelie Torgersen           39.3          20.6               190        3650\n#&gt;      sex year\n#&gt; 1   male 2007\n#&gt; 2 female 2007\n#&gt; 3 female 2007\n#&gt; 4   &lt;NA&gt; 2007\n#&gt; 5 female 2007\n#&gt; 6   male 2007\n\n\n\n\n#&gt; # A tibble: 344 √ó 8\n#&gt;    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#&gt;    &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n#&gt;  1 Adelie  Torgersen           39.1          18.7               181        3750\n#&gt;  2 Adelie  Torgersen           39.5          17.4               186        3800\n#&gt;  3 Adelie  Torgersen           40.3          18                 195        3250\n#&gt;  4 Adelie  Torgersen           NA            NA                  NA          NA\n#&gt;  5 Adelie  Torgersen           36.7          19.3               193        3450\n#&gt;  6 Adelie  Torgersen           39.3          20.6               190        3650\n#&gt;  7 Adelie  Torgersen           38.9          17.8               181        3625\n#&gt;  8 Adelie  Torgersen           39.2          19.6               195        4675\n#&gt;  9 Adelie  Torgersen           34.1          18.1               193        3475\n#&gt; 10 Adelie  Torgersen           42            20.2               190        4250\n#&gt; # ‚Ñπ 334 more rows\n#&gt; # ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nAtomic Vectors\n\n\ntypeof() and class()\n\n\n\n#&gt; [1] \"list\"\n\n\n#&gt; [1] \"data.frame\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; [1] \"list\"\n\n\n#&gt; [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"factor\"\n\n\n\nColumn Names\n\n\n#&gt; [1] \"species\"           \"island\"            \"bill_length_mm\"   \n#&gt; [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n#&gt; [7] \"sex\"               \"year\"\n\n\n\n\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\n\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\nWhat if we only invoke a partial name of a column of a tibble?\n\n\n\n#&gt; NULL\n\n\n\ntibbles are surly!\nWhat if we only invoke a partial name of a column of a data frame?\n\n\n\n#&gt; [1] 2007 2007 2007 2007 2007 2007\n\n\n\nIs this evaluation in alphabetical order or column order?\n\n\n\n#&gt; NULL\n\n\n\n\n#&gt; NULL",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#chapter-quiz",
    "href": "slides/03_Vectors.html#chapter-quiz",
    "title": "Advanced R Book Club",
    "section": "Chapter Quiz",
    "text": "Chapter Quiz\n\nWhat are the four common types of atomic vectors? What are the two rare types?\n\n\n\nAnswer(s)\n\nThe four common types of atomic vector are logical, integer, double and character. The two rarer types are complex and raw.\n\n\nWhat are attributes? How do you get them and set them?\n\n\n\nAnswer(s)\n\nAttributes allow you to associate arbitrary additional metadata to any object. You can get and set individual attributes with attr(x, \"y\") and attr(x, \"y\") &lt;- value; or you can get and set all attributes at once with attributes().\n\n\nHow is a list different from an atomic vector? How is a matrix different from a data frame?\n\n\n\nAnswer(s)\n\nThe elements of a list can be any type (even a list); the elements of an atomic vector are all of the same type. Similarly, every element of a matrix must be the same type; in a data frame, different columns can have different types.\n\n\nCan you have a list that is a matrix? Can a data frame have a column that is a matrix?\n\n\n\nAnswer(s)\n\nYou can make a list-array by assigning dimensions to a list. You can make a matrix a column of a data frame with df$x &lt;- matrix(), or by using I() when creating a new data frame data.frame(x = I(matrix())).\n\n\nHow do tibbles behave differently from data frames?\n\n\n\nAnswer(s)\n\nTibbles have an enhanced print method, never coerce strings to factors, and provide stricter subsetting methods.",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/03_Vectors.html#meeting-videos",
    "href": "slides/03_Vectors.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:10:18    Oluwafemi Oyedele:  Hi, good evening\n00:23:31    Federica Gazzelloni:    Hi Kiante!\n00:24:21    Federica Gazzelloni:    Thanks Arthur\n00:25:46    Trevin: Welcome Matt!\n00:26:02    Matt Dupree:    hello! thank you!\n00:30:34    Federica Gazzelloni:    Hello Matt!\n00:30:46    Matt Dupree:    hello!\n00:38:24    Ryan Metcalf:   `rlang::cpl()` = ‚Äúcomplex‚Äù. For example `0+1i`\n00:55:37    Trevin: &gt; two &lt;- c(1,2,3)\n&gt; names(two) &lt;- c(\"one\", \"two\")\n&gt; two\n one  two &lt;NA&gt; \n   1    2    3\n00:57:25    Ryan Metcalf:   Excellent Trevin. You beat me to the output! Assuming we didn't supply the string, `NA` is entered instead.\n01:08:50    Ryan Metcalf:   Without further research, this is the \"Unix Epoch‚Äù. However, varying operating systems use different Epochs.\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:54:07    Ron:    https://www.tidyverse.org/blog/2021/03/clock-0-1-0/\n01:14:39    Robert Hilly:   https://www.amazon.com/Effective-Pandas-Patterns-Manipulation-Treading/dp/B09MYXXSFM",
    "crumbs": [
      "Foundations",
      "Vectors"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#code-is-data",
    "href": "slides/17_Big_picture.html#code-is-data",
    "title": "Advanced R Book Club",
    "section": "Code is data",
    "text": "Code is data\n\nexpression - Captured code (call, symbol, constant, or pairlist)\nUse rlang::expr()1 to capture code directly\n\n\n\n#&gt; mean(x, na.rm = TRUE)\n\n\n\nUse rlang::enexpr() to capture code indirectly\n\n\n\n#&gt; a + b + c\n\n\n\n‚ÄòCaptured‚Äô code can be modified (like a list)!\n\nFirst element is the function, next elements are the arguments\n\n\n\n\n#&gt; [1] \"\"  \"x\" \"y\"\n\n\n#&gt; f(x = 1, y = 2)\n\n\n#&gt; f(x = 1, y = 2, z = 3)\n\n\n#&gt; f(y = 2)\n\n\n\nMore on this next week!\n\nEquivalent to base::bquote()",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#code-is-a-tree",
    "href": "slides/17_Big_picture.html#code-is-a-tree",
    "title": "Advanced R Book Club",
    "section": "Code is a tree",
    "text": "Code is a tree\n\nAbstract syntax tree (AST) - Almost every language represents code as a tree\nUse lobstr::ast() to inspect these code trees\n\n\n\n#&gt; ‚ñà‚îÄf1 \n#&gt; ‚îú‚îÄ‚ñà‚îÄf2 \n#&gt; ‚îÇ ‚îú‚îÄa \n#&gt; ‚îÇ ‚îî‚îÄb \n#&gt; ‚îî‚îÄ‚ñà‚îÄf3 \n#&gt;   ‚îî‚îÄ1\n\n\n#&gt; ‚ñà‚îÄ`+` \n#&gt; ‚îú‚îÄ1 \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`*` \n#&gt;   ‚îú‚îÄ2 \n#&gt;   ‚îî‚îÄ3",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#code-can-generate-code",
    "href": "slides/17_Big_picture.html#code-can-generate-code",
    "title": "Advanced R Book Club",
    "section": "Code can generate code",
    "text": "Code can generate code\n\nrlang::call2() creates function call\n\n\n\n#&gt; f(1, 2, 3)\n\n\n\nGoing backwards from the tree, can use functions to create calls\n\n\n\n#&gt; f1(f2(\"a\", \"b\"), f3(1))\n\n\n#&gt; 1 + 2 * 3\n\n\n\n!! bang-bang - unquote operator\n\ninserts previously defined expressions into the current one\n\n\n\n\n#&gt; xx/yy\n\n\n#&gt; (x + x)/(y + y)\n\n\n\n\n#&gt; sd(x)/mean(x)\n\n\n#&gt; sd(x + y)/mean(x + y)\n\n\n\nAvoid paste() for building code\n\nProblems with non-syntactic names and precedence among expressions\n\n\n\n‚ÄúYou might think this is an esoteric concern, but not worrying about it when generating SQL code in web applications led to SQL injection attacks that have collectively cost billions of dollars.‚Äù",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#evaluation-runs-code",
    "href": "slides/17_Big_picture.html#evaluation-runs-code",
    "title": "Advanced R Book Club",
    "section": "Evaluation runs code",
    "text": "Evaluation runs code\n\nevaluate - run/execute an expression\nneed both expression and environment\neval() uses current environment if not set\nmanual evaluation means you can tweak the environment!\n\n\n\n#&gt; [1] 11\n\n\n#&gt; [1] 102",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#customizing-evaluations-with-functions",
    "href": "slides/17_Big_picture.html#customizing-evaluations-with-functions",
    "title": "Advanced R Book Club",
    "section": "Customizing evaluations with functions",
    "text": "Customizing evaluations with functions\n\nCan also bind names to functions in supplied environment\nAllows overriding function behaviour\nThis is how dplyr generates SQL for working with databases\n\nFor example‚Ä¶\n\n\n#&gt; [1] \"Hello cohort 9\"\n\n\n#&gt; [1] \"dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---dslc is awesome---\"",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#customizing-evaluation-with-data",
    "href": "slides/17_Big_picture.html#customizing-evaluation-with-data",
    "title": "Advanced R Book Club",
    "section": "Customizing evaluation with data",
    "text": "Customizing evaluation with data\n\nLook for variables inside data frame\nData mask - typically a data frame\nuse rlang::eval_tidy() rather than eval()\n\n\n\n#&gt; [1] 5 4 6 9 6\n\n\nCatch user input with enexpr()‚Ä¶\n\n\n#&gt; [1] 5 4 6 9 6\n\n\nBut there‚Äôs a bug!\n\nEvaluates in environment inside with2(), but the expression likely refers to objects in the Global environment\n\n\n\n#&gt; [1] 1001 1002 1003\n\n\n\nSolved with Quosures‚Ä¶",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#quosures",
    "href": "slides/17_Big_picture.html#quosures",
    "title": "Advanced R Book Club",
    "section": "Quosures",
    "text": "Quosures\n\nQuosures bundles expression with an environment\nUse enquo() instead of enexpr() (with eval_tidy())\n\n\n\n#&gt; [1] 11 12 13\n\n\n\n‚ÄúWhenever you use a data mask, you must always use enquo() instead of enexpr().\n\nThis comes back in Chapter 20.\nWhich environment is bundled?\n\nThe environment where the expression is created (i.e.¬†the parent of where enquo() is called)\n\nHere, the global environment\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\n#&gt; &lt;environment: 0x55ad54c5bb10&gt;\n\n\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^x + a\n#&gt; env:  global\n\n\n#&gt; [1] 10001 10002 10003\n\n\nHere, the fun1() environment\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\n#&gt; &lt;environment: 0x55ad556ec7d0&gt;\n\n\n#&gt; &lt;environment: 0x55ad556ec7d0&gt;\n\n\n#&gt; &lt;environment: 0x55ad55720258&gt;\n\n\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^x + a\n#&gt; env:  0x55ad556ec7d0\n\n\n#&gt; [1] 11 12 13",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/17_Big_picture.html#meeting-videos",
    "href": "slides/17_Big_picture.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:32:31    Oluwafemi Oyedele:  When should eval_tidy() be used instead of eval()?\nbase::eval() is sufficient for simple evaluation. Use eval_tidy() when you'd like to support expressions referring to the .data pronoun, or when you need to support quosures.\n00:37:08    Trevin (he/him):    https://rlang.r-lib.org/reference/topic-defuse.html\n00:38:38    Federica Gazzelloni:    https://rlang.r-lib.org/reference/eval_tidy.html\n00:39:57    Arthur Shaw:    Tidy eval book: https://bookdown.dongzhuoer.com/tidyverse/tidyeval/\n00:40:14    Arthur Shaw:    Also very useful resource: https://dplyr.tidyverse.org/articles/programming.html\n00:40:28    Trevin (he/him):    https://ggplot2.tidyverse.org/reference/aes.html\n00:40:37    Federica Gazzelloni:    https://ggplot2.tidyverse.org/reference/tidyeval.html\n00:41:22    Oluwafemi Oyedele:  It is Tidyverse design\n00:49:13    Federica Gazzelloni:    https://www.youtube.com/watch?v=2NixH3QAerQ&list=PL3x6DOfs2NGi9lH7q-phZlPrl6HKXYDbn&index=15\n00:50:13    Federica Gazzelloni:    Minute: 17:04\n00:54:03    Federica Gazzelloni:    con &lt;- DBI::dbConnect(RSQLite::SQLite(), filename = \":memory:\")\n00:54:18    Federica Gazzelloni:    DBI::dbDisconnect(con)\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:11:09    Ryan Honomichl: https://medium.com/analytics-vidhya/become-a-better-r-programmer-with-the-awesome-lobstr-package-af97fcd22602\n00:33:03    Ryan Honomichl: https://rlang.r-lib.org/reference/enquo.html\n00:37:30    Ryan Honomichl: https://rlang.r-lib.org/reference/topic-multiple-columns.html\n00:41:00    Ryan Honomichl: brb\n00:44:37    Ron Legere: https://www.rdocumentation.org/packages/srvyr/versions/1.2.0\n00:44:58    Ron Legere: http://gdfe.co/srvyr/\n00:51:51    Stone:  https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html",
    "crumbs": [
      "Metaprogramming",
      "Big picture"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#introduction",
    "href": "slides/05_Control_flow.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nThere are two main groups of flow control tools: choices and loops:\n\nChoices (if, switch, ifelse, dplyr::if_else, dplyr::case_when) allow you to run different code depending on the input.\nLoops (for, while, repeat) allow you to repeatedly run code",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#choices",
    "href": "slides/05_Control_flow.html#choices",
    "title": "Advanced R Book Club",
    "section": "Choices",
    "text": "Choices\nif() and else\nUse if to specify a block of code to be executed, if a specified condition is true. Use else to specify a block of code to be executed, if the same condition is false.\n(Note braces are only needed for compound expressions)\nCan be expanded to more alternatives:",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#exercise",
    "href": "slides/05_Control_flow.html#exercise",
    "title": "Advanced R Book Club",
    "section": "Exercise",
    "text": "Exercise\nWhy does this work?\nx &lt;- 1:10\nif (length(x)) \"not empty\" else \"empty\"\n#&gt; [1] \"not empty\"\n\nx &lt;- numeric()\nif (length(x)) \"not empty\" else \"empty\"\n#&gt; [1] \"empty\"\nif returns a value which can be assigned\n\n\n#&gt; [1] 1 2\n\n\nThe book recommends assigning the results of an if statement only when the entire expression fits on one line; otherwise it tends to be hard to read.",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#single-if-without-else",
    "href": "slides/05_Control_flow.html#single-if-without-else",
    "title": "Advanced R Book Club",
    "section": "Single if without else",
    "text": "Single if without else\nWhen you use the single argument form without an else statement, if invisibly (Section 6.7.2) returns NULL if the condition is FALSE. Since functions like c() and paste() drop NULL inputs, this allows for a compact expression of certain idioms:",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#invalid-inputs",
    "href": "slides/05_Control_flow.html#invalid-inputs",
    "title": "Advanced R Book Club",
    "section": "Invalid inputs",
    "text": "Invalid inputs\n\nCondition must evaluate to a single TRUE or FALSE\n\nA single number gets coerced to a logical type.\nIf the condition cannot evaluate to a single TRUE or FALSE, an error is (usually) produced.\nException is a logical vector of length greater than 1, which only generates a warning, unless you have _R_CHECK_LENGTH_1_CONDITION_ set to TRUE.\nThis seems to have been the default since R-4.2.0",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#vectorized-choices",
    "href": "slides/05_Control_flow.html#vectorized-choices",
    "title": "Advanced R Book Club",
    "section": "Vectorized choices",
    "text": "Vectorized choices\n\nifelse() is a vectorized version of if:\n\n\ndplyr::if_else()\nBook recommends only using ifelse() ‚Äúonly when the yes and no vectors are the same type as it is otherwise hard to predict the output type.‚Äù\ndplyr::if_else() enforces this recommendation.\n\nFor example:",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#switch",
    "href": "slides/05_Control_flow.html#switch",
    "title": "Advanced R Book Club",
    "section": "Switch",
    "text": "Switch\nRather then string together multiple if - else if chains, you can often use switch.\nLast component should always throw an error, as unmatched inputs would otherwise invisibly return NULL. Book recommends to only use character inputs for switch().\n\nExample from book of ‚Äúfalling through‚Äù to next value\n\n\n#&gt; [1] 4\n\n\n#&gt; [1] 4",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#using-dplyrcase_when",
    "href": "slides/05_Control_flow.html#using-dplyrcase_when",
    "title": "Advanced R Book Club",
    "section": "Using dplyr::case_when",
    "text": "Using dplyr::case_when\n\ncase_when is a more general if_else and can be used often in place of multiple chained if_else or sapply‚Äôing switch.\nIt uses a special syntax to allow any number of condition-vector pairs:\n\n\n\n#&gt;      type    value\n#&gt; 1    mean 1.652545\n#&gt; 2  median 1.063744\n#&gt; 3 trimmed 1.300568",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#loops",
    "href": "slides/05_Control_flow.html#loops",
    "title": "Advanced R Book Club",
    "section": "Loops",
    "text": "Loops\n\nIteration over a elements of a vector\n\nfor (item in vector) perform_action\nFirst example\n\n\n#&gt; [1] 1\n#&gt; [1] 1 2\n#&gt; [1] 1 2 3\n#&gt; [1] 1 2 3 4\n#&gt; [1] 1 2 3 4 5\n\n\nSecond example: terminate a for loop earlier\n\nnext skips rest of current iteration\nbreak exits the loop entirely\n\n\n\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#exercise-1",
    "href": "slides/05_Control_flow.html#exercise-1",
    "title": "Advanced R Book Club",
    "section": "Exercise",
    "text": "Exercise\nWhen the following code is evaluated, what can you say about the vector being iterated?\nxs &lt;- c(1, 2, 3)\nfor (x in xs) {\n  xs &lt;- c(xs, x * 2)\n}\nxs\n#&gt; [1] 1 2 3 2 4 6",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#pitfalls",
    "href": "slides/05_Control_flow.html#pitfalls",
    "title": "Advanced R Book Club",
    "section": "Pitfalls",
    "text": "Pitfalls\n\nPreallocate output containers to avoid slow code.\nBeware that 1:length(v) when v has length 0 results in a iterating backwards over 1:0, probably not what is intended. Use seq_along(v) instead.\nWhen iterating over S3 vectors, use [[]] yourself to avoid stripping attributes.\n\nxs &lt;- as.Date(c(\"2020-01-01\", \"2010-01-01\"))\nfor (x in xs) {\n  print(x)\n}\n#&gt; [1] 18262\n#&gt; [1] 14610\nvs.¬†\nfor (i in seq_along(xs)) {\n  print(xs[[i]])\n}\n#&gt; [1] \"2020-01-01\"\n#&gt; [1] \"2010-01-01\"",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#related-tools",
    "href": "slides/05_Control_flow.html#related-tools",
    "title": "Advanced R Book Club",
    "section": "Related tools",
    "text": "Related tools\n\nwhile(condition) action: performs action while condition is TRUE.\nrepeat(action): repeats action forever (i.e.¬†until it encounters break).\nNote that for can be rewritten as while and while can be rewritten as repeat (this goes in one direction only!); however:\n\n\nGood practice is to use the least-flexible solution to a problem, so you should use for wherever possible. BUT you shouldn‚Äôt even use for loops for data analysis tasks as map() and apply() already provide less flexible solutions to most problems. (More in Chapter 9.)\n\n\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n\n\n\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n\n\n\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/05_Control_flow.html#meeting-videos",
    "href": "slides/05_Control_flow.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:16:34    Federica Gazzelloni:    https://github.com/r4ds/bookclub-Advanced_R\n00:22:28    Federica Gazzelloni:    https://stackoverflow.com/questions/50646133/dplyr-if-else-vs-base-r-ifelse\n00:26:20    Trevin: case_when() is great, makes it easy to read\n00:54:01    Trevin: out[I, ]\n00:54:14    Trevin: out[i, ]\n00:55:03    Trevin: I think you have to specify number of rows and columns before..\n00:55:30    Trevin: iterations = 10\n variables = 2\n\n output &lt;- matrix(ncol=variables, nrow=iterations)\n00:55:43    Trevin: https://stackoverflow.com/questions/13442461/populating-a-data-frame-in-r-in-a-loop\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:40:18    Ryan Honomichl: What type of vector does each of the following calls to ifelse() return?\n\n* \"ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no depending on whether the element of test is TRUE or FALSE.\"\n00:42:11    Ryan Honomichl: \"I recommend assigning the results of an if statement only when the entire expression fits on one line; otherwise it tends to be hard to read\"\n00:42:46    Ryan Honomichl: * When you use the single argument form without an `else` statement, `if` invisibly returns NULL if the condition is FALSE. \n\n-   Since functions like c() and paste() drop NULL inputs, this allows for a compact expression of certain idioms\n00:54:15    collinberke:    https://docs.google.com/spreadsheets/d/1ScrbEw_-vB9DruaJhjtVY8HLQmuNPqyWeOOjmG6OY1M/edit?usp=sharing\n00:58:46    collinberke:    https://www.youtube.com/@safe4democracy/videos",
    "crumbs": [
      "Foundations",
      "Control flow"
    ]
  },
  {
    "objectID": "slides/04_Subsetting.html#selecting-multiple-elements",
    "href": "slides/04_Subsetting.html#selecting-multiple-elements",
    "title": "Advanced R Book Club",
    "section": "Selecting multiple elements",
    "text": "Selecting multiple elements\nAtomic Vectors\n\n6 ways to subset atomic vectors\n\nLet‚Äôs take a look with an example vector.\nPositive integer indices\n\n\n#&gt; [1] 4.4 1.1\n\n\n#&gt; [1] 2.2 2.2\n\n\n#&gt; [1] 3.3 3.3\n\n\nNegative integer indices\n\n\n#&gt; [1] 2.2 4.4\n\n\n#&gt; Error in x[c(-1, 3)]: only 0's may be mixed with negative subscripts\n\n\nLogical Vectors\n\n\n#&gt; [1] 1.1 2.2 4.4\n\n\n#&gt; [1] 1.1 2.2\n\n\n#&gt; [1] 3.3 4.4\n\n\n\nRecyling rules applies when the two vectors are of different lengths\nthe shorter of the two is recycled to the length of the longer\nEasy to understand if x or y is 1, best to avoid other lengths\n\n\n\n#&gt; [1] 2.2 4.4\n\n\nMissing values (NA)\n\n\n#&gt; [1]  NA 2.2  NA 4.4\n\n\nNothing\n\n\n#&gt; [1] 1.1 2.2 3.3 4.4\n\n\nZero\n\n\n#&gt; numeric(0)\n\n\nCharacter vectors\n\n\n#&gt;   a   b   c   d \n#&gt; 1.1 2.2 3.3 4.4\n\n\n#&gt;   d   b   a \n#&gt; 4.4 2.2 1.1\n\n\n#&gt;   a   a   a \n#&gt; 1.1 1.1 1.1\n\n\n#&gt; abc def \n#&gt;   1   2\n\n\n#&gt; &lt;NA&gt; &lt;NA&gt; \n#&gt;   NA   NA\n\n\nLists\n\nSubsetting works the same way\n[ always returns a list\n[[ and $ let you pull elements out of a list\n\n\n\n#&gt; $a\n#&gt; [1]  TRUE FALSE\n#&gt; \n#&gt; $b\n#&gt;  [1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\"\n#&gt; \n#&gt; $c\n#&gt; [1] 100 101 102 103 104 105 106 107 108\n\n\nReturn a (named) list\n\n\n#&gt; $b\n#&gt;  [1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\"\n\n\nReturn a vector\n\n\n#&gt;  [1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\"\n\n\n#&gt;  [1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\"\n\n\nReturn a specific element\n\n\n#&gt; [1] \"g\"\n\n\n#&gt; [1] \"g\"\n\n\n#&gt; [1] \"g\"\n\n\nVisual Representation\n\nSee this stackoverflow article for more detailed information about the differences: https://stackoverflow.com/questions/1169456/the-difference-between-bracket-and-double-bracket-for-accessing-the-el\nMatrices and arrays\nYou can subset higher dimensional structures in three ways:\n\nwith multiple vectors\nwith a single vector\nwith a matrix\n\n\n\n#&gt;  A  B  C  D \n#&gt;  1  4  7 10\n\n\n#&gt; [1] 1 2 3\n\n\n#&gt; A \n#&gt; 1\n\n\n#&gt;      C  D\n#&gt; [1,] 7 10\n#&gt; [2,] 8 11\n\n\n#&gt;      B A\n#&gt; [1,] 4 1\n#&gt; [2,] 6 3\n\n\n#&gt;      A C D\n\n\nSubset a matrix with a matrix\n\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n\n\n#&gt; [1]  7 11\n\n\n\n\n#&gt;      [,1]  [,2]  [,3]  [,4]  [,5] \n#&gt; [1,] \"1,1\" \"1,2\" \"1,3\" \"1,4\" \"1,5\"\n#&gt; [2,] \"2,1\" \"2,2\" \"2,3\" \"2,4\" \"2,5\"\n#&gt; [3,] \"3,1\" \"3,2\" \"3,3\" \"3,4\" \"3,5\"\n#&gt; [4,] \"4,1\" \"4,2\" \"4,3\" \"4,4\" \"4,5\"\n#&gt; [5,] \"5,1\" \"5,2\" \"5,3\" \"5,4\" \"5,5\"\n\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    1\n#&gt; [2,]    3    1\n#&gt; [3,]    2    4\n\n\n#&gt; [1] \"1,1\" \"3,1\" \"2,4\"\n\n\nMatrices and arrays are just special vectors; can subset with a single vector (arrays in R stored column wise)\n\n\n#&gt; [1] \"3,1\" \"5,3\" \"1,4\" \"2,4\"\n\n\nData frames and tibbles\nData frames act like both lists and matrices\n\nWhen subsetting with a single index, they behave like lists and index the columns, so df[1:2] selects the first two columns.\nWhen subsetting with two indices, they behave like matrices, so df[1:3, ] selects the first three rows (and all the columns).\n\n\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   island    bill_length_mm\n#&gt;   &lt;fct&gt;              &lt;dbl&gt;\n#&gt; 1 Torgersen           39.1\n#&gt; 2 Torgersen           39.5\n#&gt; 3 Torgersen           40.3\n#&gt; 4 Torgersen           NA  \n#&gt; 5 Torgersen           36.7\n#&gt; 6 Torgersen           39.3\n\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   island    bill_length_mm\n#&gt;   &lt;fct&gt;              &lt;dbl&gt;\n#&gt; 1 Torgersen           39.1\n#&gt; 2 Torgersen           39.5\n#&gt; 3 Torgersen           40.3\n#&gt; 4 Torgersen           NA  \n#&gt; 5 Torgersen           36.7\n#&gt; 6 Torgersen           39.3\n\n\n#&gt; # A tibble: 2 √ó 2\n#&gt;   bill_length_mm bill_depth_mm\n#&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1           39.1          18.7\n#&gt; 2           39.5          17.4\n\n\n#&gt; Error:\n#&gt; ! The `j` argument of `[[.tbl_df()` can't be a vector of length 2 as of\n#&gt;   tibble 3.0.0.\n#&gt; ‚Ñπ Recursive subsetting is deprecated for tibbles.\n\n\n#&gt; [1] 39.1 39.5 40.3   NA\n\n\n#&gt; [1] 39.1 39.5 40.3   NA\n\n\nSubsetting a tibble with [ always returns a tibble\nPreserving dimensionality\n\nData frames and tibbles behave differently\ntibble will default to preserve dimensionality, data frames do not\nthis can lead to unexpected behavior and code breaking in the future\nUse drop = FALSE to preserve dimensionality when subsetting a data frame or use tibbles\n\n\n\n#&gt; tibble [2 √ó 1] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ a: int [1:2] 1 2\n\n\n#&gt; # A tibble: 2 √ó 1\n#&gt;       a\n#&gt;   &lt;int&gt;\n#&gt; 1     1\n#&gt; 2     2\n\n\n#&gt; [1] 1 2\n\n\n\n\n#&gt; [1] 1 2\n\n\n#&gt;   a\n#&gt; 1 1\n#&gt; 2 2\n\n\nFactors\nFactor subsetting drop argument controls whether or not levels (rather than dimensions) are preserved.\n\n\n#&gt; [1] a\n#&gt; Levels: a b c\n\n\n#&gt; [1] a\n#&gt; Levels: a",
    "crumbs": [
      "Foundations",
      "Subsetting"
    ]
  },
  {
    "objectID": "slides/04_Subsetting.html#selecting-a-single-element",
    "href": "slides/04_Subsetting.html#selecting-a-single-element",
    "title": "Advanced R Book Club",
    "section": "Selecting a single element",
    "text": "Selecting a single element\n[[ and $ are used to extract single elements (note: a vector can be a single element)\n[[]]\nBecause [[]] can return only a single item, you must use it with either a single positive integer or a single string.\n\n\n#&gt; [1] 1 2 3\n\n\nHadley Wickham recommends using [[]] with atomic vectors whenever you want to extract a single value to reinforce the expectation that you are getting and setting individual values.\n$\n\nx$y is equivalent to x[[\"y\"]]\n\nthe $ operator doesn‚Äôt work with stored vals\n\n\n#&gt; NULL\n\n\n#&gt;  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\n\n$ allows partial matching, [[]] does not\n\n\n#&gt; [1] 1\n\n\n#&gt; NULL\n\n\nHadley advises to change Global settings:\n\n\n#&gt; [1] 1\n\n\ntibbles don‚Äôt have this behavior\n\n\n#&gt; NULL\n\n\nmissing and out of bound indices\n\nDue to the inconsistency of how R handles such indices, purrr::pluck() and purrr::chuck() are recommended\n\n@ and slot()\n\n@ is $ for S4 objects (to be revisited in Chapter 15)\nslot() is [[ ]] for S4 objects",
    "crumbs": [
      "Foundations",
      "Subsetting"
    ]
  },
  {
    "objectID": "slides/04_Subsetting.html#subsetting-and-assignment",
    "href": "slides/04_Subsetting.html#subsetting-and-assignment",
    "title": "Advanced R Book Club",
    "section": "Subsetting and Assignment",
    "text": "Subsetting and Assignment\n\nSubsetting can be combined with assignment to edit values\n\n\n\n#&gt; [1] \"Tigers\"    \"Royals\"    \"White Sox\" \"Twins\"     \"Guardians\"\n\n\n\nlength of the subset and assignment vector should be the same to avoid recycling\n\nYou can use NULL to remove a component\n\n\n#&gt; List of 1\n#&gt;  $ a: num 1\n\n\nSubsetting with nothing can preserve structure of original object",
    "crumbs": [
      "Foundations",
      "Subsetting"
    ]
  },
  {
    "objectID": "slides/04_Subsetting.html#applications",
    "href": "slides/04_Subsetting.html#applications",
    "title": "Advanced R Book Club",
    "section": "Applications",
    "text": "Applications\nApplications copied from cohort 2 slide\nLookup tables (character subsetting)\nMatching and merging by hand (integer subsetting)\n\nThe match() function allows merging a vector with a table\n\nRandom samples and bootstrapping (integer subsetting)\nOrdering (integer subsetting)\nExpanding aggregated counts (integer subsetting)\n\nWe can expand a count column by using rep()\n\nRemoving columns from data frames (character)\n\nWe can remove a column by subsetting, which does not change the object\n\n\nWe can also delete the column using NULL\n\nSelecting rows based on a condition (logical subsetting)\nBoolean algebra versus sets (logical and integer)\n\nwhich() gives the indices of a Boolean vector",
    "crumbs": [
      "Foundations",
      "Subsetting"
    ]
  },
  {
    "objectID": "slides/04_Subsetting.html#meeting-videos",
    "href": "slides/04_Subsetting.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:36:02    Arthur Shaw:    TIL that the subset operator has parameters. Thanks, Trevin!\n00:38:55    Vaibhav Janve:  its interesting that carriage \"a\" has two set of wheels instread of 4. I wonder that choice is because its atomic.\n00:40:44    Arthur Shaw:    @Vaibhav, because the load is lighter, the carriage needs fewer axles? ;)  I agree: it's a confusing graphical choice.\n00:41:11    Vaibhav Janve:  lol\n01:05:53    Vaibhav Janve:  Thank you Trevin!\n\nCohort 7\n\n\n\n\n\n\nMeeting chat log\n\n00:40:18    Ryan Honomichl: What type of vector does each of the following calls to ifelse() return?\n\n* \"ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no depending on whether the element of test is TRUE or FALSE.\"\n00:42:11    Ryan Honomichl: \"I recommend assigning the results of an if statement only when the entire expression fits on one line; otherwise it tends to be hard to read\"\n00:42:46    Ryan Honomichl: * When you use the single argument form without an `else` statement, `if` invisibly returns NULL if the condition is FALSE. \n\n-   Since functions like c() and paste() drop NULL inputs, this allows for a compact expression of certain idioms\n00:54:15    collinberke:    https://docs.google.com/spreadsheets/d/1ScrbEw_-vB9DruaJhjtVY8HLQmuNPqyWeOOjmG6OY1M/edit?usp=sharing\n00:58:46    collinberke:    https://www.youtube.com/@safe4democracy/videos",
    "crumbs": [
      "Foundations",
      "Subsetting"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#introduction",
    "href": "slides/18_Expressions.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\n\nTo compute on the language, we first need to understand its structure.\n\n\nThis requires a few things:\n\nNew vocabulary.\nNew tools to inspect and modify expressions.\nApproach the use of the language with new ways of thinking.\n\nOne of the first new ways of thinking is the distinction between an operation and its result.\n\n\n\n#&gt; Error: object 'x' not found\n\n\n\nWe can capture the intent of the code without executing it using the rlang package.\n\n\n\n#&gt; y &lt;- x * 10\n\n\n\nWe can then evaluate the expression using the base::eval function.\n\n\n\n#&gt; [1] 40\n\n\nEvaluating multiple expressions\n\nThe function expression() allows for multiple expressions, and in some ways it acts similarly to the way files are source()d in. That is, we eval()uate all of the expressions at once.\nexpression() returns a vector and can be passed to eval().\n\n\n\n#&gt; [1] 40\n\n\n#&gt; [1] FALSE\n\n\n#&gt; [1] TRUE\n\n\n\nexprs() does not evaluate everything at once. To evaluate each expression, the individual expressions must be evaluated in a loop.\n\n\n\n#&gt; x &lt;- 4\n#&gt; [1] 4\n#&gt; x * 10\n#&gt; [1] 40",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#abstract-syntax-tree-ast",
    "href": "slides/18_Expressions.html#abstract-syntax-tree-ast",
    "title": "Advanced R Book Club",
    "section": "Abstract Syntax Tree (AST)",
    "text": "Abstract Syntax Tree (AST)\n\nExpressions are objects that capture the structure of code without evaluating it.\nExpressions are also called abstract syntax trees (ASTs) because the structure of code is hierarchical and can be naturally represented as a tree.\nUnderstanding this tree structure is crucial for inspecting and modifying expressions.\n\nBranches = Calls\nLeaves = Symbols and constants\n\n\n\nWith lobstr::ast():\n\n\n#&gt; ‚ñà‚îÄf \n#&gt; ‚îú‚îÄx \n#&gt; ‚îú‚îÄ\"y\" \n#&gt; ‚îî‚îÄ1\n\n\n\nSome functions might also contain more calls like the example below:\n\n\n\n\n#&gt; ‚ñà‚îÄf \n#&gt; ‚îú‚îÄ‚ñà‚îÄg \n#&gt; ‚îÇ ‚îú‚îÄ1 \n#&gt; ‚îÇ ‚îî‚îÄ2 \n#&gt; ‚îî‚îÄ‚ñà‚îÄh \n#&gt;   ‚îú‚îÄ3 \n#&gt;   ‚îú‚îÄ4 \n#&gt;   ‚îî‚îÄ‚ñà‚îÄi\n\n\n\nRead the hand-drawn diagrams from left-to-right (ignoring vertical position)\nRead the lobstr-drawn diagrams from top-to-bottom (ignoring horizontal position).\nThe depth within the tree is determined by the nesting of function calls.\nDepth also determines evaluation order, as evaluation generally proceeds from deepest-to-shallowest, but this is not guaranteed because of lazy evaluation.\n\nInfix calls\n\nEvery call in R can be written in tree form because any call can be written in prefix form.\n\nAn infix operator is a function where the function name is placed between its arguments. Prefix form is when then function name comes before the arguments, which are enclosed in parentheses. [Note that the name infix comes from the words prefix and suffix.]\n\nA characteristic of the language is that infix functions can always be written as prefix functions; therefore, all function calls can be represented using an AST.\n\n\n\n\n#&gt; ‚ñà‚îÄ`&lt;-` \n#&gt; ‚îú‚îÄy \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`*` \n#&gt;   ‚îú‚îÄx \n#&gt;   ‚îî‚îÄ10\n\n\n\n\n#&gt; ‚ñà‚îÄ`&lt;-` \n#&gt; ‚îú‚îÄy \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`*` \n#&gt;   ‚îú‚îÄx \n#&gt;   ‚îî‚îÄ10\n\n\n\nThere is no difference between the ASTs for the infix version vs the prefix version, and if you generate an expression with prefix calls, R will still print it in infix form:\n\n\n\n#&gt; y &lt;- x * 10",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#expression",
    "href": "slides/18_Expressions.html#expression",
    "title": "Advanced R Book Club",
    "section": "Expression",
    "text": "Expression\n\nCollectively, the data structures present in the AST are called expressions.\nThese include:\n\nConstants\nSymbols\nCalls\nPairlists\n\n\nConstants\n\nScalar constants are the simplest component of the AST.\nA constant is either NULL or a length-1 atomic vector (or scalar)\n\ne.g., TRUE, 1L, 2.5, \"x\", or \"hello\".\n\nWe can test for a constant with rlang::is_syntactic_literal().\nConstants are self-quoting in the sense that the expression used to represent a constant is the same constant:\n\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\nSymbols\n\nA symbol represents the name of an object.\n\nx\nmtcars\nmean\n\nIn base R, the terms symbol and name are used interchangeably (i.e., is.name() is identical to is.symbol()), but this book used symbol consistently because ‚Äúname‚Äù has many other meanings.\nYou can create a symbol in two ways:\n\nby capturing code that references an object with expr().\nturning a string into a symbol with rlang::sym().\n\n\n\n\n#&gt; x\n\n\n\n\n#&gt; x\n\n\n\nA symbol can be turned back into a string with as.character() or rlang::as_string().\nas_string() has the advantage of clearly signalling that you‚Äôll get a character vector of length 1.\n\n\n\n#&gt; [1] \"x\"\n\n\n\nWe can recognize a symbol because it is printed without quotes\n\n\n\n#&gt; x\n\n\n\nstr() tells you that it is a symbol, and is.symbol() is TRUE:\n\n\n\n#&gt;  symbol x\n\n\n\n\n#&gt; [1] TRUE\n\n\n\nThe symbol type is not vectorised, i.e., a symbol is always length 1.\nIf you want multiple symbols, you‚Äôll need to put them in a list, using rlang::syms().\n\nNote that as_string() will not work on expressions which are not symbols.\n\n\n#&gt; Error in `as_string()`:\n#&gt; ! Can't convert a call to a string.\n\n\nCalls\n\nA call object represents a captured function call.\nCall objects are a special type of list.\n\nThe first component specifies the function to call (usually a symbol, i.e., the name fo the function).\nThe remaining elements are the arguments for that call.\n\nCall objects create branches in the AST, because calls can be nested inside other calls.\nYou can identify a call object when printed because it looks just like a function call.\nConfusingly typeof() and str() print language for call objects (where we might expect it to return that it is a ‚Äúcall‚Äù object), but is.call() returns TRUE:\n\n\n\n#&gt; ‚ñà‚îÄread.table \n#&gt; ‚îú‚îÄ\"important.csv\" \n#&gt; ‚îî‚îÄrow.names = FALSE\n\n\n\n\n#&gt; [1] \"language\"\n\n\n\n\n#&gt; [1] TRUE\n\n\nSubsetting\n\nCalls generally behave like lists.\nSince they are list-like, you can use standard subsetting tools.\nThe first element of the call object is the function to call, which is usually a symbol:\n\n\n\n#&gt; read.table\n\n\n\n\n#&gt; [1] TRUE\n\n\n\nThe remainder of the elements are the arguments:\n\n\n\n#&gt; [1] FALSE\n\n\n#&gt; [[1]]\n#&gt; [1] \"important.csv\"\n#&gt; \n#&gt; $row.names\n#&gt; [1] FALSE\n\n\n\nWe can extract individual arguments with [[ or, if named, $:\n\n\n\n#&gt; [1] \"important.csv\"\n\n\n\n\n#&gt; [1] FALSE\n\n\n\nWe can determine the number of arguments in a call object by subtracting 1 from its length:\n\n\n\n#&gt; [1] 2\n\n\n\nExtracting specific arguments from calls is challenging because of R‚Äôs flexible rules for argument matching:\n\nIt could potentially be in any location, with the full name, with an abbreviated name, or with no name.\n\nTo work around this problem, you can use rlang::call_standardise() which standardizes all arguments to use the full name:\n\n\n\n#&gt; read.table(file = \"important.csv\", row.names = FALSE)\n\n\n\nBut If the function uses ‚Ä¶ it‚Äôs not possible to standardise all arguments.\nCalls can be modified in the same way as lists:\n\n\n\n#&gt; read.table(\"important.csv\", row.names = FALSE, header = TRUE)\n\n\nFunction position\n\nThe first element of the call object is the function position. This contains the function that will be called when the object is evaluated, and is usually a symbol.\n\n\n\n#&gt; ‚ñà‚îÄfoo\n\n\n\nWhile R allows you to surround the name of the function with quotes, the parser converts it to a symbol:\n\n\n\n#&gt; ‚ñà‚îÄfoo\n\n\n\nHowever, sometimes the function doesn‚Äôt exist in the current environment and you need to do some computation to retrieve it:\n\nFor example, if the function is in another package, is a method of an R6 object, or is created by a function factory. In this case, the function position will be occupied by another call:\n\n\n\n\n#&gt; ‚ñà‚îÄ‚ñà‚îÄ`::` \n#&gt; ‚îÇ ‚îú‚îÄpkg \n#&gt; ‚îÇ ‚îî‚îÄfoo \n#&gt; ‚îî‚îÄ1\n\n\n\n\n#&gt; ‚ñà‚îÄ‚ñà‚îÄ`$` \n#&gt; ‚îÇ ‚îú‚îÄobj \n#&gt; ‚îÇ ‚îî‚îÄfoo \n#&gt; ‚îî‚îÄ1\n\n\n\n\n#&gt; ‚ñà‚îÄ‚ñà‚îÄfoo \n#&gt; ‚îÇ ‚îî‚îÄ1 \n#&gt; ‚îî‚îÄ2\n\n\n\nConstructing\n\nYou can construct a call object from its components using rlang::call2().\nThe first argument is the name of the function to call (either as a string, a symbol, or another call).\nThe remaining arguments will be passed along to the call:\n\n\n\n#&gt; mean(x = x, na.rm = TRUE)\n\n\n\n\n#&gt; base::mean(x = x, na.rm = TRUE)\n\n\n\nInfix calls created in this way still print as usual.\n\n\n\n#&gt; x &lt;- 10",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#parsing-and-grammar",
    "href": "slides/18_Expressions.html#parsing-and-grammar",
    "title": "Advanced R Book Club",
    "section": "Parsing and grammar",
    "text": "Parsing and grammar\n\nParsing - The process by which a computer language takes a string and constructs an expression. Parsing is governed by a set of rules known as a grammar.\nWe are going to use lobstr::ast() to explore some of the details of R‚Äôs grammar, and then show how you can transform back and forth between expressions and strings.\nOperator precedence - Conventions used by the programming language to resolve ambiguity.\nInfix functions introduce two sources of ambiguity.\nThe first source of ambiguity arises from infix functions: what does 1 + 2 * 3 yield? Do you get 9 (i.e., (1 + 2) * 3), or 7 (i.e., 1 + (2 * 3))? In other words, which of the two possible parse trees below does R use?\n\n\n\nProgramming languages use conventions called operator precedence to resolve this ambiguity. We can use ast() to see what R does:\n\n\n\n#&gt; ‚ñà‚îÄ`+` \n#&gt; ‚îú‚îÄ1 \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`*` \n#&gt;   ‚îú‚îÄ2 \n#&gt;   ‚îî‚îÄ3\n\n\n\nPEMDAS (or BEDMAS or BODMAS, depending on where in the world you grew up) is pretty clear on what to do. Other operator precedence isn‚Äôt as clear.\nThere‚Äôs one particularly surprising case in R:\n\n! has a much lower precedence (i.e., it binds less tightly) than you might expect.\nThis allows you to write useful operations like:\n\n\n\n\n#&gt; ‚ñà‚îÄ`!` \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`%in%` \n#&gt;   ‚îú‚îÄx \n#&gt;   ‚îî‚îÄy\n\n\n\nR has over 30 infix operators divided into 18 precedence groups.\nWhile the details are described in ?Syntax, very few people have memorized the complete ordering.\nIf there‚Äôs any confusion, use parentheses!\n\n\n\n#&gt; ‚ñà‚îÄ`*` \n#&gt; ‚îú‚îÄ‚ñà‚îÄ`(` \n#&gt; ‚îÇ ‚îî‚îÄ‚ñà‚îÄ`+` \n#&gt; ‚îÇ   ‚îú‚îÄ1 \n#&gt; ‚îÇ   ‚îî‚îÄ2 \n#&gt; ‚îî‚îÄ3\n\n\nAssociativity\n\nThe second source of ambiguity is introduced by repeated usage of the same infix function.\n\n\n\n#&gt; [1] 6\n\n\n#&gt; [1] 6\n\n\n#&gt; [1] 6\n\n\n\nIn this case it doesn‚Äôt matter. Other places it might, like in ggplot2.\nIn R, most operators are left-associative, i.e., the operations on the left are evaluated first:\n\n\n\n#&gt; ‚ñà‚îÄ`+` \n#&gt; ‚îú‚îÄ‚ñà‚îÄ`+` \n#&gt; ‚îÇ ‚îú‚îÄ1 \n#&gt; ‚îÇ ‚îî‚îÄ2 \n#&gt; ‚îî‚îÄ3\n\n\n\nThere are two exceptions to the left-associative rule:\n\nexponentiation\nassignment\n\n\n\n\n#&gt; ‚ñà‚îÄ`^` \n#&gt; ‚îú‚îÄ2 \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`^` \n#&gt;   ‚îú‚îÄ2 \n#&gt;   ‚îî‚îÄ3\n\n\n\n\n#&gt; ‚ñà‚îÄ`&lt;-` \n#&gt; ‚îú‚îÄx \n#&gt; ‚îî‚îÄ‚ñà‚îÄ`&lt;-` \n#&gt;   ‚îú‚îÄy \n#&gt;   ‚îî‚îÄz\n\n\nParsing and deparsing\n\nParsing - turning characters you‚Äôve typed into an AST (i.e., from strings to expressions).\nR usually takes care of parsing code for us.\nBut occasionally you have code stored as a string, and you want to parse it yourself.\nYou can do so using rlang::parse_expr():\n\n\n\n#&gt; [1] \"y &lt;- x + 10\"\n\n\n#&gt; [1] FALSE\n\n\n\n\n#&gt; y &lt;- x + 10\n\n\n#&gt; [1] TRUE\n\n\n\nparse_expr() always returns a single expression.\nIf you have multiple expression separated by ; or ,, you‚Äôll need to use rlang::parse_exprs() which is the plural version of rlang::parse_expr(). It returns a list of expressions:\n\n\n\n#&gt; [[1]]\n#&gt; a &lt;- 1\n#&gt; \n#&gt; [[2]]\n#&gt; a + 1\n\n\n\nIf you find yourself parsing strings into expressions often, quasiquotation may be a safer approach.\n\nMore about quasiquaotation in Chapter 19.\n\nThe inverse of parsing is deparsing.\nDeparsing - given an expression, you want the string that would generate it.\nDeparsing happens automatically when you print an expression.\nYou can get the string with rlang::expr_text():\nParsing and deparsing are not symmetric.\n\nParsing creates the AST which means that we lose backticks around ordinary names, comments, and whitespace.\n\n\n\n\n#&gt; {\n#&gt;     x &lt;- x + 1\n#&gt; }",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#using-the-ast-to-solve-more-complicated-problems",
    "href": "slides/18_Expressions.html#using-the-ast-to-solve-more-complicated-problems",
    "title": "Advanced R Book Club",
    "section": "Using the AST to solve more complicated problems",
    "text": "Using the AST to solve more complicated problems\n\nHere we focus on what we learned to perform recursion on the AST.\nTwo parts of a recursive function:\n\nRecursive case: handles the nodes in the tree. Typically, you‚Äôll do something to each child of a node, usually calling the recursive function again, and then combine the results back together again. For expressions, you‚Äôll need to handle calls and pairlists (function arguments).\nBase case: handles the leaves of the tree. The base cases ensure that the function eventually terminates, by solving the simplest cases directly. For expressions, you need to handle symbols and constants in the base case.\n\n\nTwo helper functions\n\nFirst, we need an epxr_type() function to return the type of expression element as a string.\n\n\n\n#&gt; [1] \"constant\"\n\n\n#&gt; [1] \"symbol\"\n\n\n#&gt; [1] \"call\"\n\n\n\nSecond, we need a wrapper function to handle exceptions.\n\n\nLastly, we can write a basic template that walks the AST using the switch() statement.\n\nSpecific use cases for recurse_call()\nExample 1: Finding F and T\n\nUsing F and T in our code rather than FALSE and TRUE is bad practice.\nSay we want to walk the AST to find times when we use F and T.\nStart off by finding the type of T vs TRUE.\n\n\n\n#&gt; [1] \"constant\"\n\n\n#&gt; [1] \"symbol\"\n\n\n\nWith this knowledge, we can now write the base cases of our recursive function.\nThe logic is as follows:\n\nA constant is never a logical abbreviation and a symbol is an abbreviation if it is ‚ÄúF‚Äù or ‚ÄúT‚Äù:\n\n\n\n\n#&gt; [1] FALSE\n\n\n#&gt; [1] TRUE\n\n\n\nIt‚Äôs best practice to write another wrapper, assuming every input you receive will be an expression.\n\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] FALSE\n\n\nNext step: code for the recursive cases\n\nHere we want to do the same thing for calls and for pairlists.\nHere‚Äôs the logic: recursively apply the function to each subcomponent, and return TRUE if any subcomponent contains a logical abbreviation.\nThis is simplified by using the purrr::some() function, which iterates over a list and returns TRUE if the predicate function is true for any element.\n\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] TRUE\n\n\nExample 2: Finding all variables created by assignment\n\nListing all the variables is a little more complicated.\nFigure out what assignment looks like based on the AST.\n\n\n\n#&gt; ‚ñà‚îÄ`&lt;-` \n#&gt; ‚îú‚îÄx \n#&gt; ‚îî‚îÄ10\n\n\n\nNow we need to decide what data structure we‚Äôre going to use for the results.\n\nEasiest thing will be to return a character vector.\nWe would need to use a list if we wanted to return symbols.\n\n\nDealing with the base cases\n\n\n#&gt; character(0)\n\n\n#&gt; character(0)\n\n\nDealing with the recursive cases\n\nHere is the function to flatten pairlists.\n\n\n\n#&gt; [1] \"a\" \"b\" \"c\"\n\n\n\nHere is the code needed to identify calls.\n\n\n\n#&gt; [1] \"a\"\n\n\n#&gt; [1] \"a\" \"b\"\n\n\nMake the function more robust\n\nThrow cases at it that we think might break the function.\nWrite a function to handle these cases.\n\n\n\n#&gt; [1] \"a\" \"b\" \"c\"\n\n\n#&gt; [1] \"x\" \"y\"\n\n\n\nThis approach certainly is more complicated, but it‚Äôs important to start simple and move up.",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#specialised-data-structures",
    "href": "slides/18_Expressions.html#specialised-data-structures",
    "title": "Advanced R Book Club",
    "section": "Specialised data structures",
    "text": "Specialised data structures\n\nPairlists\nMissing arguments\nExpression vectors\n\nPairlists\n\nPairlists are a remnant of R‚Äôs past and have been replaced by lists almost everywhere.\nThe only place you are likely to see pairlists in R is when working with calls to the function, as the formal arguments to a function are stored in a pairlist:\n\n\n\n#&gt; $x\n#&gt; \n#&gt; \n#&gt; $y\n#&gt; [1] 10\n\n\n\n\n#&gt; [1] \"pairlist\"\n\n\n\nFortunately, whenever you encounter a pairlist, you can treat it just like a regular list:\n\n\n\n#&gt; [1] 2\n\n\n\n\n#&gt; [1] 1\n\n\nMissing arguments\n\nEmpty symbols\nTo create an empty symbol, you need to use missing_arg() or expr().\n\n\n\n#&gt; [1] \"symbol\"\n\n\n\nEmpty symbols don‚Äôt print anything.\n\nTo check, we need to use rlang::is_missing()\n\n\n\n\n#&gt; [1] TRUE\n\n\n\nThese are usually present in function formals:\n\n\n\n#&gt; [1] TRUE\n\n\nExpression vectors\n\nAn expression vector is just a list of expressions.\n\nThe only difference is that calling eval() on an expression evaluates each individual expression.\nInstead, it might be more advantageous to use a list of expressions.\n\nExpression vectors are only produced by two base functions: expression() and parse():\n\n\n\n#&gt; expression(x &lt;- 4, x)\n\n\n\n\n#&gt; expression(x &lt;- 4, x)\n\n\n\n\n#&gt; [1] \"expression\"\n\n\n#&gt; [1] \"expression\"\n\n\n\nLike calls and pairlists, expression vectors behave like lists:\n\n\n\n#&gt; [1] 2\n\n\n#&gt; x &lt;- 4",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/18_Expressions.html#meeting-videos",
    "href": "slides/18_Expressions.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\nCohort 7\n\n\n\n\n\n\nMeeting chat log\n\n00:50:48    Stone:  https://www.r-bloggers.com/2018/10/quasiquotation-in-r-via-bquote/\n00:58:26    iPhone: See ya next week!",
    "crumbs": [
      "Metaprogramming",
      "Expressions"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#introduction",
    "href": "slides/11_Function_operators.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\n\n\nA function operator is a function that takes one (or more) functions as input and returns a function as output.\nFunction operators are a special case of function factories, since they return functions.\nThey are often used to wrap an existing function to provide additional capability, similar to python‚Äôs decorators.\n\n\n\n#&gt; Processing 3\n#&gt; Processing 2\n#&gt; Processing 1\n\n\n#&gt; [1] 9 4 1",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#existing-function-operators",
    "href": "slides/11_Function_operators.html#existing-function-operators",
    "title": "Advanced R Book Club",
    "section": "Existing function operators",
    "text": "Existing function operators\nTwo function operator examples are purrr:safely() and memoise::memoise(). These can be found in purr and memoise:",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#purrrsafely",
    "href": "slides/11_Function_operators.html#purrrsafely",
    "title": "Advanced R Book Club",
    "section": "purrr::safely",
    "text": "purrr::safely\nCapturing Errors: turns errors into data!\n\n\n#&gt; List of 2\n#&gt;  $ result:List of 4\n#&gt;   ..$ : num 1.39\n#&gt;   ..$ : num 1.27\n#&gt;   ..$ : num 2.17\n#&gt;   ..$ : NULL\n#&gt;  $ error :List of 4\n#&gt;   ..$ : NULL\n#&gt;   ..$ : NULL\n#&gt;   ..$ : NULL\n#&gt;   ..$ :List of 2\n#&gt;   .. ..$ message: chr \"invalid 'type' (character) of argument\"\n#&gt;   .. ..$ call   : language .Primitive(\"sum\")(..., na.rm = na.rm)\n#&gt;   .. ..- attr(*, \"class\")= chr [1:3] \"simpleError\" \"error\" \"condition\"",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#other-purrr-function-operators",
    "href": "slides/11_Function_operators.html#other-purrr-function-operators",
    "title": "Advanced R Book Club",
    "section": "Other purrr function operators",
    "text": "Other purrr function operators\n\n\npurrr comes with three other function operators in a similar vein:\n\n  possibly(): returns a default value when there‚Äôs an error. It provides no way to tell if an error occured or not, so it‚Äôs best reserved for cases when there‚Äôs some obvious sentinel value (like NA).\n\n  quietly(): turns output, messages, and warning side-effects into output, message, and warning components of the output.\n\n  auto_browser(): automatically executes browser() inside the function when there‚Äôs an error.",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#memoisememoise",
    "href": "slides/11_Function_operators.html#memoisememoise",
    "title": "Advanced R Book Club",
    "section": "memoise::memoise",
    "text": "memoise::memoise\nCaching computations: avoid repeated computations!\n\n\n#&gt; [1] 7.800322\n\n\n#&gt;    user  system elapsed \n#&gt;   0.001   0.000   1.001\n\n\n#&gt; [1] 1.72918\n\n\n#&gt;    user  system elapsed \n#&gt;   0.002   0.000   1.003\n\n\n\n\n#&gt; [1] 2.260361\n\n\n#&gt;    user  system elapsed \n#&gt;   0.001   0.000   1.002\n\n\n#&gt; [1] 2.260361\n\n\n#&gt;    user  system elapsed \n#&gt;   0.013   0.000   0.013\n\n\n\nBe careful about memoising impure functions!",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#exercise",
    "href": "slides/11_Function_operators.html#exercise",
    "title": "Advanced R Book Club",
    "section": "Exercise",
    "text": "Exercise\nHow does safely() work?\nThe source code looks like this:\n\n\n#&gt; function (.f, otherwise = NULL, quiet = TRUE) \n#&gt; {\n#&gt;     .f &lt;- as_mapper(.f)\n#&gt;     force(otherwise)\n#&gt;     check_bool(quiet)\n#&gt;     function(...) capture_error(.f(...), otherwise, quiet)\n#&gt; }\n#&gt; &lt;bytecode: 0x55fb7cb29d90&gt;\n#&gt; &lt;environment: namespace:purrr&gt;\n\n\nThe real work is done in capture_error which is defined in the package namespace. We can access it with the ::: operator. (Could also grab it from the function‚Äôs environment.)\n\n\n#&gt; function (code, otherwise = NULL, quiet = TRUE) \n#&gt; {\n#&gt;     tryCatch(list(result = code, error = NULL), error = function(e) {\n#&gt;         if (!quiet) {\n#&gt;             message(\"Error: \", conditionMessage(e))\n#&gt;         }\n#&gt;         list(result = otherwise, error = e)\n#&gt;     })\n#&gt; }\n#&gt; &lt;bytecode: 0x55fb7cb6e1d0&gt;\n#&gt; &lt;environment: namespace:purrr&gt;",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#case-study-make-your-own-function-operator",
    "href": "slides/11_Function_operators.html#case-study-make-your-own-function-operator",
    "title": "Advanced R Book Club",
    "section": "Case study: make your own function operator",
    "text": "Case study: make your own function operator\nHere we make a function operator that add a little delay in reading each page:\n\n\n#&gt;    user  system elapsed \n#&gt;       0       0       0\n\n\n#&gt;    user  system elapsed \n#&gt;     0.0     0.0     0.1\n\n\nAnd another to add a dot after nth invocation:\n\n\n#&gt; ..........\n\n\nCan now use both of these function operators to express our desired result:",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#exercise-1",
    "href": "slides/11_Function_operators.html#exercise-1",
    "title": "Advanced R Book Club",
    "section": "Exercise",
    "text": "Exercise\n\nShould you memoise file.download? Why or why not?",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/11_Function_operators.html#meeting-videos",
    "href": "slides/11_Function_operators.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:01:42    Oluwafemi Oyedele:  Hi, Good Evening !!!\n00:05:52    Arthur Shaw:    @federica, love the hex stickers behind you. All from rstudio::conf?\n00:07:12    Arthur Shaw:    I tried doing the same. I had a hard time ordering them. I also thought I'd make the stickers into magnets so that I could rearrange them in future.\n00:48:34    Oluwafemi Oyedele:  Thank you !!!\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:18:21    collinberke: Jenny Bryan debugging: https://www.youtube.com/watch?v=vgYS-F8opgE\n00:31:10    collinberke: https://purrr.tidyverse.org/reference/slowly.html\n00:47:43    Robert Hilly: By guys!",
    "crumbs": [
      "Functional programming",
      "Function operators"
    ]
  },
  {
    "objectID": "slides/14_R6.html#a-review-of-oop",
    "href": "slides/14_R6.html#a-review-of-oop",
    "title": "Advanced R Book Club",
    "section": "A review of OOP",
    "text": "A review of OOP\n\n\nA PIE",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#introducing-r6",
    "href": "slides/14_R6.html#introducing-r6",
    "title": "Advanced R Book Club",
    "section": "Introducing R6",
    "text": "Introducing R6\n\n\nR6 classes are not built into base.\n\nIt is a separate package.\nYou have to install and attach to use.\nIf R6 objects are used in a package, it needs to be specified as a dependency in the DESCRIPTION file.\n\n\n\nR6 classes have two special properties:\n\nUses an encapsulated OOP paradigm.\n\nMethods belong to objects, not generics.\nThey follow the form object$method() for calling fields and methods.\n\nR6 objects are mutable.\n\nModified in place.\nThey follow reference semantics.\n\n\nR6 is similar to OOP in other languages.\nHowever, its use can lead ton non-idiomatic R code.\n\nTradeoffs - follows an OOP paradigm but sacrafice what users are use to.\nMicrosoft365R.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#constructing-an-r6-class-the-basics",
    "href": "slides/14_R6.html#constructing-an-r6-class-the-basics",
    "title": "Advanced R Book Club",
    "section": "Constructing an R6 class, the basics",
    "text": "Constructing an R6 class, the basics\n\nReally simple to do, just use the R6::R6Class() function.\n\n\nTwo important arguments:\n\nclassname - A string used to name the class (not needed but suggested)\npublic - A list of methods (functions) and fields (anything else)\n\nSuggested style conventions to follow:\n\nClass name should follow UpperCamelCase.\nMethods and fields should use snake_case.\nAlways assign the result of a R6Class() into a variable with the same name as the class.\n\nYou can use self$ to access methods and fields of the current object.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#constructing-an-r6-object",
    "href": "slides/14_R6.html#constructing-an-r6-object",
    "title": "Advanced R Book Club",
    "section": "Constructing an R6 object",
    "text": "Constructing an R6 object\n\nJust use $new()\n\n\n\n#&gt; [1] 4",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#r6-objects-and-method-chaining",
    "href": "slides/14_R6.html#r6-objects-and-method-chaining",
    "title": "Advanced R Book Club",
    "section": "R6 objects and method chaining",
    "text": "R6 objects and method chaining\n\nAll side-effect R6 methods should return self invisibly.\nThis allows for method chaining.\n\n\nTo improve readability:",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#r6-useful-methods",
    "href": "slides/14_R6.html#r6-useful-methods",
    "title": "Advanced R Book Club",
    "section": "R6 useful methods",
    "text": "R6 useful methods\n\n$print() - Modifies the default printing method.\n\n$print() should always return invisible(self).\n\n$initialize() - Overides the default behaviour of $new().\n\nAlso provides a space to validate inputs.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#constructing-a-bank-account-class",
    "href": "slides/14_R6.html#constructing-a-bank-account-class",
    "title": "Advanced R Book Club",
    "section": "Constructing a bank account class",
    "text": "Constructing a bank account class",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#simple-transactions",
    "href": "slides/14_R6.html#simple-transactions",
    "title": "Advanced R Book Club",
    "section": "Simple transactions",
    "text": "Simple transactions\n\n\n#&gt; &lt;BankAccount&gt;\n#&gt;   Public:\n#&gt;     balance: 10\n#&gt;     clone: function (deep = FALSE) \n#&gt;     deposit: function (amount) \n#&gt;     initialize: function (owner, type) \n#&gt;     owner: NULL\n#&gt;     type: NULL\n#&gt;     withdraw: function (amount)\n\n\n\n\n#&gt; &lt;BankAccount&gt;\n#&gt;   Public:\n#&gt;     balance: 0\n#&gt;     clone: function (deep = FALSE) \n#&gt;     deposit: function (amount) \n#&gt;     initialize: function (owner, type) \n#&gt;     owner: NULL\n#&gt;     type: NULL\n#&gt;     withdraw: function (amount)",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#modifying-the-print-method",
    "href": "slides/14_R6.html#modifying-the-print-method",
    "title": "Advanced R Book Club",
    "section": "Modifying the $print() method",
    "text": "Modifying the $print() method\n\nImportant point: Methods are bound to individual objects.\n\nReference semantics vs.¬†copy-on-modify.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#how-does-this-work",
    "href": "slides/14_R6.html#how-does-this-work",
    "title": "Advanced R Book Club",
    "section": "How does this work?",
    "text": "How does this work?\n\nWinston Chang‚Äôs 2017 useR talk\nR6 objects are just environments with a particular structure.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#adding-methods-after-class-creation",
    "href": "slides/14_R6.html#adding-methods-after-class-creation",
    "title": "Advanced R Book Club",
    "section": "Adding methods after class creation",
    "text": "Adding methods after class creation\n\nUse $set() to add methods after creation.\nKeep in mind methods added with $set() are only available with new objects.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#inheritance",
    "href": "slides/14_R6.html#inheritance",
    "title": "Advanced R Book Club",
    "section": "Inheritance",
    "text": "Inheritance\n\nTo inherit behaviour from an existing class, provide the class object via the inherit argument.\nThis example also provides a good example on how to debug an R6 class.\n\nFuture instances debugging\nIndividual object debugging\n\nUse the debug() function.\n\nTest out our debugged class",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#introspection",
    "href": "slides/14_R6.html#introspection",
    "title": "Advanced R Book Club",
    "section": "Introspection",
    "text": "Introspection\n\nEvery R6 object has an S3 class that reflects its hierarchy of R6 classes.\nUse the class() function to determine class (and all classes it inherits from).\n\n\nYou can also list all methods and fields of an R6 object with names().",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#controlling-access",
    "href": "slides/14_R6.html#controlling-access",
    "title": "Advanced R Book Club",
    "section": "Controlling access",
    "text": "Controlling access\n\nR6 provides two other arguments:\n\nprivate - create fields and methods only available from within the class.\nactive - allows you to use accessor functions to define dynamic or active fields.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#privacy",
    "href": "slides/14_R6.html#privacy",
    "title": "Advanced R Book Club",
    "section": "Privacy",
    "text": "Privacy\n\nPrivate fields and methods - elements that can only be accessed from within the class, not from the outside.\nWe need to know two things to use private elements:\n\nprivate‚Äôs interface is just like public‚Äôs interface.\n\nList of methods (functions) and fields (everything else).\n\nYou use private$ instead of self$\n\nYou cannot access private fields or methods outside of the class.\n\n\nWhy might you want to keep your methods and fields private?\n\nYou‚Äôll want to be clear what is ok for others to access, especially if you have a complex system of classes.\nIt‚Äôs easier to refactor private fields and methods, as you know others are not relying on it.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#active-fields",
    "href": "slides/14_R6.html#active-fields",
    "title": "Advanced R Book Club",
    "section": "Active fields",
    "text": "Active fields\n\nActive fields allow you to define components that look like fields from the outside, but are defined with functions, like methods.\nImplemented using active bindings.\nEach active binding is a function that takes a single argument value.\nGreat when used in conjunction with private fields.\n\nThis allows for additional checks.\nFor example, we can use them to make a read-only field and to validate inputs.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#adding-a-read-only-bank-account-number",
    "href": "slides/14_R6.html#adding-a-read-only-bank-account-number",
    "title": "Advanced R Book Club",
    "section": "Adding a read-only bank account number",
    "text": "Adding a read-only bank account number",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#how-does-an-active-field-work",
    "href": "slides/14_R6.html#how-does-an-active-field-work",
    "title": "Advanced R Book Club",
    "section": "How does an active field work?",
    "text": "How does an active field work?\n\nNot sold on this, as I don‚Äôt know if active gets its own environment.\n\nAny ideas?",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#reference-semantics",
    "href": "slides/14_R6.html#reference-semantics",
    "title": "Advanced R Book Club",
    "section": "Reference semantics",
    "text": "Reference semantics\n\nBig difference to note about R6 objects in relation to other objects:\n\nR6 objects have reference semantics.\n\nThe primary consequence of reference semantics is that objects are not copied when modified.\nIf you want to copy an R6 object, you need to use $clone.\nThere are some other less obvious consequences:\n\nIt‚Äôs harder to reason about code that uses R6 objects, as you need more context.\nThink about when an R6 object is deleted, you can use $finalize() to clean up after yourself.\nIf one of the fields is an R6 object, you must create it inside $initialize(), not R6Class()",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#r6-makes-it-harder-to-reason-about-code",
    "href": "slides/14_R6.html#r6-makes-it-harder-to-reason-about-code",
    "title": "Advanced R Book Club",
    "section": "R6 makes it harder to reason about code",
    "text": "R6 makes it harder to reason about code\n\nReference semantics makes code harder to reason about.\n\n\nI understand the basics, but not necessarily the tradeoffs.\n\nAnyone care to fill me in?\nIs this a limitation of abstraction?",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#better-sense-of-whats-going-on-by-looking-at-a-finalizer",
    "href": "slides/14_R6.html#better-sense-of-whats-going-on-by-looking-at-a-finalizer",
    "title": "Advanced R Book Club",
    "section": "Better sense of what‚Äôs going on by looking at a finalizer",
    "text": "Better sense of what‚Äôs going on by looking at a finalizer\n\nSince R6 objects are not copied-on-modified, so they are only deleted once.\nWe can use this characteristic to complement our $initialize() with a $finalize() method.\n\ni.e., to clean up after we delete an R6 object.\nThis could be a way to close a database connection.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#consequences-of-r6-fields",
    "href": "slides/14_R6.html#consequences-of-r6-fields",
    "title": "Advanced R Book Club",
    "section": "Consequences of R6 fields",
    "text": "Consequences of R6 fields\n\nIf you use an R6 class as the default value of a field, it will be shared across all instances of the object.\n\n\nTo fix this, we need to move the class method call to $intialize()",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#why-use-r6",
    "href": "slides/14_R6.html#why-use-r6",
    "title": "Advanced R Book Club",
    "section": "Why use R6?",
    "text": "Why use R6?\n\nBook mentions R6 is similar to the built-in reference classes.\nThen why use R6?\nR6 is simpler.\n\nRC requires you to understand S4.\n\nComprehensive documentation.\nSimpler mechanisms for cross-package subclassing, which just works.\nR6 separates public and private fields in separate environments, RC stacks everything in the same environment.\nR6 is faster.\nRC is tied to R, so any bug fixes need a newer version of R.\n\nThis is especially important if you‚Äôre writing packages that need to work with multiple R versions.\n\nR6 and RC are similar, so if you need RC, it will only require a small amount of additional effort to learn RC.",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/14_R6.html#meeting-videos",
    "href": "slides/14_R6.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:11:34    Trevin: https://engineering-shiny.org/common-app-caveats.html?q=R6#using-r6-as-data-storage\n00:39:36    Federica Gazzelloni:    new R7: https://rconsortium.github.io/OOP-WG/\n00:40:04    Federica Gazzelloni:    R7 designed to be a successor to S3 and S4\n00:40:40    Federica Gazzelloni:    R6: https://r6.r-lib.org/articles/Introduction.html\n00:52:44    Trevin: https://advanced-r-solutions.rbind.io/r6.html#controlling-access\n01:00:34    Federica Gazzelloni:    interesting: https://r-craft.org/r-news/object-oriented-programming-oop-in-r-with-r6-the-complete-guide/\n01:01:58    Trevin: https://hadley.shinyapps.io/cran-downloads/\n01:02:33    Oluwafemi Oyedele:  Thank you !!!\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:06:57    Ron Legere: https://arxiv.org/abs/2303.12712\n00:07:07    Ron Legere: ^^ shows some of the power and limitations\n00:39:41    collinberke:    https://www.youtube.com/watch?v=3GEFd8rZQgY&list=WL&index=11\n00:49:20    iPhone: Sorry fellas need to jump early. See you next week!\n01:05:21    collinberke:    https://github.com/r4ds/bookclub-advr\n01:09:30    Ron Legere: makeActiveBinding",
    "crumbs": [
      "Object-oriented programming",
      "R6"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#introduction",
    "href": "slides/16_Trade-offs.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\n\nWe have three OOP systems introduced so far (S3, S4, R6)\nAt the current time (pre - S7?) Hadley recommends use S3 by default: It‚Äôs simple and widely used throughout base R and CRAN.\nIf you have experience in other languages, Resist the temptation to use R6 even though it will feel more familiar!",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#s4-versus-s3",
    "href": "slides/16_Trade-offs.html#s4-versus-s3",
    "title": "Advanced R Book Club",
    "section": "S4 versus S3",
    "text": "S4 versus S3\nWhich functional object system to use, S3 or S4? \n\nS3 is a simple and flexible system.\n\nGood for small teams who need flexibility and immediate payoffs.\nCommonly used throughout base R and CRAN\nFlexibility can cause problems, more complex systems might require formal conventions\n\nS4 is a more formal, strict system.\n\nGood for large projects and large teams\nUsed by Bioconductor project\nRequires significant up front investment in design, but payoff is a robust system that enforces conventions.\nS4 documentation is challenging to use.",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#r6-versus-s3",
    "href": "slides/16_Trade-offs.html#r6-versus-s3",
    "title": "Advanced R Book Club",
    "section": "R6 versus S3",
    "text": "R6 versus S3\nR6 is built on encapsulated objects, rather than generic functions.\nBig differences: general trade-offs\n\nA generic is a regular function so it lives in the global namespace. An R6 method belongs to an object so it lives in a local namespace. This influences how we think about naming.\nR6‚Äôs reference semantics allow methods to simultaneously return a value and modify an object. This solves a painful problem called ‚Äúthreading state‚Äù.\nYou invoke an R6 method using $, which is an infix operator. If you set up your methods correctly you can use chains of method calls as an alternative to the pipe.",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#namespacing",
    "href": "slides/16_Trade-offs.html#namespacing",
    "title": "Advanced R Book Club",
    "section": "Namespacing",
    "text": "Namespacing\nWhere methods are found?\n\nin S3, Generic functions are global and live in the global namespace\n\nAdvantage: Uniform API: summary, print, predict etc.\nDisadvantage: Must be careful about creating new methods! Homonyms must be avoided, don‚Äôt define plot(bank_heist)\n\nin R6, Encapsulated methods are local: objects with a scope\n\nAdvantage: No problems with homonyms: meaning of bank_heist$plot() is clear and unambiguous.\nDisadvantage: Lack of a uniform API, except by convention.",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#threading-state",
    "href": "slides/16_Trade-offs.html#threading-state",
    "title": "Advanced R Book Club",
    "section": "Threading state",
    "text": "Threading state\nIn S3 the challenge is to return a value and modify the object.\nNo problem with that, but what about when we want to pop a value? We need to return two things.\nThe usage is a bit awkward:\n\n\n#&gt; [1] 20\n\n\nIn python and other languages we have structured binding to make this less awkward. R has the {zeallot} package. For more, see this vignette:\nHowever, this is all easier in R6 due to the reference semantics!\n\n\n#&gt; [1] 20",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#method-chaining",
    "href": "slides/16_Trade-offs.html#method-chaining",
    "title": "Advanced R Book Club",
    "section": "Method chaining",
    "text": "Method chaining\nUseful to compose functions from left-to-right.\nUse of the operators:\n\nS3: |&gt; or %&gt;%\nR6: $\n\n\n\n#&gt; [1] 32",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#umm-what-about-s7",
    "href": "slides/16_Trade-offs.html#umm-what-about-s7",
    "title": "Advanced R Book Club",
    "section": "Umm‚Ä¶ what about S7 ?",
    "text": "Umm‚Ä¶ what about S7 ?\n\nhttps://xkcd.com/927/Primary references:\n\nDocs: https://rconsortium.github.io/S7/\nTalk by Hadley Wickham https://www.youtube.com/watch?v=P3FxCvSueag",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#s7-briefly",
    "href": "slides/16_Trade-offs.html#s7-briefly",
    "title": "Advanced R Book Club",
    "section": "S7 briefly",
    "text": "S7 briefly\n\nS7 is a ‚Äòbetter‚Äô version of S3 with some of the ‚Äòstrictness‚Äô of S4.\n\n\"A little bit more complex then S3, with almost all of the features, \nall of the payoff of S4\" - rstudio conf 2022, Hadley Wickham\n\nS3 + S4 = S7\nCompatible with S3: S7 objects are S3 objects! Can even extend an S3 object with S7\nSomewhat compatible with S4, see compatability vignette for details.\nHelpful error messages!\nNote that it was previously called R7, but it was changed to ‚ÄúS7‚Äù to better reflect that it is functional not encapsulated!",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#abbreviated-introduction-based-on-the-vignette",
    "href": "slides/16_Trade-offs.html#abbreviated-introduction-based-on-the-vignette",
    "title": "Advanced R Book Club",
    "section": "Abbreviated introduction based on the vignette",
    "text": "Abbreviated introduction based on the vignette\nTo install (it‚Äôs now on CRAN):\nNote the class_character, these are S7 classes corresponding to the base classes.\nNow to use it to create an object of class dog:\nProperties can be set/read with @, with automatic validation (‚Äòsafety rails‚Äô) based on the type!\nNote the helpful error message!\nLike S3 (and S4) S7 has generics, implemented with new_generic and method for particular methods:\nIf we have another class, we can implement the generic for that too:\nHelpful messages:\n‚Äúmost usage of S7 with S3 will just work‚Äù\nFor validators, inheritance, dynamic properties and more, see the vignette!",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#so-switch-to-s7",
    "href": "slides/16_Trade-offs.html#so-switch-to-s7",
    "title": "Advanced R Book Club",
    "section": "So‚Ä¶ switch to S7 ?",
    "text": "So‚Ä¶ switch to S7 ?\n\\[\n\\huge\n\\textbf{Soon}^{tm}\n\\]\n\nNot yet‚Ä¶ still in development! \nBut consider trying it out:\n\nTo stay ahead of the curve‚Ä¶ S7 will be integrated into base R someday!\nTo contribute feedback to the S7 team!\nTo get ‚Äúalmost all‚Äù of the benefits of S4 without the complexity !\n\nIn particular, if you have a new project that might require the complexity of S4, consider S7 instead!",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#oop-system-comparison",
    "href": "slides/16_Trade-offs.html#oop-system-comparison",
    "title": "Advanced R Book Club",
    "section": "OOP system comparison",
    "text": "OOP system comparison\n\n\n\nCharacteristic\nS3\nS4\nS7\nR6\n\n\n\n\nPackage\nbase R\nbase R\nS7\nR6\n\n\nProgramming type\nFunctional\nFunctional\nFunctional\nEncapulated\n\n\nComplexity\nLow\nHigh\nMedium\nHigh\n\n\nPayoff\nLow\nHigh\nHigh\nHigh\n\n\nTeam size\nSmall\nSmall-large\nLarge\n?\n\n\nNamespace\nGlobal\nGlobal?\nGlobal?\nLocal\n\n\nModify in place\nNo\nNo\nNo\nYes\n\n\nMethod chaining\n|&gt;\n|&gt;?\n|&gt;?\n$\n\n\nGet/set component\n$\n@\n@\n$\n\n\nCreate class\nclass() or structure() with class argument\nsetClass()\nnew_class()\nR6Class()\n\n\nCreate validator\nfunction()\nsetValidity() or validator argument in setClass()\nvalidator argument in new_class()\n$validate()\n\n\nCreate generic\nUseMethod()\nsetGeneric()\nnew_generic()\nNA\n\n\nCreate method\nfunction() assigned to generic.method\nsetMethod()\nmethod()\nR6Class()\n\n\nCreate object\nclass() or structure() with class argument or constructor function\nnew()\nUse registered method function\n$new()\n\n\nAdditional components\nattributes\nslots\nproperties",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/16_Trade-offs.html#meeting-videos",
    "href": "slides/16_Trade-offs.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:11:36    Oluwafemi Oyedele:  I have not built anything with them!!!\n00:16:31    Arthur Shaw:    https://cran.r-project.org/web/packages/sp/index.html\n00:19:05    Arthur Shaw:    Apparently Hadley asked the same question we're asking several years ago: https://stackoverflow.com/questions/5437238/which-packages-make-good-use-of-s4-objects\n00:19:16    Trevin: HA\n00:23:54    Trevin: Your audio is breaking up Federica\n01:06:58    Federica Gazzelloni:    https://mastering-shiny.org/reactive-motivation.html?q=R6#event-driven\n01:07:37    Federica Gazzelloni:    https://engineering-shiny.org/common-app-caveats.html?q=R6#using-r6-as-data-storage\n01:10:52    Oluwafemi Oyedele:  Thank you !!!\n\nCohort 7",
    "crumbs": [
      "Object-oriented programming",
      "Trade-offs"
    ]
  },
  {
    "objectID": "slides/00-club_intro.html#book-club-meetings",
    "href": "slides/00-club_intro.html#book-club-meetings",
    "title": "Club Meetings",
    "section": "Book club meetings",
    "text": "Book club meetings\n\nVolunteer leads discussion of a chapter\n\nThis is the best way to learn the material.\n\nPresentations:\n\nReview of material\nQuestions you have\nMaybe live demo\n\nMore info about editing: this github repo\nIdeally convert existing Rmd to qmd as we go\nRecorded, available on the Data Science Learning Community YouTube Channel (DSLC.video)",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/00-club_intro.html#pace",
    "href": "slides/00-club_intro.html#pace",
    "title": "Club Meetings",
    "section": "Pace",
    "text": "Pace\n\nGoal: 1 chapter/week\nOk to split overwhelming chapters\nOk to combine short chapters\nMeet every week except holidays, etc\n\nWe will meet even if scheduled presenter unavailable\nPush to finish before Daylight Savings Madness March 8",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/00-club_intro.html#learning-objectives-los",
    "href": "slides/00-club_intro.html#learning-objectives-los",
    "title": "Club Meetings",
    "section": "Learning objectives (LOs)",
    "text": "Learning objectives (LOs)\n\nStudents who study with LOs in mind retain more\nTips:\n\nThink ‚ÄúAfter today‚Äôs session, you will be able to {LO}‚Äù\nVery roughly 1 per heading",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/00-club_intro.html#group-introductions",
    "href": "slides/00-club_intro.html#group-introductions",
    "title": "Club Meetings",
    "section": "Group introductions",
    "text": "Group introductions\n\nIf you feel comfortable sharing:\n\nWho are you?\nWhere you calling in from? (If you‚Äôre not comfortable sharing, skip)\nHow long have you been using R?\nWhat was your introduction to R?\nWhat are you most looking forward to during the club?",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "01.html",
    "href": "01.html",
    "title": "1. Introduction",
    "section": "",
    "text": "No matching items",
    "crumbs": [
      "Getting started",
      "1. Introduction"
    ]
  },
  {
    "objectID": "01.html#meeting-videos",
    "href": "01.html#meeting-videos",
    "title": "1. Introduction",
    "section": "Meeting videos",
    "text": "Meeting videos\n\n\n\n\n\n\n\n\nCohort 7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCohort 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCohort 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCohort 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCohort 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCohort 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Getting started",
      "1. Introduction"
    ]
  },
  {
    "objectID": "slides/01.html#los-for-the-entire-book",
    "href": "slides/01.html#los-for-the-entire-book",
    "title": "Introduction",
    "section": "LOs for the entire book",
    "text": "LOs for the entire book\n\nImprove programming skills.\nDevelop a deep understanding of R language fundamentals.\nUnderstand what functional programming means.\nUnderstand object-oriented programming as applied in R.\nUnderstand metaprogramming while developing in R.\nBe able to identify what to optimize and how to optimize it."
  },
  {
    "objectID": "slides/01.html#los-for-this-chapter",
    "href": "slides/01.html#los-for-this-chapter",
    "title": "Introduction",
    "section": "LOs for this chapter",
    "text": "LOs for this chapter\n\nRecognize the differences between the 1st and 2nd edition of this book.\nDescribe the overall structure of the book.\nDecide whether this book is right for you."
  },
  {
    "objectID": "slides/01.html#hadleys-goals",
    "href": "slides/01.html#hadleys-goals",
    "title": "Introduction",
    "section": "Hadley‚Äôs goals",
    "text": "Hadley‚Äôs goals\n\nImprove coverage of concepts Hadley understood better after 1e\nReduce coverage of unimportant topics\nEasier to understand (including many more diagrams)"
  },
  {
    "objectID": "slides/01.html#base-vs-rlang",
    "href": "slides/01.html#base-vs-rlang",
    "title": "Introduction",
    "section": "Base vs rlang",
    "text": "Base vs rlang\n\n1e used base R almost exclusively\n2e uses {rlang}, {purrr}, etc"
  },
  {
    "objectID": "slides/01.html#the-5-sections",
    "href": "slides/01.html#the-5-sections",
    "title": "Introduction",
    "section": "The 5 sections",
    "text": "The 5 sections\n\nFoundations: (7 chapters) Building blocks of R\nFunctional programming: (3 chapters) Treating functions as objects (that can be args in functions)\nObject-oriented programming: (5 chapters + 1) The many object systems of R (we‚Äôll add S7)\nMetaprogramming: (5 chapters) Generating code with code\nTechniques: (4 chapters) Debugging, measuring performance, improving performance\n\n\n\nMight be useful to open TOC here."
  },
  {
    "objectID": "slides/01.html#why-r",
    "href": "slides/01.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?\n\nDiverse & welcoming community\nMany packages for stats & modeling, ML, dataviz, data wrangling\nRmarkdown / Quarto\nRStudio / Positron\nOften used in science\nFunctional programming powerful for data\nMetaprogramming\nEase of connection to C, C++, etc"
  },
  {
    "objectID": "slides/01.html#r-imperfections",
    "href": "slides/01.html#r-imperfections",
    "title": "Introduction",
    "section": "R imperfections",
    "text": "R imperfections\n\nMuch code by non-coders (messy)\nCommunity more about results than programming best practices\nMetaprogramming can lead to weird failures\nInconsistency from &gt; 30 years of evolution\nPoorly written R code runs very poorly"
  },
  {
    "objectID": "slides/01.html#who-should-read-advanced-r",
    "href": "slides/01.html#who-should-read-advanced-r",
    "title": "Introduction",
    "section": "Who should read Advanced R?",
    "text": "Who should read Advanced R?\n\nIntermediate (and up) R programmers who want to really understand R\nProgrammers from other langs who want to know why R is weird\nPrereqs:\n\nYou‚Äôve written lots of code\nYou understand basics of data analysis\nYou can install CRAN packages"
  },
  {
    "objectID": "slides/01.html#what-this-book-is-not",
    "href": "slides/01.html#what-this-book-is-not",
    "title": "Introduction",
    "section": "What this book is not",
    "text": "What this book is not\n\nR for Data Science\nR Packages"
  },
  {
    "objectID": "slides/01.html#meta-techniques",
    "href": "slides/01.html#meta-techniques",
    "title": "Introduction",
    "section": "Meta-techniques",
    "text": "Meta-techniques\n\nRead source code\n\nF2 to see code in RStudio/Positron (with RStudio bindings)\n\nAdopt a scientific mindset\n\nDon‚Äôt understand something? Hypothesize & experiment"
  },
  {
    "objectID": "slides/01.html#other-books",
    "href": "slides/01.html#other-books",
    "title": "Introduction",
    "section": "Other books",
    "text": "Other books\n\nThe Structure and Interpretation of Computer Programs (Abelson, Sussman, and Sussman, 1996) PDF\nConcepts, Techniques and Models of Computer Programming (Van Roy & Haridi, 2003) PDF\nThe Pragmatic Programmer (Hunt & Thomas, 1990) buy eBook\n\n\n\nAs far as I can tell, first 2 PDFs are legal.\nI don‚Äôt think a legal, free version of The Pragmatic Programmer is available."
  },
  {
    "objectID": "slides/22_Debugging.html#introduction",
    "href": "slides/22_Debugging.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\n\nFinding bug in code, is a process of confirming the many things that we believe are true ‚Äî until we find one which is not true.\n\n‚ÄîNorm Matloff\n\nDebugging is like being the detective in a crime movie where you‚Äôre also the murderer.\n\n-Filipe Fortes\nStrategies for finding and fixing errors\nGoogle!\nWhenever you see an error message, start by googling it. We can automate this process with the {errorist} and {searcher} packages.\nMake it repeatable\nTo find the root cause of an error, you‚Äôre going to need to execute the code many times as you consider and reject hypotheses. It‚Äôs worth some upfront investment to make the problem both easy and fast to reproduce.\nFigure out where it is\nTo find the bug, adopt the scientific method: generate hypotheses, design experiments to test them, and record your results. This may seem like a lot of work, but a systematic approach will end up saving you time.\nFix it and test it\nOnce you‚Äôve found the bug, you need to figure out how to fix it and to check that the fix actually worked. It‚Äôs very useful to have automated tests in place.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#locating-errors",
    "href": "slides/22_Debugging.html#locating-errors",
    "title": "Advanced R Book Club",
    "section": "Locating errors",
    "text": "Locating errors\nThe most important tool for finding errors is traceback(), which shows you the sequence of calls (also known as the call stack) that lead to the error.\n\nHere‚Äôs a simple example where f() calls g() calls h() calls i(), which checks if its argument is numeric:\n\n When we run f(\"a\") code in RStudio we see:\n\nIf you click ‚ÄúShow traceback‚Äù you see: \nYou read the traceback() output from bottom to top: the initial call is f(), which calls g(), then h(), then i(), which triggers the error.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#lazy-evaluation",
    "href": "slides/22_Debugging.html#lazy-evaluation",
    "title": "Advanced R Book Club",
    "section": "Lazy evaluation",
    "text": "Lazy evaluation\nOne drawback to traceback() is that it always linearises the call tree, which can be confusing if there is much lazy evaluation involved. For example, take the following example where the error happens when evaluating the first argument to f():\n\n\nNote: rlang::with_abort() is no longer an exported object from ‚Äònamespace:rlang‚Äô. There is an open issue about a fix for the chapter but no drop-in replacement.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#interactive-debugger",
    "href": "slides/22_Debugging.html#interactive-debugger",
    "title": "Advanced R Book Club",
    "section": "Interactive debugger",
    "text": "Interactive debugger\nEnter the interactive debugger is wwith RStudio‚Äôs ‚ÄúRerun with Debug‚Äù tool. This reruns the command that created the error, pausing execution where the error occurred. Otherwise, you can insert a call to browser() where you want to pause, and re-run the function.\n\nbrowser() is just a regular function call which means that you can run it conditionally by wrapping it in an if statement:",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#browser-commands",
    "href": "slides/22_Debugging.html#browser-commands",
    "title": "Advanced R Book Club",
    "section": "browser() commands",
    "text": "browser() commands\nbrowser() provides a few special commands.\n\n\nNext, n: executes the next step in the function.\nStep into, or s: works like next, but if the next step is a function, it will step into that function so you can explore it interactively.\nFinish, or f: finishes execution of the current loop or function.\nContinue, c: leaves interactive debugging and continues regular execution of the function.\nStop, Q: stops debugging, terminates the function, and returns to the global workspace.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#alternatives",
    "href": "slides/22_Debugging.html#alternatives",
    "title": "Advanced R Book Club",
    "section": "Alternatives",
    "text": "Alternatives\nThere are three alternatives to using browser(): setting breakpoints in RStudio, options(error = recover), and debug() and other related functions.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#breakpoints",
    "href": "slides/22_Debugging.html#breakpoints",
    "title": "Advanced R Book Club",
    "section": "Breakpoints",
    "text": "Breakpoints\nIn RStudio, you can set a breakpoint by clicking to the left of the line number, or pressing Shift + F9. There are two small downsides to breakpoints:\n\nThere are a few unusual situations in which breakpoints will not work. Read breakpoint troubleshooting for more details\nRStudio currently does not support conditional breakpoints.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#recover",
    "href": "slides/22_Debugging.html#recover",
    "title": "Advanced R Book Club",
    "section": "recover()",
    "text": "recover()\nWhen you set options(error = recover), when you get an error, you‚Äôll get an interactive prompt that displays the traceback and gives you the ability to interactively debug inside any of the frames:\n You can return to default error handling with options(error = NULL).",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#debug",
    "href": "slides/22_Debugging.html#debug",
    "title": "Advanced R Book Club",
    "section": "debug()",
    "text": "debug()\nAnother approach is to call a function that inserts the browser() call:\n\ndebug() inserts a browser statement in the first line of the specified function. undebug() removes it.\nutils::setBreakpoint() works similarly, but instead of taking a function name, it takes a file name and line number and finds the appropriate function for you.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#call-stack",
    "href": "slides/22_Debugging.html#call-stack",
    "title": "Advanced R Book Club",
    "section": "Call stack",
    "text": "Call stack\nThe call stacks printed by traceback(), browser() & where, and recover() are not consistent.\n\nRStudio displays calls in the same order as traceback(). rlang functions use the same ordering and numbering as recover(), but also use indenting to reinforce the hierarchy of calls.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#non-interactive-debugging",
    "href": "slides/22_Debugging.html#non-interactive-debugging",
    "title": "Advanced R Book Club",
    "section": "Non-interactive debugging",
    "text": "Non-interactive debugging\nWhen you can‚Äôt explore interactively‚Ä¶\ncallr::r()\ncallr::r(f, list(1, 2)) calls f(1, 2) in a fresh session to help diagnose:\n\nIs the global environment different? Have you loaded different packages? Are objects left from previous sessions causing differences?\nIs the working directory different?\nIs the PATH environment variable different?\nIs the R_LIBS environment variable different?\n\ndump.frames()\ndump.frames() is the equivalent to recover() for non-interactive code.\n\nPrint debugging\nInsert numerous print statements to precisely locate the problem, and see the values of important variables. Print debugging is particularly useful for compiled code.\n\nRMarkdown\n\nIf you‚Äôre knitting the file using RStudio, switch to calling rmarkdown::render(\"path/to/file.Rmd\") instead to run the code in the current session.\nFor interactive debugging, you‚Äôll need to call sink() in the error handler. For example, to use recover() with RMarkdown, you‚Äôd put the following code in your setup block:",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#non-error-failures",
    "href": "slides/22_Debugging.html#non-error-failures",
    "title": "Advanced R Book Club",
    "section": "Non-error failures",
    "text": "Non-error failures\nThere are other ways for a function to fail apart from throwing an error:\n\nA function may generate an unexpected warning. Convert warnings into errors with options(warn = 2) and use the the call stack.\nA function may generate an unexpected message. The removal of with_abort() from {rlang} breaks this solution.\nA function might never return.\nThe worst scenario is that your code might crash R completely, leaving you with no way to interactively debug your code. This indicates a bug in compiled (C or C++) code.",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#link-to-some-useful-resources-on-debugging",
    "href": "slides/22_Debugging.html#link-to-some-useful-resources-on-debugging",
    "title": "Advanced R Book Club",
    "section": "Link to some useful resources on debugging",
    "text": "Link to some useful resources on debugging\n\nJenny Bryan‚Äôs ‚ÄúObject of type closure is not subsettable‚Äù talk from rstudio::conf 2020\nJenny Bryan and Jim Hester‚Äôs book: ‚ÄúWhat They Forgot to Teach You About R‚Äù Ch12\nHadley‚Äôs video on a minimal reprex for a shiny app",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/22_Debugging.html#meeting-videos",
    "href": "slides/22_Debugging.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:12:43    Trevin Flickinger:  Hello everyone!\n00:13:03    Oluwafemi Oyedele:  Hello, Good evening!!!\n00:22:10    Trevin Flickinger:  My connection is slow so I‚Äôll be in the chat\n00:32:45    Trevin Flickinger:  If you start with ‚Äúcontinue‚Äù it should error out after the first call\n00:56:18    Trevin Flickinger:  Sys.frame(-1) shows it goes back one frame\n00:59:55    fg: thanks\n01:03:11    Arthur Shaw:    Anyone else lose the presentation?\n01:03:20    fg: yes\n01:03:22    fg: ?\n01:04:26    Trevin Flickinger:  I thought that was my internet connection\n01:05:07    Trevin Flickinger:  Thank you!\n01:08:42    Trevin Flickinger:  I need to use debug( ) more as well\n01:10:15    Trevin Flickinger:  21st works for me\n01:10:29    Oluwafemi Oyedele:  Same here!!!\n\nCohort 7",
    "crumbs": [
      "Techniques",
      "Debugging"
    ]
  },
  {
    "objectID": "slides/15_S4.html#introduction",
    "href": "slides/15_S4.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nObject consists of:\n\nSlots. Like fields in R6.\nMethods. Accessed through generics. Dispatched to particular methods.\n\nUses functions to define classes and their methods:\n\nsetClass(). Define class and its components.\nsetGenerics(). Define generic functions. Used to dispatch.\nsetMethods(). Define methods",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/15_S4.html#basics-overview",
    "href": "slides/15_S4.html#basics-overview",
    "title": "Advanced R Book Club",
    "section": "Basics overview",
    "text": "Basics overview\nSet class\nDefine the class:\nCreate an instance of the class\nSet generics\nDefine generic functions for setting and getting the age slot\n\n\n#&gt; [1] \"age\"\n\n\n#&gt; [1] \"age&lt;-\"\n\n\nSet methods\nDefine methods for the generics:\n\n\n#&gt; [1] 50\n\n\nTo give a flavor, there is only one method per slot. In more realistic cases, there might be several methods.",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/15_S4.html#details-on-defining-the-class",
    "href": "slides/15_S4.html#details-on-defining-the-class",
    "title": "Advanced R Book Club",
    "section": "Details on defining the class",
    "text": "Details on defining the class\nInheritance\nInstantiation\nCreate an instance of the class at two levels:\n\nFor developer (you): methods::new()\nFor user: constructor function\n\n\n\n#&gt; An object of class \"Person\"\n#&gt; Slot \"name\":\n#&gt; [1] \"Someone\"\n#&gt; \n#&gt; Slot \"age\":\n#&gt; [1] NA\n\n\nValidation\nS4 objects\n\nCheck class of slot at creation\n\n\n\n#&gt; Error in validObject(.Object): invalid class \"Person\" object: invalid object for slot \"name\" in class \"Person\": got class \"data.frame\", should be or extend class \"character\"\n\n\n\nDo not check other things\n\n\n\n#&gt; An object of class \"Person\"\n#&gt; Slot \"name\":\n#&gt; [1] \"Hadley\"\n#&gt; \n#&gt; Slot \"age\":\n#&gt; [1] 30 37\n\n\nThat‚Äôs where validation comes in‚Äìat two stages:\n\nAt creation\nAt modification\n\nAt creation\n\n\n#&gt; Class \"Person\" [in \".GlobalEnv\"]\n#&gt; \n#&gt; Slots:\n#&gt;                           \n#&gt; Name:       name       age\n#&gt; Class: character   numeric\n\n\n#&gt; Error in validObject(.Object): invalid class \"Person\" object: @name and @age must be same length\n\n\nAt modification\n\n\n#&gt; [1] \"name\"\n\n\n#&gt; [1] \"name&lt;-\"\n\n\n#&gt; [1] \"Jon Smythe\"\n\n\n#&gt; Error in validObject(x): invalid class \"Person\" object: @name and @age must be same length",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/15_S4.html#details-on-generics-and-methods",
    "href": "slides/15_S4.html#details-on-generics-and-methods",
    "title": "Advanced R Book Club",
    "section": "Details on generics and methods",
    "text": "Details on generics and methods\nDictate dispatch via signature\nSpecify function arguments to be used in determining method.\n\n\n#&gt; [1] \"myGeneric\"\n\n\nDefine generics\nGeneral form:\nExample to print object:\n\n\n#&gt; Person\n#&gt;   Name: Jon Smythe\n#&gt;   Age:  50\n\n\nExample to access slot:\n\n\n#&gt; [1] \"name\"\n\n\n#&gt; [1] \"Jon Smythe\"\n\n\nThis is how end users should access slots.",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/15_S4.html#example-lubridateperiod",
    "href": "slides/15_S4.html#example-lubridateperiod",
    "title": "Advanced R Book Club",
    "section": "Example: lubridate::period()",
    "text": "Example: lubridate::period()\nDefine the class\nSee source code here\nValidate object\nCheck whether object is valid‚Äìnotably if all arugments have the same length and are integers.\nSee source code here.\nSet methods\nShow period:\nSee source code here",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/15_S4.html#meeting-videos",
    "href": "slides/15_S4.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n01:09:37    Ron Legere: https://en.wikipedia.org/wiki/Composition_over_inheritance",
    "crumbs": [
      "Object-oriented programming",
      "S4"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#a-bit-of-a-recap",
    "href": "slides/20_Evaluation.html#a-bit-of-a-recap",
    "title": "Advanced R Book Club",
    "section": "A bit of a recap",
    "text": "A bit of a recap\n\nMetaprogramming: To separate our description of the action from the action itself - Separate the code from its evaluation.\nQuasiquotation: combine code written by the function‚Äôs author with code written by the function‚Äôs user.\n\nUnquotation: it gives the user the ability to evaluate parts of a quoted argument.\nEvaluation: it gives the developer the ability to evluated quoted expression in custom environments.\n\n\nTidy evaluation: quasiquotation, quosures and data masks",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#evaluation-basics",
    "href": "slides/20_Evaluation.html#evaluation-basics",
    "title": "Advanced R Book Club",
    "section": "Evaluation basics",
    "text": "Evaluation basics\nWe use eval() to evaluate, run, or execute expressions. It requires two arguments:\n\nexpr: the object to evaluate, either an expression or a symbol.\nenv: the environment in which to evaluate the expression or where to look for the values. Defaults to current env.\n\n\n\n#&gt; [1] 50\n\n\n\n\n#&gt; [1] 1010",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#application-reimplementing-source",
    "href": "slides/20_Evaluation.html#application-reimplementing-source",
    "title": "Advanced R Book Club",
    "section": "Application: reimplementing source()",
    "text": "Application: reimplementing source()\nWhat do we need?\n\nRead the file being sourced.\nParse its expressions (quote them?)\nEvaluate each expression saving the results\nReturn the results\n\nThe real source is much more complex.",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#quosures",
    "href": "slides/20_Evaluation.html#quosures",
    "title": "Advanced R Book Club",
    "section": "Quosures",
    "text": "Quosures\nquosures are a data structure from rlang containing both and expression and an environment\nQuoting + closure because it quotes the expression and encloses the environment.\nThree ways to create them:\n\nUsed mostly for learning: new_quosure(), creates a quosure from its components.\n\nWith a quosure, we can use eval_tidy() directly.\n\n\n#&gt; [1] 11\n\n\nAnd get its components\n\n\n#&gt; x + y\n\n\n#&gt; &lt;environment: 0x560e445d87c8&gt;\n\n\nOr set them\n\n\n#&gt; [1] 7\n\n\n\nUsed in the real world: enquo() o enquos(), to capture user supplied expressions. They take the environment from where they‚Äôre created.\n\n\n\n#&gt; a + b\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\n\nAlmost never used: quo() and quos(), to match to expr() and exprs().",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#quosures-and-...",
    "href": "slides/20_Evaluation.html#quosures-and-...",
    "title": "Advanced R Book Club",
    "section": "Quosures and ...",
    "text": "Quosures and ...\nQuosures are just a convenience, but they are essential when it comes to working with ..., because you can have each argument from ... associated with a different environment.\n\n\n#&gt; &lt;list_of&lt;quosure&gt;&gt;\n#&gt; \n#&gt; $global\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^x\n#&gt; env:  global\n#&gt; \n#&gt; $f\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^x\n#&gt; env:  0x560e43229b80",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#other-facts-about-quosures",
    "href": "slides/20_Evaluation.html#other-facts-about-quosures",
    "title": "Advanced R Book Club",
    "section": "Other facts about quosures",
    "text": "Other facts about quosures\nFormulas were the inspiration for closures because they also capture an expression and an environment\n\n\n#&gt; Class 'formula'  language ~runif(3)\n#&gt;   ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt;\n\n\nThere was an early version of tidy evaluation with formulas, but there‚Äôs no easy way to implement quasiquotation with them.\nThey are actually call objects\n\n\n#&gt; [1] \"quosure\" \"formula\"\n\n\n#&gt; [1] TRUE\n\n\nwith an attribute to store the environment\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\nNested quosures\nWith quosiquotation we can embed quosures in expressions.\nAnd evaluate them\n\n\n#&gt; [1] 101\n\n\nBut for printing it‚Äôs better to use expr_print(x)\n\n\n#&gt; (^x) + (^x)\n\n\n#&gt; (~x) + ~x",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#data-mask",
    "href": "slides/20_Evaluation.html#data-mask",
    "title": "Advanced R Book Club",
    "section": "Data mask",
    "text": "Data mask\nA data frame where the evaluated code will look first for its variable definitions.\nUsed in packages like dplyr and ggplot.\nTo use it we need to supply the data mask as a second argument to eval_tidy()\n\n\n#&gt;  [1]  100  200  300  400  500  600  700  800  900 1000\n\n\nEverything together, in one function.\nBut we need to create the objects that are not part of our data mask\n\n\n#&gt;  [1]  100  200  300  400  500  600  700  800  900 1000\n\n\nAlso doable with base::eval() instead of rlang::eval_tidy() but we have to use base::substitute() instead of enquo() (like we did for enexpr()) and we need to specify the environment.\n\n\n#&gt;  [1]  100  200  300  400  500  600  700  800  900 1000",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#pronouns-.data-and-.env",
    "href": "slides/20_Evaluation.html#pronouns-.data-and-.env",
    "title": "Advanced R Book Club",
    "section": "Pronouns: .data$ and .env$",
    "text": "Pronouns: .data$ and .env$\nAmbiguity!!\nAn object value can come from the env or from the data mask\n\n\n#&gt; [1] 20 30 40 50 60\n\n\nWe use pronouns:\n\n.data$x: x from the data mask\n.env$x: x from the environment\n\n\n\n#&gt; [1] 11 21 31 41 51",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#application-reimplementing-basesubset",
    "href": "slides/20_Evaluation.html#application-reimplementing-basesubset",
    "title": "Advanced R Book Club",
    "section": "Application: reimplementing base::subset()",
    "text": "Application: reimplementing base::subset()\nbase::subset() works like dplyr::filter(): it selects rows of a data frame given an expression.\nWhat do we need?\n\nQuote the expression to filter\nFigure out which rows in the data frame pass the filter\nSubset the data frame\n\n\n\n#&gt;   a b c\n#&gt; 1 1 5 5\n#&gt; 5 5 1 1",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#using-tidy-evaluation",
    "href": "slides/20_Evaluation.html#using-tidy-evaluation",
    "title": "Advanced R Book Club",
    "section": "Using tidy evaluation",
    "text": "Using tidy evaluation\nMost of the time we might not call it directly, but call a function that uses eval_tidy() (becoming developer AND user)\nUse case: resample and subset\nWe have a function that resamples a dataset:\n\n\n#&gt;     a b c\n#&gt; 5   5 1 1\n#&gt; 1   1 5 5\n#&gt; 4   4 2 4\n#&gt; 4.1 4 2 4\n#&gt; 4.2 4 2 4\n#&gt; 1.1 1 5 5\n#&gt; 5.1 5 1 1\n#&gt; 3   3 3 2\n#&gt; 3.1 3 3 2\n#&gt; 2   2 4 3\n\n\nBut we also want to use subset and we want to create a function that allow us to resample and subset (with subset2()) in a single step.\nFirst attempt:\n\n\n#&gt; Error: object 'b' not found\n\n\nWhat happened?\nsubsample() doesn‚Äôt quote any arguments and cond is evaluated normally\nSo we have to quote cond and unquote it when we pass it to subset2()\n\n\n#&gt;     a b c\n#&gt; 1   1 5 5\n#&gt; 5   5 1 1\n#&gt; 1.1 1 5 5\n#&gt; 5.1 5 1 1\n#&gt; 5.2 5 1 1\n#&gt; 5.3 5 1 1\n#&gt; 5.4 5 1 1\n#&gt; 5.5 5 1 1\n#&gt; 1.2 1 5 5\n#&gt; 1.3 1 5 5\n\n\nBe careful!, potential ambiguity:\nWhat would happen if x exists in the calling environment but doesn‚Äôt exist in df? Or if val also exists in df?\nSo, as developers of threshold_x() and users of subset2(), we have to add some pronouns:\nJust remember:\n\nAs a general rule of thumb, as a function author it‚Äôs your responsibility to avoid ambiguity with any expressions that you create; it‚Äôs the user‚Äôs responsibility to avoid ambiguity in expressions that they create.",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#base-evaluation",
    "href": "slides/20_Evaluation.html#base-evaluation",
    "title": "Advanced R Book Club",
    "section": "Base evaluation",
    "text": "Base evaluation\nCheck 20.6 in the book!",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/20_Evaluation.html#meeting-videos",
    "href": "slides/20_Evaluation.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n01:00:42    Trevin: They just want to help you present that‚Äôs all\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:55:22    collinberke:    https://rlang.r-lib.org/reference/embrace-operator.html?q=enquo#under-the-hood",
    "crumbs": [
      "Metaprogramming",
      "Evaluation"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#introduction",
    "href": "slides/08_Conditions.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nWhat are conditions? Problems that happen in functions:\n\nError\nWarning\nMessage\n\nAs a function author, one can signal them‚Äìthat is, say there‚Äôs a problem.\nAs a function consumer, one can handle them‚Äìfor example, react or ignore.",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#signalling-conditions",
    "href": "slides/08_Conditions.html#signalling-conditions",
    "title": "Advanced R Book Club",
    "section": "Signalling conditions",
    "text": "Signalling conditions\nTypes of conditions\nThree types of conditions:\n\n‚ùå Errors. Problem arose, and the function cannot continue.\n‚ö†Ô∏è Warnings. Problem arose, but the function can continue, if only partially.\nüí¨ Messages. Something happened, and the user should know.\n\n‚ùå Errors\nHow to throw errors\n\n\n#&gt; Error: ... in the name of love...\n\n\n#&gt; Error:\n#&gt; ! ...before you break my heart...\n\n\n#&gt; Error: ... think it o-o-over...\n\n\nComposing error messages\n\nMechanics.\n\nstop() pastes together arguments\n\n\n\n\n#&gt; Error: Your value is: 1\n\n\n\nabort() requires {glue}\n\n\n\n#&gt; Error:\n#&gt; ! Your value is: 1\n\n\n\nStyle. See here.\n\n‚ö†Ô∏è Warnings\nMay have multiple warnings per call\nPrint all warnings once call is complete.\nLike errors, warning() has\n\na call argument\nan {rlang} analog\n\n(Hadley‚Äôs) advice on usage:\n\nErr on the side of errors. In other words, error rather than warn.\nBut warnings make sense in a few cases:\n\nFunction is being deprecated. Warn that it is reaching end of life.\nFunction is reasonably sure to recover from issue.\n\n\nüí¨ Messages\nMechanics:\n\nIssued immediately\nDo not have a call argument\n\nStyle:\nMessages are best when they inform about:\n\nDefault arguments\nStatus updates of for functions used primarily for side-effects (e.g., interaction with web API, file downloaded, etc.)\nProgress of long-running process (in the absence of a status bar).\nPackage loading message (e.g., attaching package, objects masked)",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#ignoring-conditions",
    "href": "slides/08_Conditions.html#ignoring-conditions",
    "title": "Advanced R Book Club",
    "section": "Ignoring conditions",
    "text": "Ignoring conditions\nA few ways:\n\ntry()\nsuppressWarnings()\nsuppressMessages()\n\ntry()\nWhat it does:\n\nDisplays error\nBut continues execution after error\n\n\n\n#&gt; Error in log(x) : non-numeric argument to mathematical function\n\n\n#&gt; [1] 10\n\n\nBetter ways to react to/recover from errors:\n\nUse tryCatch() to ‚Äúcatch‚Äù the error and perform a different action in the event of an error.\nSet a default value inside the call. See below.\n\nsuppressWarnings(), suppressMessages()\nWhat it does:\n\nSupresses all warnings (messages)",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#handling-conditions",
    "href": "slides/08_Conditions.html#handling-conditions",
    "title": "Advanced R Book Club",
    "section": "Handling conditions",
    "text": "Handling conditions\nEvery condition has a default behavior:\n\n‚ùå Errors halt execution\n‚ö†Ô∏è Warnings are collected during execution and displayed in bulk after execution\nüí¨ Messages are displayed immediately\n\nCondition handlers allow one to change that behavior (within the scope of a function).\nTwo handler functions:\n\ntryCatch()\nwithCallingHandlers()\n\nCondition objects\n\n\n#&gt; List of 2\n#&gt;  $ message: chr \"An error\"\n#&gt;  $ call   : language force(expr)\n#&gt;  - attr(*, \"class\")= chr [1:3] \"simpleError\" \"error\" \"condition\"\n\n\nThe standard components\n\nmessage. The error message. To extract it, use conditionMessage(cnd).\ncall. The function call that triggered the condition. To extract it, use conditionCall(cnd).\n\nBut custom conditions may contain other components.\nExiting handlers\nIf a condition is signalled, this type of handler controls what code to run before exiting the function call.\n\n\n#&gt; [1] NA\n\n\nWhen a condition is signalled, control moves to the handler and never returns to the original code.\n\n\n#&gt; [1] \"There\"\n\n\nThe tryCatch() exit handler has one final argument: finally. This is run regardless of the condition of the original code. This is often used for clean-up.\nCalling handlers\nDefinition by verbal comparison:\n\nWith exit handlers, code exits the normal flow once a condition is signalled\nWith calling handlers, code continues in the normal flow once control is returned by the handler.\n\nDefinition by code comparison:\n\n\n#&gt; Caught a message!\n\n\n#&gt; Caught a message!\n\n\n#&gt; Caught a message!\n\n\nBy default, conditions propagate\nLet‚Äôs suppose that there are nested handlers. If a condition is signalled in the child, it propagates to its parent handler(s).\n\n\n#&gt; Level 1\n#&gt; Level 2\n\n\n#&gt; Level 1\n#&gt; Level 2\n\n\nBut conditions can be muffled\nIf one wants to ‚Äúmuffle‚Äù the siginal, one needs to use rlang::cnd_muffle()\n\n\n#&gt; Level 1\n#&gt; Level 2\n\n\n#&gt; Level 1\n\n\nCall stacks\nCall stacks of exiting and calling handlers differ.\nWhy?\n\nCalling handlers are called in the context of the call that signalled the condition exiting handlers are called in the context of the call to tryCatch()\n\nTo see this, consider how the call stacks differ for a toy example.\n\n\n#&gt; function (..., domain = NULL, appendLF = TRUE) \n#&gt; {\n#&gt;     cond &lt;- if (...length() == 1L && inherits(..1, \"condition\")) {\n#&gt;         if (nargs() &gt; 1L) \n#&gt;             warning(\"additional arguments ignored in message()\")\n#&gt;         ..1\n#&gt;     }\n#&gt;     else {\n#&gt;         msg &lt;- .makeMessage(..., domain = domain, appendLF = appendLF)\n#&gt;         call &lt;- sys.call()\n#&gt;         simpleMessage(msg, call)\n#&gt;     }\n#&gt;     defaultHandler &lt;- function(c) {\n#&gt;         cat(conditionMessage(c), file = stderr(), sep = \"\")\n#&gt;     }\n#&gt;     withRestarts({\n#&gt;         signalCondition(cond)\n#&gt;         defaultHandler(cond)\n#&gt;     }, muffleMessage = function() NULL)\n#&gt;     invisible()\n#&gt; }\n#&gt; &lt;bytecode: 0x562fc7ea6278&gt;\n#&gt; &lt;environment: namespace:base&gt;\n\n\n#&gt; function (..., domain = NULL, appendLF = TRUE) \n#&gt; {\n#&gt;     cond &lt;- if (...length() == 1L && inherits(..1, \"condition\")) {\n#&gt;         if (nargs() &gt; 1L) \n#&gt;             warning(\"additional arguments ignored in message()\")\n#&gt;         ..1\n#&gt;     }\n#&gt;     else {\n#&gt;         msg &lt;- .makeMessage(..., domain = domain, appendLF = appendLF)\n#&gt;         call &lt;- sys.call()\n#&gt;         simpleMessage(msg, call)\n#&gt;     }\n#&gt;     defaultHandler &lt;- function(c) {\n#&gt;         cat(conditionMessage(c), file = stderr(), sep = \"\")\n#&gt;     }\n#&gt;     withRestarts({\n#&gt;         signalCondition(cond)\n#&gt;         defaultHandler(cond)\n#&gt;     }, muffleMessage = function() NULL)\n#&gt;     invisible()\n#&gt; }\n#&gt; &lt;bytecode: 0x562fc7ea6278&gt;\n#&gt; &lt;environment: namespace:base&gt;\n\n\n#&gt; function (..., domain = NULL, appendLF = TRUE) \n#&gt; {\n#&gt;     cond &lt;- if (...length() == 1L && inherits(..1, \"condition\")) {\n#&gt;         if (nargs() &gt; 1L) \n#&gt;             warning(\"additional arguments ignored in message()\")\n#&gt;         ..1\n#&gt;     }\n#&gt;     else {\n#&gt;         msg &lt;- .makeMessage(..., domain = domain, appendLF = appendLF)\n#&gt;         call &lt;- sys.call()\n#&gt;         simpleMessage(msg, call)\n#&gt;     }\n#&gt;     defaultHandler &lt;- function(c) {\n#&gt;         cat(conditionMessage(c), file = stderr(), sep = \"\")\n#&gt;     }\n#&gt;     withRestarts({\n#&gt;         signalCondition(cond)\n#&gt;         defaultHandler(cond)\n#&gt;     }, muffleMessage = function() NULL)\n#&gt;     invisible()\n#&gt; }\n#&gt; &lt;bytecode: 0x562fc7ea6278&gt;\n#&gt; &lt;environment: namespace:base&gt;",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#custom-conditions",
    "href": "slides/08_Conditions.html#custom-conditions",
    "title": "Advanced R Book Club",
    "section": "Custom conditions",
    "text": "Custom conditions\nMotivation\nThe base::log() function provides a minimal error message.\n\n\n#&gt; Error in log(letters): non-numeric argument to mathematical function\n\n\n#&gt; Error in log(1:10, base = letters): non-numeric argument to mathematical function\n\n\nOne could make a more informative error message about which argument is problematic.\nConsider the difference:\n\n\n#&gt; Error in `my_log()`:\n#&gt; ! `x` must be a numeric vector; not character.\n\n\n#&gt; Error in `my_log()`:\n#&gt; ! `base` must be a numeric vector; not character.\n\n\nSignalling\nCreate a helper function to describe errors:\nRewrite the log function to use this helper function:\nSee the result for the end user:\n\n\n#&gt; Error in `abort_bad_argument()`:\n#&gt; ! `x` must be numeric; not character.\n\n\n#&gt; Error in `abort_bad_argument()`:\n#&gt; ! `base` must be numeric; not character.\n\n\nHandling\nUse class of condition object to allow for different handling of different types of errors\n\n\n#&gt; [1] \"bad_argument\"\n\n\nBut note that the first handler that matches any of the signal‚Äôs class, potentially in a vector of signal classes, will get control. So put the most specific handlers first.",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#applications",
    "href": "slides/08_Conditions.html#applications",
    "title": "Advanced R Book Club",
    "section": "Applications",
    "text": "Applications\nSee the sub-section in the book for excellent examples.",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#resources",
    "href": "slides/08_Conditions.html#resources",
    "title": "Advanced R Book Club",
    "section": "Resources",
    "text": "Resources\n\nConditions articles in rlang vignettes:\n\nIncluding function calls in error messages\nIncluding contextual information with error chains\nFormatting messages with cli\n\nOther resources from error message segment of rstudio::conf(2022) workshop ‚ÄúPackage Development Masterclass‚Äù",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/08_Conditions.html#meeting-videos",
    "href": "slides/08_Conditions.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:19:16    Trevin: https://style.tidyverse.org/error-messages.html\n00:20:14    Trevin: More on errors in the design guide: https://design.tidyverse.org/\n01:14:27    Federica Gazzelloni:    more info here: https://colinfay.me/learn-shiny-production/\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:34:09    Ron:    Someone did: https://cran.r-project.org/web/packages/comprehenr/vignettes/Introduction.html\n00:47:58    collinberke:    https://purrr.tidyverse.org/reference/safely.html\n00:48:24    Ron:    it's a function operator !\n00:49:37    Ron:    \\(x) length(unique(x) is not too verbose though\n00:49:39    Ron:    ;)\n01:06:50    collinberke:    https://colinfay.me/purrr-mappers/\n01:07:45    collinberke:    https://colinfay.me/purrr-web-mining/",
    "crumbs": [
      "Foundations",
      "Conditions"
    ]
  },
  {
    "objectID": "slides/07_Environments.html#slide-1",
    "href": "slides/07_Environments.html#slide-1",
    "title": "Advanced R Book Club",
    "section": "SLIDE 1",
    "text": "SLIDE 1\n\nADD SLIDES AS SECTIONS (##).\nTRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "Foundations",
      "Environments"
    ]
  },
  {
    "objectID": "slides/07_Environments.html#meeting-videos",
    "href": "slides/07_Environments.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:08:41    Arthur Shaw:    Hello, everyone!\n00:21:31    Federica Gazzelloni:    ?walk: Apply a function to each element of a list or atomic vector\n00:23:15    Federica Gazzelloni:    ?caller_env: Get properties of the current or caller frame\n00:24:56    Trevin: purrr::walk(x, function(x, ce, ace = rlang::caller_env()) {\n  .ce &lt;- rlang::caller_env()\n  message(\"Internal: \")\n  print(.ce)\n  message(\"Argument: \")\n  print(ace)\n  message(\"External: \")\n  print(ce)\n  message(\"Internal: \",paste0(ls(.ce), collapse = \"\\n\"))\n  message(\"Argument: \",paste0(ls(ace), collapse = \"\\n\"))\n  message(\"External: \",paste0(ls(ce), collapse = \"\\n\"))\n}, ce = rlang::caller_env())\n00:29:39    Federica Gazzelloni:    ??iwalk: Apply a function to each element of a vector, and its index\n00:35:30    Arthur Shaw:    https://magrittr.tidyverse.org/reference/tee.html\n00:36:05    Federica Gazzelloni:    ?`%T&gt;%`\n00:46:59    Trevin: ?eval\n01:06:03    Federica Gazzelloni:    https://cran.r-project.org/web/packages/withr/index.html\n01:09:21    Federica Gazzelloni:    https://github.com/r-lib/withr\n01:10:38    Trevin: I'm okay if we meet next week\n01:10:53    Oluwafemi Oyedele:  I am ok with next week\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:06:49    Ryan Honomichl: https://r4ds.github.io/bookclub-Advanced_R/QandA/docs/environments.html\n\n\n\n\n\nMeeting chat log\n\n00:14:44    collinberke:    https://ivelasq.rbind.io/blog/macos-rig/index.html\n00:21:10    collinberke:    https://github.com/tidyverse/dplyr/blob/main/NAMESPACE\n01:00:21    collinberke:    https://r4ds.hadley.nz/iteration.html",
    "crumbs": [
      "Foundations",
      "Environments"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#why-oop-is-hard-in-r",
    "href": "slides/12_Base_types.html#why-oop-is-hard-in-r",
    "title": "Advanced R Book Club",
    "section": "Why OOP is hard in R",
    "text": "Why OOP is hard in R\n\nMultiple OOP systems exist: S3, R6, S4, and (now/soon) S7.\nMultiple preferences: some users prefer one system; others, another.\nR‚Äôs OOP systems are different enough that prior OOP experience may not transfer well.\n\n\n\n\nXKCD 927",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#oop-big-ideas",
    "href": "slides/12_Base_types.html#oop-big-ideas",
    "title": "Advanced R Book Club",
    "section": "OOP: Big Ideas",
    "text": "OOP: Big Ideas\n\nPolymorphism. Function has a single interface (outside), but contains (inside) several class-specific implementations.\n\n\n\nExample of polymorphism\n\n\n\n#&gt;       mpg             cyl             disp             hp       \n#&gt;  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n#&gt;  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n#&gt;  Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n#&gt;  Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n#&gt;  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n#&gt;  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0\n\n\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = mpg ~ hp, data = mtcars)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -5.7121 -2.1122 -0.8854  1.5819  8.2360 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 30.09886    1.63392  18.421  &lt; 2e-16 ***\n#&gt; hp          -0.06823    0.01012  -6.742 1.79e-07 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 3.863 on 30 degrees of freedom\n#&gt; Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 \n#&gt; F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07\n\n\n\n\nEncapsulation. Function ‚Äúencapsulates‚Äù‚Äìthat is, encloses in an inviolate capsule‚Äìboth data and how it acts on data. Think of a REST API: a client interacts with with an API only through a set of discrete endpoints (i.e., things to get or set), but the server does not otherwise give access to its internal workings or state. Like with an API, this creates a separation of concerns: OOP functions take inputs and yield results; users only consume those results.",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#oop-properties",
    "href": "slides/12_Base_types.html#oop-properties",
    "title": "Advanced R Book Club",
    "section": "OOP: Properties",
    "text": "OOP: Properties\nObjects have class\n\nClass defines:\n\nMethod (i.e., what can be done with object)\nFields (i.e., data that defines an instance of the class)\n\nObjects are an instance of a class\n\nClass is inherited\n\nClass is defined:\n\nBy an object‚Äôs class (e.g., ordered factor)\nBy the parent of the object‚Äôs class (e.g., factor)\n\nInheritance matters for method dispatch\n\nIf a method is defined for an object‚Äôs class, use that method\nIf an object doesn‚Äôt have a method, use the method of the parent class\nThe process of finding a method, is called dispatch",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#oop-in-r-two-paradigms",
    "href": "slides/12_Base_types.html#oop-in-r-two-paradigms",
    "title": "Advanced R Book Club",
    "section": "OOP in R: Two Paradigms",
    "text": "OOP in R: Two Paradigms\n1. Encapsulated OOP\n\nObjects ‚Äúencapsulate‚Äù\n\nMethods (i.e., what can be done)\nFields (i.e., data on which things are done)\n\nCalls communicate this encapsulation, since form follows function\n\nForm: object.method(arg1, arg2)\nFunction: for object, apply method for object‚Äôs class with arguments arg1 and arg2\n\n\n2. Functional OOP\n\nMethods belong to ‚Äúgeneric‚Äù functions\nFrom the outside, look like regular functions: generic(object, arg2, arg3)\nFrom the inside, components are also functions\n\nConcept Map\n\n\n\n\n\n\n\n\nMermaid code\n\n\nDiagrammeR::mermaid(\"\ngraph LR\n\nOOP --&gt; encapsulated_OOP\nOOP --&gt; functional_OOP\n\nfunctional_OOP --&gt; S3\nfunctional_OOP --&gt; S4\n\nencapsulated_OOP --&gt; R6\nencapsulated_OOP --&gt; RC\n\")",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#oop-in-base-r",
    "href": "slides/12_Base_types.html#oop-in-base-r",
    "title": "Advanced R Book Club",
    "section": "OOP in base R",
    "text": "OOP in base R\n\nS3\n\nParadigm: functional OOP\nNoteworthy: R‚Äôs first OOP system\nUse case: low-cost solution for common problems\nDownsides: no guarantees\n\nS4\n\nParadigm: functional OOP\nNoteworthy: rewrite of S3, used by Bioconductor\nUse case: ‚Äúmore guarantees and greater encapsulation‚Äù than S3\nDownsides: higher setup cost than S3\n\nRC\n\nParadigm: encapsulated OOP\nNoteworthy: special type of S4 object is mutable‚Äìin other words, that can be modified in place (instead of R‚Äôs usual copy-on-modify behavior)\nUse cases: problems that are hard to tackle with functional OOP (in S3 and S4)\nDownsides: harder to reason about (because of modify-in-place logic)",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#oop-in-packages",
    "href": "slides/12_Base_types.html#oop-in-packages",
    "title": "Advanced R Book Club",
    "section": "OOP in packages",
    "text": "OOP in packages\n\nR6\n\nParadigm: encapsulated OOP\nNoteworthy: resolves issues with RC\n\nR7\n\nParadigm: functional OOP\nNoteworthy:\n\nbest parts of S3 and S4\nease of S3\npower of S4\nSee more in rstudio::conf(2022) talk\n\n\nR.oo\n\nParadigm: hybrid functional and encapsulated (?)\n\nproto\n\nParadigm: prototype OOP\nNoteworthy: OOP style used in ggplot2",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#how-can-you-tell-if-an-object-is-base-or-oop",
    "href": "slides/12_Base_types.html#how-can-you-tell-if-an-object-is-base-or-oop",
    "title": "Advanced R Book Club",
    "section": "How can you tell if an object is base or OOP?",
    "text": "How can you tell if an object is base or OOP?\nFunctions\nTwo functions:\n\nbase::is.object(), which yields TRUE/FALSE about whether is OOP object\nsloop::otype(), which says what type of object type: \"base\", \"S3\", etc.\n\nAn few examples:\n\n\n#&gt; [1] FALSE\n\n\n#&gt; [1] \"base\"\n\n\n#&gt; [1] TRUE\n\n\n#&gt; [1] \"S3\"\n\n\nsloop\n\nS Language Object-Oriented Programming\n\n\n\n\nXKCD 927\n\n\nClass\nOO objects have a ‚Äúclass‚Äù attribute:\n\n\n#&gt; NULL\n\n\n#&gt; [1] \"data.frame\"",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#what-about-types",
    "href": "slides/12_Base_types.html#what-about-types",
    "title": "Advanced R Book Club",
    "section": "What about types?",
    "text": "What about types?\nOnly OO objects have a ‚Äúclass‚Äù attribute, but every object‚Äìwhether base or OO‚Äìhas class\nVectors\n\n\n#&gt; [1] \"NULL\"\n\n\n#&gt; [1] \"character\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"complex\"\n\n\nFunctions\n\n\n#&gt; [1] \"closure\"\n\n\n#&gt; [1] \"special\"\n\n\n#&gt; [1] \"builtin\"\n\n\nEnvironments\n\n\n#&gt; [1] \"environment\"\n\n\nS4\n\n\n#&gt; [1] \"S4\"\n\n\nLanguage components\n\n\n#&gt; [1] \"symbol\"\n\n\n#&gt; [1] \"language\"\n\n\n#&gt; [1] \"pairlist\"\n\n\nConcept Map\n\nBase types in R\n\nSankey graph code\n\nThe graph above was made with SankeyMATIC\n// toggle \"Show Values\"\n// set Default Flow Colors from \"each flow's Source\"\n\nbase\\ntypes [8] vectors\nbase\\ntypes [3] functions\nbase\\ntypes [1] environments\nbase\\ntypes [1] S4 OOP\nbase\\ntypes [3] language\\ncomponents\nbase\\ntypes [6] C components\n\nvectors [1] NULL\nvectors [1] logical\nvectors [1] integer\nvectors [1] double\nvectors [1] complex\nvectors [1] character\nvectors [1] list\nvectors [1] raw\n\nfunctions [1] closure\nfunctions [1] special\nfunctions [1] builtin\n\nenvironments [1] environment\n\nS4 OOP [1] S4\n\nlanguage\\ncomponents [1] symbol\nlanguage\\ncomponents [1] language\nlanguage\\ncomponents [1] pairlist\n\nC components [1] externalptr\nC components [1] weakref\nC components [1] bytecode\nC components [1] promise\nC components [1] ...\nC components [1] any",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#be-careful-about-the-numeric-type",
    "href": "slides/12_Base_types.html#be-careful-about-the-numeric-type",
    "title": "Advanced R Book Club",
    "section": "Be careful about the numeric type",
    "text": "Be careful about the numeric type\n\nOften ‚Äúnumeric‚Äù is treated as synonymous for double:\n\n\n\n#&gt; [1] \"double\"\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] \"double\"\n\n\n#&gt; [1] \"double\"\n\n\n\nIn S3 and S4, ‚Äúnumeric‚Äù is taken as either integer or double, when choosing methods:\n\n\n\n#&gt; [1] \"double\"  \"numeric\"\n\n\n#&gt; [1] \"integer\" \"numeric\"\n\n\n\nis.numeric() tests whether an object behaves like a number\n\n\n\n#&gt; [1] \"integer\"\n\n\n#&gt; [1] FALSE\n\n\nBut Advanced R consistently uses numeric to mean integer or double type.",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/12_Base_types.html#meeting-videos",
    "href": "slides/12_Base_types.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:35:02    Trevin: sloop (‚Äúsail the seas of OOP‚Äù)\n00:42:40    Ryan Metcalf:   Awesome input Trevin! I jumped to the vignette, but didn't see the reference directly.\n01:00:01    Trevin: If you're interested there may be a new ‚ÄúR Packages\" cohort starting up soon (also a new version of the book coming out soonish as well?)\n01:08:23    Oluwafemi Oyedele:  Thank you !!!\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:35:43    Stone: base::InternalMethods\n00:48:04    collinberke: https://cran.r-project.org/doc/manuals/R-exts.html",
    "crumbs": [
      "Object-oriented programming",
      "Base types"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#what-are-functionals",
    "href": "slides/09_Functionals.html#what-are-functionals",
    "title": "Advanced R Book Club",
    "section": "What are functionals",
    "text": "What are functionals",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#introduction",
    "href": "slides/09_Functionals.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nFunctionals are functions that take function as input and return a vector as output. Functionals that you probably have used before are: apply(), lapply() or tapply().\n\nalternatives to loops\na functional is better than a for loop is better than while is better than repeat\n\nBenefits\n\nencourages function logic to be separated from iteration logic\ncan collapse into vectors/data frames easily",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#map",
    "href": "slides/09_Functionals.html#map",
    "title": "Advanced R Book Club",
    "section": "Map",
    "text": "Map\nmap() has two arguments, a vector and a function. It performs the function on each element of the vector and returns a list. We can also pass in some additional argument into the function.",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#benefit-of-using-the-map-function-in-purrr",
    "href": "slides/09_Functionals.html#benefit-of-using-the-map-function-in-purrr",
    "title": "Advanced R Book Club",
    "section": "Benefit of using the map function in purrr",
    "text": "Benefit of using the map function in purrr\n\npurrr::map() is equivalent to lapply()\nreturns a list and is the most general\nthe length of the input == the length of the output\nmap() is more flexible, with additional arguments allowed\nmap() has a host of extensions",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#atomic-vectors",
    "href": "slides/09_Functionals.html#atomic-vectors",
    "title": "Advanced R Book Club",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nhas 4 variants to return atomic vectors\n\nmap_chr()\nmap_dbl()\nmap_int()\nmap_lgl()\n\n\n\n\n#&gt; [[1]]\n#&gt; [1] 3\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 6\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 9\n\n\n#&gt; [1] 3 6 9\n\n\n#&gt; [1] FALSE  TRUE FALSE",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#anonymous-functions-and-shortcuts",
    "href": "slides/09_Functionals.html#anonymous-functions-and-shortcuts",
    "title": "Advanced R Book Club",
    "section": "Anonymous functions and shortcuts",
    "text": "Anonymous functions and shortcuts\nAnonymous functions\n\n\n#&gt;        mpg        cyl       disp         hp       drat         wt \n#&gt;  20.090625   6.187500 230.721875 146.687500   3.596563   3.217250\n\n\n\nthe ‚Äútwiddle‚Äù uses a twiddle ~ to set a formula\ncan use .x to reference the input map(.x = ..., .f = )\n\n\ncan be simplified further as\n\n\n\n#&gt;        mpg        cyl       disp         hp       drat         wt       qsec \n#&gt;  20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n#&gt;         vs         am       gear       carb \n#&gt;   0.437500   0.406250   3.687500   2.812500\n\n\n\nwhat happens when we try a handful of variants of the task at hand? (how many unique values are there for each variable?)\n\nNote that .x is the name of the first argument in map() (.f is the name of the second argument).\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   25    3   27   22   22   29   30    2    2    3    6\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   25    3   27   22   22   29   30    2    2    3    6\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   25    3   27   22   22   29   30    2    2    3    6\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   25    3   27   22   22   29   30    2    2    3    6\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   25    3   27   22   22   29   30    2    2    3    6\n\n\n#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;   32   32   32   32   32   32   32   32   32   32   32\n\n\n#&gt;    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb \n#&gt;  21.00   6.00 160.00 110.00   3.90   2.62  16.46   0.00   1.00   4.00   4.00\n\n\n#&gt;    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb \n#&gt;  21.00   6.00 160.00 110.00   3.90   2.62  16.46   0.00   1.00   4.00   4.00\n\n\n\n\n#&gt; Error in unique.default(): argument \"x\" is missing, with no default\n\n\n#&gt; Error in `map_dbl()`:\n#&gt; ‚Ñπ In index: 1.\n#&gt; ‚Ñπ With name: mpg.\n#&gt; Caused by error in `.f()`:\n#&gt; ! object 'x' not found",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#modify",
    "href": "slides/09_Functionals.html#modify",
    "title": "Advanced R Book Club",
    "section": "Modify",
    "text": "Modify\nSometimes we might want the output to be the same as the input, then in that case we can use the modify function rather than map\n\n\n#&gt; $x\n#&gt; [1] 3 6 9\n#&gt; \n#&gt; $y\n#&gt; [1] 18 15 12\n\n\n#&gt;   x  y\n#&gt; 1 3 18\n#&gt; 2 6 15\n#&gt; 3 9 12\n\n\nNote that modify() always returns the same type of output (which is not necessarily true with map()). Additionally, modify() does not actually change the value of df.\n\n\n#&gt;   x y\n#&gt; 1 1 6\n#&gt; 2 2 5\n#&gt; 3 3 4",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#purrr-style",
    "href": "slides/09_Functionals.html#purrr-style",
    "title": "Advanced R Book Club",
    "section": "purrr style",
    "text": "purrr style\n\n\n#&gt;       mpg       cyl      disp        hp      drat        wt \n#&gt;  20.13000   6.20000 233.93000 136.20000   3.54500   3.39845\n\n\nAn example from tidytuesday",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#map_-variants",
    "href": "slides/09_Functionals.html#map_-variants",
    "title": "Advanced R Book Club",
    "section": "map_*() variants",
    "text": "map_*() variants\nThere are many variants",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#map2_",
    "href": "slides/09_Functionals.html#map2_",
    "title": "Advanced R Book Club",
    "section": "map2_*()",
    "text": "map2_*()\n\nraise each value .x by 2\n\n\n\n#&gt; [1]  1  4  9 16 25\n\n\n\nraise each value .x by another value .y\n\n\n\n#&gt; [1]     1     8    81  1024 15625",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#the-benefit-of-using-the-map-over-apply-family-of-function",
    "href": "slides/09_Functionals.html#the-benefit-of-using-the-map-over-apply-family-of-function",
    "title": "Advanced R Book Club",
    "section": "The benefit of using the map over apply family of function",
    "text": "The benefit of using the map over apply family of function\n\nIt is written in C\nIt preserves names\nWe always know the return value type\nWe can apply the function for multiple input values\nWe can pass additional arguments into the function",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#walk",
    "href": "slides/09_Functionals.html#walk",
    "title": "Advanced R Book Club",
    "section": "walk()",
    "text": "walk()\n\nWe use walk() when we want to call a function for it side effect(s) rather than its return value, like generating plots, write.csv(), or ggsave(). If you don‚Äôt want a return value, map() will print more info than you may want.\n\n\n\n#&gt; 1 \n#&gt; 2 \n#&gt; 3\n\n\n#&gt; [[1]]\n#&gt; NULL\n#&gt; \n#&gt; [[2]]\n#&gt; NULL\n#&gt; \n#&gt; [[3]]\n#&gt; NULL\n\n\n\nfor these cases, use walk() instead\n\n\n\n#&gt; 1 \n#&gt; 2 \n#&gt; 3\n\n\ncat() does have a result, it‚Äôs just usually returned invisibly.\n\n\n#&gt; hello\n\n\n#&gt; hello\n\n\n#&gt; NULL\n\n\nWe can use pwalk() to save a list of plot to disk. Note that the ‚Äúp‚Äù in pwalk() means that we have more than 1 (or 2) variables to pipe into the function. Also note that the name of the first argument in all of the ‚Äúp‚Äù functions is now .l (instead of .x).\n\n\n#&gt; [[1]]\n#&gt; [1] \"/tmp/Rtmp9guTYp/4.png\"\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"/tmp/Rtmp9guTYp/6.png\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1] \"/tmp/Rtmp9guTYp/8.png\"\n\n\n\nwalk, walk2 and pwalk all invisibly return .x the first argument. This makes them suitable for use in the middle of pipelines.\nnote: I don‚Äôt think that it is ‚Äú.x‚Äù (or ‚Äú.l‚Äù) that they are returning invisibly. But I‚Äôm not sure what it is. Hadley says:\n\n\npurrr provides the walk family of functions that ignore the return values of the .f and instead return .x invisibly.\n\nBut not in the first cat() example, it is the NULL values that get returned invisibly (those aren‚Äôt the same as .x).",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#imap",
    "href": "slides/09_Functionals.html#imap",
    "title": "Advanced R Book Club",
    "section": "imap()",
    "text": "imap()\n\nimap() is like map2()except that .y is derived from names(.x) if named or seq_along(.x) if not.\nThese two produce the same result\n\n\n\n#&gt;                        mpg                        cyl \n#&gt;   \"mpg has a mean of 20.1\"    \"cyl has a mean of 6.2\" \n#&gt;                       disp                         hp \n#&gt; \"disp has a mean of 230.7\"   \"hp has a mean of 146.7\" \n#&gt;                       drat                         wt \n#&gt;   \"drat has a mean of 3.6\"     \"wt has a mean of 3.2\"\n\n\n#&gt;                        mpg                        cyl \n#&gt;   \"mpg has a mean of 20.1\"    \"cyl has a mean of 6.2\" \n#&gt;                       disp                         hp \n#&gt; \"disp has a mean of 230.7\"   \"hp has a mean of 146.7\" \n#&gt;                       drat                         wt \n#&gt;   \"drat has a mean of 3.6\"     \"wt has a mean of 3.2\"",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#pmap",
    "href": "slides/09_Functionals.html#pmap",
    "title": "Advanced R Book Club",
    "section": "pmap()",
    "text": "pmap()\n\nyou can pass a named list or dataframe as arguments to a function\nfor example runif() has the parameters n, min and max\n\n\n\n#&gt; [[1]]\n#&gt; [1] 2.297783\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 12.02014 64.99093\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 571.1072 514.8201 343.1410\n\n\n\ncould also be\n\n\n\n#&gt; [[1]]\n#&gt; [1] 1.788418\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 32.97924 70.45605\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 222.6209 256.6577 366.1546\n\n\n\nI like to use expand_grid() when I want all possible parameter combinations.\n\n\n\n#&gt; # A tibble: 12 √ó 3\n#&gt;        n   min   max\n#&gt;    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt;  1     1     1    10\n#&gt;  2     1     1   100\n#&gt;  3     1    10    10\n#&gt;  4     1    10   100\n#&gt;  5     2     1    10\n#&gt;  6     2     1   100\n#&gt;  7     2    10    10\n#&gt;  8     2    10   100\n#&gt;  9     3     1    10\n#&gt; 10     3     1   100\n#&gt; 11     3    10    10\n#&gt; 12     3    10   100\n\n\n#&gt; [[1]]\n#&gt; [1] 3.246953\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 91.26411\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 10\n#&gt; \n#&gt; [[4]]\n#&gt; [1] 50.92743\n#&gt; \n#&gt; [[5]]\n#&gt; [1] 9.435232 7.580300\n#&gt; \n#&gt; [[6]]\n#&gt; [1] 81.73132 17.86371\n#&gt; \n#&gt; [[7]]\n#&gt; [1] 10 10\n#&gt; \n#&gt; [[8]]\n#&gt; [1] 75.16802 17.72405\n#&gt; \n#&gt; [[9]]\n#&gt; [1] 2.066747 9.952076 6.331027\n#&gt; \n#&gt; [[10]]\n#&gt; [1] 58.86317 72.02046 20.36773\n#&gt; \n#&gt; [[11]]\n#&gt; [1] 10 10 10\n#&gt; \n#&gt; [[12]]\n#&gt; [1] 41.90192 79.05052 93.01568",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#reduce-family",
    "href": "slides/09_Functionals.html#reduce-family",
    "title": "Advanced R Book Club",
    "section": "reduce() family",
    "text": "reduce() family\nThe reduce() function is a powerful functional that allows you to abstract away from a sequence of functions that are applied in a fixed direction.\nreduce() takes a vector as its first argument, a function as its second argument, and an optional .init argument last. It will then apply the function repeatedly to the vector until there is only a single element left.\n(Hint: start at the top of the image and read down.)\n\nLet me really quickly demonstrate reduce() in action.\nSay you wanted to add up the numbers 1 through 5 using only the plus operator +. You could do something like:\n\n\n#&gt; [1] 15\n\n\nWhich is the same as:\n\n\n#&gt; [1] 15\n\n\nAnd if you want the start value to be something that is not the first argument of the vector, pass that value to the .init argument:\n\n\n#&gt; [1] TRUE",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#ggplot2-example-with-reduce",
    "href": "slides/09_Functionals.html#ggplot2-example-with-reduce",
    "title": "Advanced R Book Club",
    "section": "ggplot2 example with reduce",
    "text": "ggplot2 example with reduce\n\n\n\n\n\n\n\n\n\nLet us use the reduce() function. Note that reduce2() takes two arguments, but the first value (..1) is given by the .init value.\n\n\n\n\n\n\n\n\n\n\n\n#&gt; $age\n#&gt; # A tibble: 1 √ó 2\n#&gt;   name    age\n#&gt;   &lt;chr&gt; &lt;dbl&gt;\n#&gt; 1 john     30\n#&gt; \n#&gt; $sex\n#&gt; # A tibble: 2 √ó 3\n#&gt;   name  sex   trt$name $treatment\n#&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     \n#&gt; 1 john  M     Mary     A         \n#&gt; 2 mary  F     Mary     A\n\n\n#&gt; # A tibble: 2 √ó 4\n#&gt;   name    age sex   trt$name $treatment\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     \n#&gt; 1 john     30 M     Mary     A         \n#&gt; 2 mary     NA F     Mary     A\n\n\n#&gt; # A tibble: 2 √ó 4\n#&gt;   name    age sex   trt$name $treatment\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     \n#&gt; 1 john     30 M     Mary     A         \n#&gt; 2 mary     NA F     Mary     A\n\n\n\nto see all intermediate steps, use accumulate()\n\n\n\n#&gt; [1]  1  3  6 10 15\n\n\n\n\n#&gt; [[1]]\n\n\n\n\n\n\n\n\n\n#&gt; \n#&gt; [[2]]\n\n\n\n\n\n\n\n\n\n#&gt; \n#&gt; [[3]]\n\n\n\n\n\n\n\n\n\n#&gt; \n#&gt; [[4]]",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#map_df-variants",
    "href": "slides/09_Functionals.html#map_df-variants",
    "title": "Advanced R Book Club",
    "section": "map_df*() variants",
    "text": "map_df*() variants\n\nmap_dfr() = row bind the results\nmap_dfc() = column bind the results\nNote that map_dfr() has been superseded by map() |&gt; list_rbind() and map_dfc() has been superseded by map() |&gt; list_cbind()\n\n\n\n#&gt; [[1]]\n#&gt;   mpg cyl disp  hp drat wt qsec vs am gear carb      n\n#&gt; 1  20   5  208 122    3  3   18  0  0    3    2 N = 10\n#&gt; \n#&gt; [[2]]\n#&gt;   mpg cyl disp  hp drat wt qsec vs am gear carb      n\n#&gt; 1  20   6  233 136    3  3   18  0  0    3    2 N = 20\n\n\n#&gt;   mpg cyl disp  hp drat wt qsec vs am gear carb      n\n#&gt; 1  20   5  208 122    3  3   18  0  0    3    2 N = 10\n#&gt; 2  20   6  233 136    3  3   18  0  0    3    2 N = 20\n\n\n#&gt;   mpg cyl disp  hp drat wt qsec vs am gear carb      n\n#&gt; 1  20   5  208 122    3  3   18  0  0    3    2 N = 10\n#&gt; 2  20   6  233 136    3  3   18  0  0    3    2 N = 20",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#pluck",
    "href": "slides/09_Functionals.html#pluck",
    "title": "Advanced R Book Club",
    "section": "pluck()",
    "text": "pluck()\n\npluck() will pull a single element from a list\n\nI like the example from the book because the starting object is not particularly easy to work with (as many JSON objects might not be).\n\n\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1] -1\n#&gt; \n#&gt; [[1]]$x\n#&gt; [1] 1\n#&gt; \n#&gt; [[1]]$y\n#&gt; [1] 2\n#&gt; \n#&gt; [[1]]$z\n#&gt; [1] \"a\"\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] -2\n#&gt; \n#&gt; [[2]]$x\n#&gt; [1] 4\n#&gt; \n#&gt; [[2]]$y\n#&gt; [1] 5 6\n#&gt; \n#&gt; [[2]]$z\n#&gt; [1] \"b\"\n#&gt; \n#&gt; \n#&gt; [[3]]\n#&gt; [[3]][[1]]\n#&gt; [1] -3\n#&gt; \n#&gt; [[3]]$x\n#&gt; [1] 8\n#&gt; \n#&gt; [[3]]$y\n#&gt; [1]  9 10 11\n\n\nNotice that the ‚Äúfirst element‚Äù means something different in standard pluck() versus mapped pluck().\n\n\n#&gt; [[1]]\n#&gt; [1] -1\n#&gt; \n#&gt; $x\n#&gt; [1] 1\n#&gt; \n#&gt; $y\n#&gt; [1] 2\n#&gt; \n#&gt; $z\n#&gt; [1] \"a\"\n\n\n#&gt; [[1]]\n#&gt; [1] -1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] -2\n#&gt; \n#&gt; [[3]]\n#&gt; [1] -3\n\n\n#&gt; [1] -1 -2 -3\n\n\nThe map() functions also have shortcuts for extracting elements from vectors (powered by purrr::pluck()). Note that map(my_list, 3) is a shortcut for map(my_list, pluck, 3).\n\n\n#&gt; [1] 1 4 8\n\n\n#&gt; [1] -1 -2 -3\n\n\n#&gt; [1] 2 5 9\n\n\n#&gt; Error in `map_dbl()`:\n#&gt; ‚Ñπ In index: 2.\n#&gt; Caused by error:\n#&gt; ! Result must be length 1, not 2.\n\n\n#&gt; Error in `map_chr()`:\n#&gt; ‚Ñπ In index: 3.\n#&gt; Caused by error:\n#&gt; ! Result must be length 1, not 0.\n\n\n#&gt; [1] \"a\" \"b\" NA",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#not-covered-flatten",
    "href": "slides/09_Functionals.html#not-covered-flatten",
    "title": "Advanced R Book Club",
    "section": "Not covered: flatten()",
    "text": "Not covered: flatten()\n\nflatten() will turn a list of lists into a simpler vector.\n\n\n\n#&gt; $a\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $b\n#&gt; $b[[1]]\n#&gt; [1] 1 2 3\n\n\n#&gt; $a\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $b\n#&gt; $b[[1]]\n#&gt; [1] 1 2 3\n\n\n#&gt; $a\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $b\n#&gt; [1] 1 2 3\n\n\n#&gt; [1] 1 2 3 1 2 3",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#dealing-with-failures",
    "href": "slides/09_Functionals.html#dealing-with-failures",
    "title": "Advanced R Book Club",
    "section": "Dealing with Failures",
    "text": "Dealing with Failures",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#safely",
    "href": "slides/09_Functionals.html#safely",
    "title": "Advanced R Book Club",
    "section": "Safely",
    "text": "Safely\nsafely() is an adverb. It takes a function (a verb) and returns a modified version. In this case, the modified function will never throw an error. Instead it always returns a list with two elements.\n\nresult is the original result. If there is an error this will be NULL\nerror is an error object. If the operation was successful the ‚Äúerror‚Äù will be NULL.\n\n\n\n#&gt; [[1]]\n#&gt; [[1]]$result\n#&gt; [1] 0\n#&gt; \n#&gt; [[1]]$error\n#&gt; NULL\n#&gt; \n#&gt; \n#&gt; [[2]]\n#&gt; [[2]]$result\n#&gt; [1] 2.302585\n#&gt; \n#&gt; [[2]]$error\n#&gt; NULL\n#&gt; \n#&gt; \n#&gt; [[3]]\n#&gt; [[3]]$result\n#&gt; NULL\n#&gt; \n#&gt; [[3]]$error\n#&gt; &lt;simpleError in .Primitive(\"log\")(x, base): non-numeric argument to mathematical function&gt;",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#possibly",
    "href": "slides/09_Functionals.html#possibly",
    "title": "Advanced R Book Club",
    "section": "Possibly",
    "text": "Possibly\npossibly() always succeeds. It is simpler than safely(), because you can give it a default value to return when there is an error.\n\n\n#&gt; [1] 0.000000 2.302585       NA",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/09_Functionals.html#meeting-videos",
    "href": "slides/09_Functionals.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:15:49    Matt Dupree:    did anyone else lose audio?\n00:15:59    Federica Gazzelloni:    not me\n00:16:02    Arthur Shaw:    Not me either\n00:16:04    Trevin: okay for me\n00:16:27    Matt Dupree:    gonna try rejoining\n00:43:14    Matt Dupree:    oh i didn't know they invisibly returned .x! That's useful!\n00:48:29    Arthur Shaw:    Very cool trick !\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:34:09    Ron:    Someone did: https://cran.r-project.org/web/packages/comprehenr/vignettes/Introduction.html\n00:47:58    collinberke:    https://purrr.tidyverse.org/reference/safely.html\n00:48:24    Ron:    it's a function operator !\n00:49:37    Ron:    \\(x) length(unique(x) is not too verbose though\n00:49:39    Ron:    ;)\n01:06:50    collinberke:    https://colinfay.me/purrr-mappers/\n01:07:45    collinberke:    https://colinfay.me/purrr-web-mining/",
    "crumbs": [
      "Functional programming",
      "Functionals"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#overview",
    "href": "slides/24_Improving_performance.html#overview",
    "title": "Advanced R Book Club",
    "section": "Overview",
    "text": "Overview\n\nCode organization\nCheck for existing solutions\nDo as little as possible\nVectorise\nAvoid Copies",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#organizing-code",
    "href": "slides/24_Improving_performance.html#organizing-code",
    "title": "Advanced R Book Club",
    "section": "Organizing code",
    "text": "Organizing code\n\nWrite a function for each approach\n\n\nKeep old functions that you‚Äôve tried, even the failures\nGenerate a representative test case\n\n\nUse bench::mark to compare the different versions (and include unit tests)\n\n\n\n#&gt; # A tibble: 2 √ó 4\n#&gt;   expression      min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 mean1(x)      404¬µs    420¬µs     2368.\n#&gt; 2 mean2(x)      186¬µs    187¬µs     5278.",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#check-for-existing-solution",
    "href": "slides/24_Improving_performance.html#check-for-existing-solution",
    "title": "Advanced R Book Club",
    "section": "Check for Existing Solution",
    "text": "Check for Existing Solution\n\nCRAN task views (http://cran.rstudio.com/web/views/)\nReverse dependencies of Rcpp (https://cran.r-project.org/web/packages/Rcpp/)\nTalk to others!\n\nGoogle (rseek)\nStackoverflow ([R])\nhttps://community.rstudio.com/\nDSLC community",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#do-as-little-as-possible",
    "href": "slides/24_Improving_performance.html#do-as-little-as-possible",
    "title": "Advanced R Book Club",
    "section": "Do as little as possible",
    "text": "Do as little as possible\n\nuse a function tailored to a more specific type of input or output, or to a more specific problem\n\nrowSums(), colSums(), rowMeans(), and colMeans() are faster than equivalent invocations that use apply() because they are vectorised\nvapply() is faster than sapply() because it pre-specifies the output type\nany(x == 10) is much faster than 10 %in% x because testing equality is simpler than testing set inclusion\n\nSome functions coerce their inputs into a specific type. If your input is not the right type, the function has to do extra work\n\ne.g.¬†apply() will always turn a dataframe into a matrix\n\nOther examples\n\nread.csv(): specify known column types with colClasses. (Also consider switching to readr::read_csv() or data.table::fread() which are considerably faster than read.csv().)\nfactor(): specify known levels with levels.\ncut(): don‚Äôt generate labels with labels = FALSE if you don‚Äôt need them, or, even better, use findInterval() as mentioned in the ‚Äúsee also‚Äù section of the documentation.\nunlist(x, use.names = FALSE) is much faster than unlist(x).\ninteraction(): if you only need combinations that exist in the data, use drop = TRUE.",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#avoiding-method-dispatch",
    "href": "slides/24_Improving_performance.html#avoiding-method-dispatch",
    "title": "Advanced R Book Club",
    "section": "Avoiding Method Dispatch",
    "text": "Avoiding Method Dispatch\n\n\n#&gt; # A tibble: 2 √ó 4\n#&gt;   expression           min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt;      &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 mean(x)           3.01¬µs   3.24¬µs   299172.\n#&gt; 2 mean.default(x)    1.9¬µs   1.98¬µs   471292.\n\n\n\n\n#&gt; # A tibble: 3 √ó 4\n#&gt;   expression              min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt;         &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 mean(x)              3.02¬µs   3.25¬µs   298521.\n#&gt; 2 mean.default(x)       1.9¬µs   1.99¬µs   477561.\n#&gt; 3 .Internal(mean(x))    461ns 481.03ns  2050511.\n\n\n\n\n#&gt; # A tibble: 3 √ó 4\n#&gt;   expression              min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt;         &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 mean(x)              42.9¬µs   44.1¬µs    22420.\n#&gt; 2 mean.default(x)      41.4¬µs   42.8¬µs    23120.\n#&gt; 3 .Internal(mean(x))   38.3¬µs   41.2¬µs    24027.",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#avoiding-input-coercion",
    "href": "slides/24_Improving_performance.html#avoiding-input-coercion",
    "title": "Advanced R Book Club",
    "section": "Avoiding Input Coercion",
    "text": "Avoiding Input Coercion\n\nas.data.frame() is quite slow because it coerces each element into a data frame and then rbind()s them together\ninstead, if you have a named list with vectors of equal length, you can directly transform it into a data frame\n\n\n\n#&gt; # A tibble: 2 √ó 4\n#&gt;   expression         min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 as.data.frame   1.04ms   1.08ms      915.\n#&gt; 2 quick_df        6.31¬µs      7¬µs   134516.\n\n\nCaveat! This method is fast because it‚Äôs dangerous!",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#vectorise",
    "href": "slides/24_Improving_performance.html#vectorise",
    "title": "Advanced R Book Club",
    "section": "Vectorise",
    "text": "Vectorise\n\nvectorisation means finding the existing R function that is implemented in C and most closely applies to your problem\nVectorised functions that apply to many scenarios\n\nrowSums(), colSums(), rowMeans(), and colMeans()\nVectorised subsetting can lead to big improvements in speed\ncut() and findInterval() for converting continuous variables to categorical\nBe aware of vectorised functions like cumsum() and diff()\nMatrix algebra is a general example of vectorisation",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#avoiding-copies",
    "href": "slides/24_Improving_performance.html#avoiding-copies",
    "title": "Advanced R Book Club",
    "section": "Avoiding copies",
    "text": "Avoiding copies\n\nWhenever you use c(), append(), cbind(), rbind(), or paste() to create a bigger object, R must first allocate space for the new object and then copy the old object to its new home.\n\n\n\n#&gt; # A tibble: 4 √ó 4\n#&gt;   expression      min   median `itr/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt;\n#&gt; 1 loop10       20.5¬µs  21.74¬µs    44834.\n#&gt; 2 loop100    533.71¬µs 549.01¬µs     1795.\n#&gt; 3 vec10        3.57¬µs   3.77¬µs   258567.\n#&gt; 4 vec100      21.95¬µs  23.08¬µs    43003.",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#case-study-t-test",
    "href": "slides/24_Improving_performance.html#case-study-t-test",
    "title": "Advanced R Book Club",
    "section": "Case study: t-test",
    "text": "Case study: t-test\n\n\n#&gt;    user  system elapsed \n#&gt;   0.409   0.000   0.409\n\n\n#&gt;    user  system elapsed \n#&gt;   0.114   0.000   0.114\n\n\nAdd functionality to save values\n\n\n#&gt;    user  system elapsed \n#&gt;   0.133   0.000   0.134\n\n\nIf you look at the source code of stats:::t.test.default(), you‚Äôll see that it does a lot more than just compute the t-statistic.\n\n\n#&gt;    user  system elapsed \n#&gt;   0.025   0.001   0.025\n\n\nThis gives us a six-fold speed improvement!\n\n\n#&gt;    user  system elapsed \n#&gt;   0.009   0.000   0.009\n\n\n1000 times faster than when we started!",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#other-techniques",
    "href": "slides/24_Improving_performance.html#other-techniques",
    "title": "Advanced R Book Club",
    "section": "Other techniques",
    "text": "Other techniques\n\nRead R blogs to see what performance problems other people have struggled with, and how they have made their code faster.\nRead other R programming books, like The Art of R Programming or Patrick Burns‚Äô R Inferno to learn about common traps.\nTake an algorithms and data structure course to learn some well known ways of tackling certain classes of problems. I have heard good things about Princeton‚Äôs Algorithms course offered on Coursera.\nLearn how to parallelise your code. Two places to start are Parallel R and Parallel Computing for Data Science\nRead general books about optimisation like Mature optimisation or the Pragmatic Programmer\nRead more R code. StackOverflow, R Mailing List, DSLC, GitHub, etc.",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/24_Improving_performance.html#meeting-videos",
    "href": "slides/24_Improving_performance.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n(no video)\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:24:42    Arthur Shaw:    I wonder if there's a task view for R Universe: https://r-universe.dev/search/\n01:01:13    Arthur Shaw:    https://www.alexejgossmann.com/benchmarking_r/\n01:04:34    Trevin: I agree that the chapter is a good jumping off point. Gonna have to dig into some of the listed resources üòÑ\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:23:48    Ron Legere: https://www.mathworks.com/help/matlab/matlab_prog/vectorization.html",
    "crumbs": [
      "Techniques",
      "Improving performance"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#introduction",
    "href": "slides/25_Rewriting_R_code_in_C++.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\nIn this chapter we‚Äôll learn how to rewrite R code in C++ to make it faster using the Rcpp package. The Rcpp package makes it simple to connect C++ to R! With C++ you can fix:\n\nLoops that can‚Äôt be easily vectorised because subsequent iterations depend on previous ones.\nRecursive functions, or problems which involve calling functions millions of times. The overhead of calling a function in C++ is much lower than in R.\nProblems that require advanced data structures and algorithms that R doesn‚Äôt provide. Through the standard template library (STL), C++ has efficient implementations of many important data structures, from ordered maps to double-ended queue\n\n\nLike how?",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#getting-started-with-c",
    "href": "slides/25_Rewriting_R_code_in_C++.html#getting-started-with-c",
    "title": "Advanced R Book Club",
    "section": "Getting started with C++",
    "text": "Getting started with C++\nInstall a C++ compiler:\n\nRtools, on Windows\nXcode, on Mac\nSudo apt-get install r-base-dev or similar, on Linux.\n\nFirst example\nRcpp compiling the C++ code:\n\n\n#&gt; function (x, y, z) \n#&gt; .Call(&lt;pointer: 0x7fc0bc4ec530&gt;, x, y, z)\n\n\n#&gt; [1] 6\n\n\nSome things to note:\n\nThe syntax to create a function is different.\nTypes of inputs and outputs must be explicitly declared\nUse = for assignment, not &lt;-.\nEvery statement is terminated by a ;\nC++ has it‚Äôs own name for the types we are used to:\n\nscalar types are int, double, bool and String\nvector types (for Rcpp) are IntegerVector, NumericVector, LogicalVector and CharacterVector\nOther R types are available in C++: List, Function, DataFrame, and more.\n\nExplicitly use a return statement to return a value from a function.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#example-with-scalar-input-and-output",
    "href": "slides/25_Rewriting_R_code_in_C++.html#example-with-scalar-input-and-output",
    "title": "Advanced R Book Club",
    "section": "Example with scalar input and output",
    "text": "Example with scalar input and output\n\n\n#&gt; [1] 0\n\n\nTranslation:\n\nNote that the if syntax is identical! Not everything is different!",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#vector-input-scalar-output",
    "href": "slides/25_Rewriting_R_code_in_C++.html#vector-input-scalar-output",
    "title": "Advanced R Book Club",
    "section": "Vector Input, Scalar output:",
    "text": "Vector Input, Scalar output:\n\n\n#&gt; [1] 51.15312\n\n\nTranslation:\nSome observations:\n\nvector indices start at 0\nThe for statement has a different syntax: for(init; check; increment)\nMethods are called with .\ntotal += x[i] is equivalent to total = total + x[i].\nother in-place operators are -=, *=, and /=\n\nTo check for the fastest way we can use:\n\n\n#&gt; # A tibble: 3 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 sum(x)       2.03¬µs   2.05¬µs   473276.        0B        0\n#&gt; 2 sumC(x)       4.4¬µs   4.48¬µs   214417.        0B        0\n#&gt; 3 sumR(x)      26.7¬µs  27.04¬µs    36241.        0B        0",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#vector-input-and-output",
    "href": "slides/25_Rewriting_R_code_in_C++.html#vector-input-and-output",
    "title": "Advanced R Book Club",
    "section": "Vector input and output",
    "text": "Vector input and output\nNote: uses pow(), not ^, for exponentiation\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression          min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;     &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 pdistR(0.5, y)   4.95ms   5.36ms      187.    7.63MB     95.4\n#&gt; 2 pdistC(0.5, y)   4.08ms   4.17ms      239.    7.63MB    118.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#source-your-c-code",
    "href": "slides/25_Rewriting_R_code_in_C++.html#source-your-c-code",
    "title": "Advanced R Book Club",
    "section": "Source your C++ code",
    "text": "Source your C++ code\nSource stand-alone C++ files into R using sourceCpp()\nC++ files have extension .cpp\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\nAnd for each function that you want available within R, you need to prefix it with:\n// [[Rcpp::export]]\nInside a cpp file you can include R code using special comments\n/*** R\nrcode here\n*/\nExample\nThis block in Rmarkdown uses {Rcpp} as a short hand for engine = ‚ÄúRcpp‚Äù.\nNOTE: For some reason although the r code above runs, knit doesn‚Äôt include the output. Why?\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 mean(x)       393¬µs    419¬µs     2375.        0B        0\n#&gt; 2 meanC(x)      372¬µs    373¬µs     2658.        0B        0",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#data-frames-functions-and-attributes",
    "href": "slides/25_Rewriting_R_code_in_C++.html#data-frames-functions-and-attributes",
    "title": "Advanced R Book Club",
    "section": "Data frames, functions, and attributes",
    "text": "Data frames, functions, and attributes\nLists and Dataframes\nContrived example to illustrate how to access a dataframe from c++:\n\n\n#&gt; [1] -0.01541615\n\n\n\nNote that you must cast the values to the required type. C++ needs to know the types in advance.\n\nFunctions\n\n\n#&gt; [1] 2\n\n\n\nOther values can be accessed from c++ including\n\nattributes (use: .attr(). Also .names() is alias for name attribute.\nEnvironment, DottedPair, Language, Symbol , etc.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#missing-values",
    "href": "slides/25_Rewriting_R_code_in_C++.html#missing-values",
    "title": "Advanced R Book Club",
    "section": "Missing values",
    "text": "Missing values\nMissing values behave differently for C++ scalers\n\nScalar NA‚Äôs in Cpp : NA_LOGICAL, NA_INTEGER, NA_REAL, NA_STRING.\nIntegers (int) stores R NA‚Äôs as the smallest integer. Better to use length 1 IntegerVector\nDoubles use IEEE 754 NaN , which behaves a bit differently for logical expressions (but ok for math expressions).\n\n\n\n#&gt; [1] TRUE\n\n\n\nStrings are a class from Rcpp, so they handle missing values fine.\nbool can only hold two values, so be careful. Consider using vectors of length 1 or coercing to int\n\nVectors\n\nVectors are all type introduced by RCpp and know how to handle missing values if you use the specific type for that vector.\n\n\n\n#&gt; List of 4\n#&gt;  $ : num NA\n#&gt;  $ : int NA\n#&gt;  $ : logi NA\n#&gt;  $ : chr NA",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#standard-template-library",
    "href": "slides/25_Rewriting_R_code_in_C++.html#standard-template-library",
    "title": "Advanced R Book Club",
    "section": "Standard Template Library",
    "text": "Standard Template Library\nSTL provides powerful data structures and algorithms for C++.\nIterators\nIterators are used extensively in the STL to abstract away details of underlying data structures.\nIf you an iterator it, you can:\n\nGet the value by ‚Äòdereferencing‚Äô with *it\nAdvance to the next value with ++it\nCompare iterators (locations) with ==\n\nAlgorithms\n\nThe real power of iterators comes from using them with STL algorithms.\nA good reference is [https://en.cppreference.com/w/cpp/algorithm]\nBook provides examples using accumulate and upper_buond\nAnother Example:\n\n\n\n#&gt; [1] 1 4 9\n\n\n\n\n#&gt; [1] 1 4 9",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#data-structures",
    "href": "slides/25_Rewriting_R_code_in_C++.html#data-structures",
    "title": "Advanced R Book Club",
    "section": "Data Structures",
    "text": "Data Structures\nSTL provides a large set of data structures. Some of the most important:\n\nstd::vector - like an R vector, except knows how to grow efficiently\nstd::unordered_set - unique set of values. Ordered version std::set. Unordered is more efficient.\nstd::map - Moslty similar to R lists, provide an association between a key and a value. There is also an unordered version.\n\nA quick example illustrating the map:\n\n\n#&gt; 1 2 4 5 \n#&gt; 3 1 1 1\n\n\n\nNote that the map is converted to a named vector in this case on return\n\nTo learn more about the STL data structures see containers at cppreference",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#case-studies",
    "href": "slides/25_Rewriting_R_code_in_C++.html#case-studies",
    "title": "Advanced R Book Club",
    "section": "Case Studies",
    "text": "Case Studies\n\nCase StudyReal life uses of C++ to replace slow R code.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#case-study-1-gibbs-sampler",
    "href": "slides/25_Rewriting_R_code_in_C++.html#case-study-1-gibbs-sampler",
    "title": "Advanced R Book Club",
    "section": "Case study 1: Gibbs sampler",
    "text": "Case study 1: Gibbs sampler\nThe Gibbs sampler is a method for estimating parameters expectations. It is a MCMC algorithm that has been adapted to sample from multidimensional target distributions. Gibbs sampling generates a Markov chain of samples, each of which is correlated with nearby samples.\nExample blogged by Dirk Eddelbuettel, the R and C++ code is very similar but runs about 20 times faster.\n\n‚ÄúDarren Wilkinson stresses the rather pragmatic aspects of how fast and/or easy it is to write the code, rather than just the mere runtime.\n\n\n\n\nR code:\nActions to convert R to C++:\n\nAdd type declarations to all variables\nUse ( instead of [ to index into the matrix\nSubscript the results of rgamma and rnorm to convert from a vector into a scalar.\n\nChecking who‚Äôs best:\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression              min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;         &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 gibbs_r(100, 10)     2.67ms   2.74ms      363.  103.31KB     17.4\n#&gt; 2 gibbs_cpp(100, 10) 241.49¬µs 258.72¬µs     3825.    1.61KB     23.5",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#case-study-2-predict-a-model-response-from-three-inputs",
    "href": "slides/25_Rewriting_R_code_in_C++.html#case-study-2-predict-a-model-response-from-three-inputs",
    "title": "Advanced R Book Club",
    "section": "Case study 2: predict a model response from three inputs",
    "text": "Case study 2: predict a model response from three inputs\nRcpp is smoking fast for agent based models in data frames by Gary Weissman, MD, MSHP.\nStarts with this code:\nR code with a for loop:\nVectorized R code:\nC++:\nSample data:\n\nWho‚Äôs faster?\n\n\n\n\n\n\n#&gt; # A tibble: 3 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 vacc1        1.57ms   1.65ms      601.    7.86KB     27.6\n#&gt; 2 vacc2       43.04¬µs  45.17¬µs    20804.  146.67KB     37.8\n#&gt; 3 vacc3       13.38¬µs  13.78¬µs    71248.   11.98KB     14.3",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#resources",
    "href": "slides/25_Rewriting_R_code_in_C++.html#resources",
    "title": "Advanced R Book Club",
    "section": "Resources",
    "text": "Resources\n\nRcpp: Seamless R and C++ Integration\ncpp-tutorial is often recommended. Lots of ads though!\ncpp-reference\nC++20 for Programmers is a newer book that covers modern c++ for people who know programming in another language.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#op-success",
    "href": "slides/25_Rewriting_R_code_in_C++.html#op-success",
    "title": "Advanced R Book Club",
    "section": "Op Success!",
    "text": "Op Success!\n\nCongrats!",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/25_Rewriting_R_code_in_C++.html#meeting-videos",
    "href": "slides/25_Rewriting_R_code_in_C++.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:10:13    Arthur Shaw:    Did things freeze for anyone else?\n00:55:40    Federica Gazzelloni:    https://en.cppreference.com/w/cpp/container\n00:57:44    Federica Gazzelloni:    https://dirk.eddelbuettel.com/blog/2011/07/14/\n01:07:33    Trevin: I don‚Äôt have experience\n01:07:54    Oluwafemi Oyedele:  Same here!!!\n01:11:57    Arthur Shaw:    Does anyone know any packages that use C++? The one that comes to mind for me is haven, which uses a C++ library\n01:12:30    Trevin: When I was looking, one that stood out to me was rstan\n01:13:02    Arthur Shaw:    Reacted to \"When I was looking, ...\" with üëç\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:43:02    Gus Lipkin: I think I found the definition for `mean`\n\nAn R call goes to *a which then calls the C function *b\n\n*a: https://github.com/wch/r-source/blob/trunk/src/library/base/R/mean.R\n*b: https://github.com/wch/r-source/blob/trunk/src/library/stats/src/cov.c#L207\n\nIt looks like the second pass only happens if `R_FINITE(mean_from_first_pass)` which tries to call `isfinite` from C++ and if it‚Äôs not there, it‚Äôll make sure it is a number and is not positive or negative infinity.\n00:49:55    Gus Lipkin: I feel bad for dropping in on the last chapter and getting Collin‚Äôs thanks üòÖ I wish I‚Äôd joined sooner.",
    "crumbs": [
      "Techniques",
      "Rewriting R code in C++"
    ]
  },
  {
    "objectID": "slides/23_Measuring_performance.html#introduction",
    "href": "slides/23_Measuring_performance.html#introduction",
    "title": "Advanced R Book Club",
    "section": "Introduction",
    "text": "Introduction\n\n‚ÄúBefore you can make your code faster, you first need to figure out what‚Äôs making it slow.‚Äù\n\n\nSLOW DOWN TO LEARN HOW TO CODE FASTER | credits: packtpub.com\nprofile your code: measure the run-time of each line of code using realistic inputs\nexperiment with alternatives to find faster code\nmicrobenchmark to measure the difference in performance.",
    "crumbs": [
      "Techniques",
      "Measuring performance"
    ]
  },
  {
    "objectID": "slides/23_Measuring_performance.html#profiling",
    "href": "slides/23_Measuring_performance.html#profiling",
    "title": "Advanced R Book Club",
    "section": "Profiling",
    "text": "Profiling\nThe tool to use is a profiler, it allows for sampling the code performance through stopping the execution of code every few milliseconds and recording all the steps.\nExample:\nProfile the execution of f():\nprofvis::pause() is used instead of Sys.sleep()\nprofile f(), with utils::Rprof()\n\n\n#&gt; NULL\n\n\n#&gt; sample.interval=100000\n#&gt; \"pause\" \"f\" \"eval\" \"eval\" \"withVisible\" \"withCallingHandlers\" \"eval\" \"eval\" \"with_handlers\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"withRestarts\" \"evaluate::evaluate\" \"evaluate\" \"in_dir\" \"in_input_dir\" \"eng_r\" \"block_exec\" \"call_block\" \"process_group\" \"withCallingHandlers\" \"xfun:::handle_error\" \"process_file\" \"knitr::knit\" \"rmarkdown::render\" \"execute\" \".main\" \n#&gt; \"pause\" \"g\" \"f\" \"eval\" \"eval\" \"withVisible\" \"withCallingHandlers\" \"eval\" \"eval\" \"with_handlers\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"withRestarts\" \"evaluate::evaluate\" \"evaluate\" \"in_dir\" \"in_input_dir\" \"eng_r\" \"block_exec\" \"call_block\" \"process_group\" \"withCallingHandlers\" \"xfun:::handle_error\" \"process_file\" \"knitr::knit\" \"rmarkdown::render\" \"execute\" \".main\" \n#&gt; \"pause\" \"h\" \"g\" \"f\" \"eval\" \"eval\" \"withVisible\" \"withCallingHandlers\" \"eval\" \"eval\" \"with_handlers\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"withRestarts\" \"evaluate::evaluate\" \"evaluate\" \"in_dir\" \"in_input_dir\" \"eng_r\" \"block_exec\" \"call_block\" \"process_group\" \"withCallingHandlers\" \"xfun:::handle_error\" \"process_file\" \"knitr::knit\" \"rmarkdown::render\" \"execute\" \".main\" \n#&gt; \"pause\" \"h\" \"f\" \"eval\" \"eval\" \"withVisible\" \"withCallingHandlers\" \"eval\" \"eval\" \"with_handlers\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"doWithOneRestart\" \"withOneRestart\" \"withRestartList\" \"withRestarts\" \"evaluate::evaluate\" \"evaluate\" \"in_dir\" \"in_input_dir\" \"eng_r\" \"block_exec\" \"call_block\" \"process_group\" \"withCallingHandlers\" \"xfun:::handle_error\" \"process_file\" \"knitr::knit\" \"rmarkdown::render\" \"execute\" \".main\"\n\n\nVisualising profiles\nMakes easier to build up a mental model of what you need to change:\nprofvis::profvis()\nutils::summaryRprof()\n\n\n\n\n\n\nMemory profiling and the garbage collector\nProfiling a loop that modifies an existing variable:\n\n\n\n\n\n\nYou can figure out what is the source of the problem by looking at the memory column. In this case, copy-on-modify acts in each iteration of the loop creating another copy of x.\nLimitations\n\nProfiling does not extend to C code\nAnonymous functions are hard to figure out\nArguments are evaluated inside another function\n\nExercise\n?rm()\nsolution",
    "crumbs": [
      "Techniques",
      "Measuring performance"
    ]
  },
  {
    "objectID": "slides/23_Measuring_performance.html#microbenchmarking",
    "href": "slides/23_Measuring_performance.html#microbenchmarking",
    "title": "Advanced R Book Club",
    "section": "Microbenchmarking",
    "text": "Microbenchmarking\nMeasurement of the performance of a very small piece of code is useful for comparing small snippets of code for specific tasks.\n\n\n\n\n\nCredits: Google search-engine\n\n\n\n\nThe {bench} package uses a high precision time.\nbench::mark()\n\n\n#&gt; # A tibble: 2 √ó 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 sqrt(x)    360.07ns  380.1ns  2518707.      848B        0\n#&gt; 2 x^0.5        1.89¬µs   1.95¬µs   500380.      848B        0\n\n\n\nheavily right-skewed distribution",
    "crumbs": [
      "Techniques",
      "Measuring performance"
    ]
  },
  {
    "objectID": "slides/23_Measuring_performance.html#resources",
    "href": "slides/23_Measuring_performance.html#resources",
    "title": "Advanced R Book Club",
    "section": "Resources",
    "text": "Resources\n\nprofvis package\nbench package\nsolutions",
    "crumbs": [
      "Techniques",
      "Measuring performance"
    ]
  },
  {
    "objectID": "slides/23_Measuring_performance.html#meeting-videos",
    "href": "slides/23_Measuring_performance.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n(no video)\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\nCohort 7",
    "crumbs": [
      "Techniques",
      "Measuring performance"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#how-to-make-a-simple-function-in-r",
    "href": "slides/06_Functions.html#how-to-make-a-simple-function-in-r",
    "title": "Advanced R Book Club",
    "section": "How to make a simple function in R",
    "text": "How to make a simple function in R\nLet‚Äôs imagine the structure of a function:\n\nThe black dot on the left is the environment. The two blocks to the right are the function arguments.Function components\nFunctions have three parts, formals(), body(), and environment().\n\n\n\n\n\n\nExample\n\n\n#&gt; # A tibble: 3 √ó 5\n#&gt;   total_cup_points species owner                    country_of_origin farm_name \n#&gt;              &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;                    &lt;chr&gt;             &lt;chr&gt;     \n#&gt; 1             90.6 Arabica metad plc                Ethiopia          \"metad pl‚Ä¶\n#&gt; 2             89.9 Arabica metad plc                Ethiopia          \"metad pl‚Ä¶\n#&gt; 3             89.8 Arabica grounds for health admin Guatemala         \"san marc‚Ä¶\n\n\n\n\n#&gt; # A tibble: 1 √ó 1\n#&gt;    mean\n#&gt;   &lt;dbl&gt;\n#&gt; 1  82.1\n\n\n\n\n#&gt; $species\n\n\n\n\n#&gt; {\n#&gt;     avg &lt;- coffee_ratings %&gt;% filter(species == species) %&gt;% \n#&gt;         summarise(mean = mean(total_cup_points))\n#&gt;     return(avg)\n#&gt; }\n\n\n\n\n#&gt; &lt;environment: R_GlobalEnv&gt;\n\n\nFunctions uses attributes, one attribute used by base R is srcref, short for source reference. It points to the source code used to create the function. It contains code comments and other formatting.\n\n\n#&gt; NULL",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#primitive-functions",
    "href": "slides/06_Functions.html#primitive-functions",
    "title": "Advanced R Book Club",
    "section": "Primitive functions",
    "text": "Primitive functions\nAre the core function in base R, such as sum()\n\n\n#&gt; function (..., na.rm = FALSE)  .Primitive(\"sum\")\n\n\nType of primitives:\n\nbuiltin\nspecial\n\n\n\n#&gt; [1] \"builtin\"\n\n\nThese core functions have components to NULL.",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#anonymous-functions",
    "href": "slides/06_Functions.html#anonymous-functions",
    "title": "Advanced R Book Club",
    "section": "Anonymous functions",
    "text": "Anonymous functions\nIf you don‚Äôt provide a name to a function\n\n\n#&gt; $mpg\n#&gt; [1] 25\n#&gt; \n#&gt; $cyl\n#&gt; [1] 3\n\n\n\n\n#&gt; $mpg\n#&gt; [1] 25\n#&gt; \n#&gt; $cyl\n#&gt; [1] 3\n\n\nInvoking a function\n\n\n#&gt; # A tibble: 1 √ó 1\n#&gt;    mean\n#&gt;   &lt;dbl&gt;\n#&gt; 1  82.1",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#function-composition",
    "href": "slides/06_Functions.html#function-composition",
    "title": "Advanced R Book Club",
    "section": "Function composition",
    "text": "Function composition\n\n\n#&gt; [1] 0.3046064\n\n\n\n\n#&gt; [1] 0.3046064\n\n\n\n\n#&gt; [1] 0.3046064",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#more-about-functions-insights",
    "href": "slides/06_Functions.html#more-about-functions-insights",
    "title": "Advanced R Book Club",
    "section": "More about functions insights",
    "text": "More about functions insights\nLexical scoping\nRules\n\nName masking\nFunctions versus variables\nA fresh start\nDynamic lookup\n\nDebugging\nThis function\n\n\n#&gt; [1] 16\n\n\n\n\n#&gt; [1] \"+\" \"x\"\n\n\nYou can change the function‚Äôs environment to an environment which contains nothing:\n‚Ä¶ (dot-dot-dot)\nExample\n\n\n#&gt; List of 2\n#&gt;  $ y: num 2\n#&gt;  $ z: num 3\n\n\nExiting a function\n\nImplicit or explicit returns\nInvisibility (&lt;- most famous function that returns an invisible value)\nstop() to stop a function with an error.\nExit handlers\n\nFunction forms\n\nEverything that exists is an object. Everything that happens is a function call. ‚Äî John Chambers",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#case-study-sir-model-function",
    "href": "slides/06_Functions.html#case-study-sir-model-function",
    "title": "Advanced R Book Club",
    "section": "Case Study: SIR model function",
    "text": "Case Study: SIR model function\nThis is an interesting example taken from a course on Coursera: Infectious disease modelling-ICL\nThe purpose of this example is to show how to make a model passing through making a function.\nFirst we need to load some useful libraries:\nThen set the model inputs:\n\npopulation size (N)\nnumber of susceptable (S)\ninfected (I)\nrecovered (R)\n\nAnd add the model parameters:\n\ninfection rate (\\(\\beta\\))\nrecovery rate (\\(\\gamma\\))\n\nThen we set the time as an important factor, which defines the length of time we are looking at this model run. It is intended as the time range in which the infections spread out, let‚Äôs say that we are aiming to investigate an infection period of 100 days.\nFinally, we set up the SIR model, the susceptable, infected and recovered model. How do we do that is passing the paramenters through a function of the time, and state.\nWithin the model function we calculate one more paramenter, the force of infection: \\(\\lambda\\)\nOnce we have our SIR model function ready, we can calculate the output of the model, with the help of the function ode() from {deSolve} package.\n\n\n#&gt;   time        S        I         R\n#&gt; 1    0 99999.00 1.000000 0.0000000\n#&gt; 2    1 99998.43 1.284018 0.2840252\n#&gt; 3    2 99997.70 1.648696 0.6487171\n#&gt; 4    3 99996.77 2.116939 1.1169863\n#&gt; 5    4 99995.56 2.718152 1.7182450\n#&gt; 6    5 99994.02 3.490086 2.4902600\n\n\nIn addition to our builtin SIR model function we can have a look at:\nIt solves Ordinary Differential Equations.\n\n\n#&gt; function (y, times, func, parms, method = c(\"lsoda\", \"lsode\", \n#&gt;     \"lsodes\", \"lsodar\", \"vode\", \"daspk\", \"euler\", \"rk4\", \"ode23\", \n#&gt;     \"ode45\", \"radau\", \"bdf\", \"bdf_d\", \"adams\", \"impAdams\", \"impAdams_d\", \n#&gt;     \"iteration\"), ...) \n#&gt; {\n#&gt;     if (is.null(method)) \n#&gt;         method &lt;- \"lsoda\"\n#&gt;     if (is.list(method)) {\n#&gt;         if (!inherits(method, \"rkMethod\")) \n#&gt;             stop(\"'method' should be given as string or as a list of class 'rkMethod'\")\n#&gt;         out &lt;- rk(y, times, func, parms, method = method, ...)\n#&gt;     }\n#&gt;     else if (is.function(method)) \n#&gt;         out &lt;- method(y, times, func, parms, ...)\n#&gt;     else if (is.complex(y)) \n#&gt;         out &lt;- switch(match.arg(method), vode = zvode(y, times, \n#&gt;             func, parms, ...), bdf = zvode(y, times, func, parms, \n#&gt;             mf = 22, ...), bdf_d = zvode(y, times, func, parms, \n#&gt;             mf = 23, ...), adams = zvode(y, times, func, parms, \n#&gt;             mf = 10, ...), impAdams = zvode(y, times, func, parms, \n#&gt;             mf = 12, ...), impAdams_d = zvode(y, times, func, \n#&gt;             parms, mf = 13, ...))\n#&gt;     else out &lt;- switch(match.arg(method), lsoda = lsoda(y, times, \n#&gt;         func, parms, ...), vode = vode(y, times, func, parms, \n#&gt;         ...), lsode = lsode(y, times, func, parms, ...), lsodes = lsodes(y, \n#&gt;         times, func, parms, ...), lsodar = lsodar(y, times, func, \n#&gt;         parms, ...), daspk = daspk(y, times, func, parms, ...), \n#&gt;         euler = rk(y, times, func, parms, method = \"euler\", ...), \n#&gt;         rk4 = rk(y, times, func, parms, method = \"rk4\", ...), \n#&gt;         ode23 = rk(y, times, func, parms, method = \"ode23\", ...), \n#&gt;         ode45 = rk(y, times, func, parms, method = \"ode45\", ...), \n#&gt;         radau = radau(y, times, func, parms, ...), bdf = lsode(y, \n#&gt;             times, func, parms, mf = 22, ...), bdf_d = lsode(y, \n#&gt;             times, func, parms, mf = 23, ...), adams = lsode(y, \n#&gt;             times, func, parms, mf = 10, ...), impAdams = lsode(y, \n#&gt;             times, func, parms, mf = 12, ...), impAdams_d = lsode(y, \n#&gt;             times, func, parms, mf = 13, ...), iteration = iteration(y, \n#&gt;             times, func, parms, ...))\n#&gt;     return(out)\n#&gt; }\n#&gt; &lt;bytecode: 0x55e3c798f968&gt;\n#&gt; &lt;environment: namespace:deSolve&gt;\n\n\n\n\n#&gt; [1] ode.1D   ode.2D   ode.3D   ode.band\n#&gt; see '?methods' for accessing help and source code",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/06_Functions.html#meeting-videos",
    "href": "slides/06_Functions.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\nCohort 4\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:01:11    Oluwafemi Oyedele:  Hi, Good evening\n00:01:22    Federica Gazzelloni:    Hello!\n00:43:19    Federica Gazzelloni:    https://r4ds.github.io/bookclub-Advanced_R/QandA/docs/welcome.html\n00:52:48    Priyanka:   sounds good actually\n00:52:59    Federica Gazzelloni:    üëçüèª\n\n\n\n\n\nMeeting chat log\n\n00:09:30    Oluwafemi Oyedele:  Hi, Good evening\n00:10:41    Federica Gazzelloni:    Hi\n00:14:40    Federica Gazzelloni:    that's great!\n00:54:24    Trevin: Also, sorry if you are repeating üôÇ\n00:54:52    Arthur Shaw:    @ryan, thank you so much for the awesome synthesis! Could you share your reference list? I'd love to dive more deeply into the material you presented.\n00:57:02    Ryan Metcalf:   https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf\n00:59:32    Trevin: https://github.com/COHHIO/RmData\n01:01:48    Ryan Metcalf:   https://mastering-shiny.org/\n01:02:02    Ryan Metcalf:   https://engineering-shiny.org/\n01:02:15    Arthur Shaw:    @trevin, if you get bored with beepr, move to BRRR ;)\n01:02:16    Arthur Shaw:    https://github.com/brooke-watson/BRRR\n01:09:27    Ryan Metcalf:   This is amazing Trevin! I'll take a closer look. Is it ok to reach out to you with any questions?\n01:09:43    Trevin: Yeah, feel free to reach out\n\n\n\n\n\nMeeting chat log\n\n00:05:34    Trevin: I didn't catch that\n00:06:02    priyanka gagneja:   i won't be presenting I said .. so you two have the stage\n00:08:39    Federica Gazzelloni:    no worries\n00:08:46    Federica Gazzelloni:    next time you do it\n00:08:56    Federica Gazzelloni:    did you sign up?\n00:09:45    Trevin: Discord is free: https://discord.gg/rstudioconf2022\n00:10:04    Trevin: Free stream link: https://www.rstudio.com/conference/stream\n00:24:32    Arthur Shaw:    Maybe silly question: is the magrittr pipe an infix function?\n00:32:15    Trevin: https://colinfay.me/playing-r-infix-functions/\n00:33:23    Arthur Shaw:    Maybe another example of an infix function: lubridate's `%within%`\n00:33:47    Trevin: That's a good one too ^\n00:33:55    priyanka gagneja:   yes within would be good.\n00:40:13    Arthur Shaw:    no\n00:49:50    Arthur Shaw:    Sorry for dropping in and out. My WiFi router is having issues today--maybe is failing.\n01:08:59    Trevin: Looking forward to it üôÇ\n\nCohort 7\n\n\n\n\nMeeting chat log\n\n00:31:54    Ronald Legere:  https://en.wikipedia.org/wiki/First-class_function\n00:42:55    Ronald Legere:  https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\n\n\n\n\n\nMeeting chat log\n\n00:54:02    Ron:    Book gives this simple example of when you might want to use prefix form of an infix operator: lapply(list(1:3, 4:5), `+`, 3)\n00:56:49    collinberke:    https://colinfay.me/playing-r-infix-functions/#:~:text=What%20are%20infix%20functions%3F,%2C%20%2B%20%2C%20and%20so%20on.\n01:07:36    Ron:    x[3] &lt;- 33\n01:07:51    Ron:    `[&lt;-`(x,3,value =33)",
    "crumbs": [
      "Foundations",
      "Functions"
    ]
  },
  {
    "objectID": "slides/13_S3.html#introcudion",
    "href": "slides/13_S3.html#introcudion",
    "title": "Advanced R Book Club",
    "section": "Introcudion",
    "text": "Introcudion",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#basics",
    "href": "slides/13_S3.html#basics",
    "title": "Advanced R Book Club",
    "section": "Basics",
    "text": "Basics\n\nHas class\nUses a generic function to decide on method\n\nmethod = implementation for a specific class\ndispatch = process of searching for right method",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#classes",
    "href": "slides/13_S3.html#classes",
    "title": "Advanced R Book Club",
    "section": "Classes",
    "text": "Classes\nTheory:\nWhat is class?\n\nNo formal definition in S3\nSimply set class attribute\n\nHow to set class?\n\nAt time of object creation\nAfter object creation\n\nSome advice on style:\n\nRules: Can be any string\nAdvice: Consider using/including package name to avoid collision with name of another class (e.g., blob, which defines a single class; haven has labelled and haven_labelled)\nConvention: letters and _; avoid . since it might be confused as separator between generic and class name\n\nPractice:\nHow to compose a class in practice?\n\nConstructor, which helps the developer create new object of target class. Provide always.\nValidator, which checks that values in constructor are valid. May not be necessary for simple classes.\nHelper, which helps users create new objects of target class. May be relevant only for user-facing classes.\n\nConstructors\nHelp developers construct an object of the target class:\nValidators\nContrast a constructor, aimed at quickly creating instances of a class, which only checks type of inputs ‚Ä¶\n\n\n#&gt; Error in as.character.factor(x): malformed factor\n\n\n‚Ä¶ with a validator, aimed at emitting errors if inputs pose problems, which makes more expensive checks\n\n\n#&gt; Error: There must be at least as many `levels` as possible values in `x`\n\n\nMaybe there is a typo in the validate_factor() function? Do the integers need to start at 1 and be consecutive?\n\nIf not, then length(levels) &lt; max(values) should be length(levels) &lt; length(values), right?\nIf so, why do the integers need to start at 1 and be consecutive? And if they need to be as such, we should tell the user, right?\n\n\n\n#&gt; [1] a b c\n#&gt; Levels: a b c\n\n\n#&gt; Error: There must be at least as many `levels` as possible values in `x`\n\n\nHelpers\nSome desired virtues:\n\nHave the same name as the class\nCall the constructor and validator, if the latter exists.\nIssue error informative, user-facing error messages\nAdopt thoughtful/useful defaults or type conversion\n\nExercise 5 in 13.3.4\nQ: Read the documentation for utils::as.roman(). How would you write a constructor for this class? Does it need a validator? What might a helper do?\nA: This function transforms numeric input into Roman numbers. It is built on the integer type, which results in the following constructor.\nThe documentation tells us, that only values between 1 and 3899 are uniquely represented, which we then include in our validation function.\nFor convenience, we allow the user to also pass real values to a helper function.\n\n\n#&gt; [1] I       DCCLIII MMXXIV\n\n\n#&gt; Error: Roman numbers must fall between 1 and 3899.",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#generics-and-methods",
    "href": "slides/13_S3.html#generics-and-methods",
    "title": "Advanced R Book Club",
    "section": "Generics and methods",
    "text": "Generics and methods\nGeneric functions:\n\nConsist of a call to UseMethod()\nPass arguments from the generic to the dispatched method ‚Äúauto-magically‚Äù\n\nMethod dispatch\n\nUseMethod() creates a vector of method names\nDispatch\n\nExamines all methods in the vector\nSelects a method\n\n\n\n\n#&gt; =&gt; print.Date\n#&gt;  * print.default\n\n\nFinding methods\nWhile sloop::s3_dispatch() gives the specific method selected for a specific call, on can see the methods defined:\n\nFor a generic\n\n\n\n#&gt; # A tibble: 7 √ó 4\n#&gt;   generic class      visible source             \n#&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;lgl&gt;   &lt;chr&gt;              \n#&gt; 1 mean    Date       TRUE    base               \n#&gt; 2 mean    default    TRUE    base               \n#&gt; 3 mean    difftime   TRUE    base               \n#&gt; 4 mean    POSIXct    TRUE    base               \n#&gt; 5 mean    POSIXlt    TRUE    base               \n#&gt; 6 mean    quosure    FALSE   registered S3method\n#&gt; 7 mean    vctrs_vctr FALSE   registered S3method\n\n\n\nFor a class\n\n\n\n#&gt; # A tibble: 4 √ó 4\n#&gt;   generic       class   visible source             \n#&gt;   &lt;chr&gt;         &lt;chr&gt;   &lt;lgl&gt;   &lt;chr&gt;              \n#&gt; 1 as.data.frame ordered TRUE    base               \n#&gt; 2 Ops           ordered TRUE    base               \n#&gt; 3 relevel       ordered FALSE   registered S3method\n#&gt; 4 Summary       ordered TRUE    base\n\n\nCreating methods\nTwo rules:\n\nOnly write a method if you own the generic. Otherwise, bad manners.\nMethod must have same arguments as its generic‚Äìwith one important exception: ...\n\nExample from text:\nI thought it would be good for us to work through this problem.\n\nCarefully read the documentation for UseMethod() and explain why the following code returns the results that it does. What two usual rules of function evaluation does UseMethod() violate?\n\n\n\n#&gt; x y \n#&gt; 1 1\n\n\n#&gt; x y \n#&gt; 1 1\n\n\nExamples caught in the wild:\n\nhaven::zap_label, which removes column labels\ndplyr::mutate\ntidyr::pivot_longer",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#object-styles",
    "href": "slides/13_S3.html#object-styles",
    "title": "Advanced R Book Club",
    "section": "Object styles",
    "text": "Object styles",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#inheritance",
    "href": "slides/13_S3.html#inheritance",
    "title": "Advanced R Book Club",
    "section": "Inheritance",
    "text": "Inheritance\nThree ideas:\n\nClass is a vector of classes\n\n\n\n#&gt; [1] \"ordered\" \"factor\"\n\n\n#&gt; [1] \"POSIXct\" \"POSIXt\"\n\n\n\nDispatch moves through class vector until it finds a defined method\n\n\n\n#&gt;    print.ordered\n#&gt; =&gt; print.factor\n#&gt;  * print.default\n\n\n\nMethod can delegate to another method via NextMethod(), which is indicated by -&gt; as below:\n\n\n\n#&gt;    [.ordered\n#&gt; =&gt; [.factor\n#&gt;    [.default\n#&gt; -&gt; [ (internal)\n\n\nNextMethod()\nConsider secret class that masks each character of the input with x in output\n\n\n#&gt; [1] \"xx\"  \"x\"   \"xxx\"\n\n\nNotice that the [ method is problematic in that it does not preserve the secret class. Additionally, it returns 15 as the first element instead of xx.\n\n\n#&gt;    [.secret\n#&gt;    [.default\n#&gt; =&gt; [ (internal)\n\n\n#&gt; [1] 15\n\n\nFix this with a [.secret method:\nThe first fix (not run) is inefficient because it creates a copy of y.\nNextMethod() is more efficient.\nNotice that [.secret is selected for dispatch, but that the method delegates to the internal [.\n\n\n#&gt; =&gt; [.secret\n#&gt;    [.default\n#&gt; -&gt; [ (internal)\n\n\n#&gt; [1] \"xx\"\n\n\nAllowing subclassing\nContinue the example above to have a supersecret subclass that hides even the number of characters in the input (e.g., 123 -&gt; xxxxx, 12345678 -&gt; xxxxx, 1 -&gt; xxxxx).\nTo allow for this subclass, the constructor function needs to include two additional arguments:\n\n... for passing an arbitrary set of arguments to different subclasses\nclass for defining the subclass\n\nTo create the subclass, simply invoke the parent class constructor inside of the subclass constructor:\nBut this means the subclass inherits all parent methods and needs to overwrite all parent methods with subclass methods that return the sublclass rather than the parent class.\nThere‚Äôs no easy solution to this problem in base R.\nThere is a solution in the vectors package: vctrs::vec_restore()",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "slides/13_S3.html#meeting-videos",
    "href": "slides/13_S3.html#meeting-videos",
    "title": "Advanced R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\nCohort 2\n\n\nCohort 3\n\n\n\n\nCohort 4\n\n\n\n\nCohort 5\n\n\nCohort 6\n\n\n\n\nMeeting chat log\n\n00:05:30    Oluwafemi Oyedele:  Hi everyone, Good Evening !!!\n00:09:44    Trevin: I agree Arthur, need to look at that package some more\n\nCohort 7",
    "crumbs": [
      "Object-oriented programming",
      "S3"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Advanced R Book Club",
    "section": "",
    "text": "By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter‚Äôs License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor ‚Äì Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter‚Äôs License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter‚Äôs License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter‚Äôs License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter‚Äôs License You apply.\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-noncommercial-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-noncommercial-sharealike-4.0-international-public-license",
    "title": "Advanced R Book Club",
    "section": "",
    "text": "By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter‚Äôs License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor ‚Äì Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter‚Äôs License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter‚Äôs License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter‚Äôs License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter‚Äôs License You apply.\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "videos/01/07.html",
    "href": "videos/01/07.html",
    "title": "Cohort 7",
    "section": "",
    "text": "Meeting chat log\n\n00:20:42    collinberke:    https://rich-iannone.github.io/pointblank/\n00:27:36    Ryan Honomichl: brb\n00:37:05    collinberke:    https://rstudio.github.io/renv/articles/renv.html\n00:51:52    Ryan Honomichl: gotta sign off I'll be ready to lead chapter 2 next week!\n00:52:43    collinberke:    https://r4ds.had.co.nz/iteration.html\n00:59:44    collinberke:    https://mastering-shiny.org/action-tidy.html\n01:00:12    collinberke:    https://dplyr.tidyverse.org/articles/programming.html\n01:05:02    collinberke:    https://usethis.r-lib.org/reference/create_from_github.html\n01:05:53    collinberke:    https://github.com/r4ds/bookclub-advr\n01:06:28    Ron:    I gotta run ,  fun conversation, and nice to meet you Matthew !"
  }
]